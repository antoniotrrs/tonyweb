{"ast":null,"code":"// Utilities\nimport { eventName, isOn } from \"./helpers.js\";\nconst handlers = new WeakMap();\nexport function bindProps(el, props) {\n  Object.keys(props).forEach(k => {\n    if (isOn(k)) {\n      const name = eventName(k);\n      const handler = handlers.get(el);\n\n      if (props[k] == null) {\n        handler?.forEach(v => {\n          const [n, fn] = v;\n\n          if (n === name) {\n            el.removeEventListener(name, fn);\n            handler.delete(v);\n          }\n        });\n      } else if (!handler || ![...handler]?.some(v => v[0] === name && v[1] === props[k])) {\n        el.addEventListener(name, props[k]);\n\n        const _handler = handler || new Set();\n\n        _handler.add([name, props[k]]);\n\n        if (!handlers.has(el)) handlers.set(el, _handler);\n      }\n    } else {\n      if (props[k] == null) {\n        el.removeAttribute(k);\n      } else {\n        el.setAttribute(k, props[k]);\n      }\n    }\n  });\n}\nexport function unbindProps(el, props) {\n  Object.keys(props).forEach(k => {\n    if (isOn(k)) {\n      const name = eventName(k);\n      const handler = handlers.get(el);\n      handler?.forEach(v => {\n        const [n, fn] = v;\n\n        if (n === name) {\n          el.removeEventListener(name, fn);\n          handler.delete(v);\n        }\n      });\n    } else {\n      el.removeAttribute(k);\n    }\n  });\n}","map":{"version":3,"mappings":"AAAA;AAAA,SACSA,SADT,EACoBC,IADpB,QACwB,cADxB;AAGA,MAAMC,QAAQ,GAAG,IAAIC,OAAJ,EAAjB;AAEA,OAAO,SAASC,SAAT,CAAoBC,EAApB,EAAqCC,KAArC,EAAiE;AACtEC,QAAM,CAACC,IAAPD,CAAYD,KAAZC,EAAmBE,OAAnBF,CAA2BG,CAAC,IAAI;AAC9B,QAAIT,IAAI,CAACS,CAAD,CAAR,EAAa;AACX,YAAMC,IAAI,GAAGX,SAAS,CAACU,CAAD,CAAtB;AACA,YAAME,OAAO,GAAGV,QAAQ,CAACW,GAATX,CAAaG,EAAbH,CAAhB;;AACA,UAAII,KAAK,CAACI,CAAD,CAALJ,IAAY,IAAhB,EAAsB;AACpBM,eAAO,EAAEH,OAATG,CAAiBE,CAAC,IAAI;AACpB,gBAAM,CAACC,CAAD,EAAIC,EAAJ,IAAUF,CAAhB;;AACA,cAAIC,CAAC,KAAKJ,IAAV,EAAgB;AACdN,cAAE,CAACY,mBAAHZ,CAAuBM,IAAvBN,EAA6BW,EAA7BX;AACAO,mBAAO,CAACM,MAARN,CAAeE,CAAfF;AACF;AACD,SANDA;AAOD,OARD,MAQO,IAAI,CAACA,OAAD,IAAY,CAAC,CAAC,GAAGA,OAAJ,GAAcO,IAAd,CAAmBL,CAAC,IAAIA,CAAC,CAAC,CAAD,CAADA,KAASH,IAATG,IAAiBA,CAAC,CAAC,CAAD,CAADA,KAASR,KAAK,CAACI,CAAD,CAAvD,CAAjB,EAA8E;AACnFL,UAAE,CAACe,gBAAHf,CAAoBM,IAApBN,EAA0BC,KAAK,CAACI,CAAD,CAA/BL;;AACA,cAAMgB,QAAQ,GAAGT,OAAO,IAAI,IAAIU,GAAJ,EAA5B;;AACAD,gBAAQ,CAACE,GAATF,CAAa,CAACV,IAAD,EAAOL,KAAK,CAACI,CAAD,CAAZ,CAAbW;;AACA,YAAI,CAACnB,QAAQ,CAACsB,GAATtB,CAAaG,EAAbH,CAAL,EAAuBA,QAAQ,CAACuB,GAATvB,CAAaG,EAAbH,EAAiBmB,QAAjBnB;AACzB;AACD,KAjBD,MAiBO;AACL,UAAII,KAAK,CAACI,CAAD,CAALJ,IAAY,IAAhB,EAAsB;AACpBD,UAAE,CAACqB,eAAHrB,CAAmBK,CAAnBL;AACD,OAFD,MAEO;AACLA,UAAE,CAACsB,YAAHtB,CAAgBK,CAAhBL,EAAmBC,KAAK,CAACI,CAAD,CAAxBL;AACF;AACF;AACD,GAzBDE;AA0BF;AAEA,OAAO,SAASqB,WAAT,CAAsBvB,EAAtB,EAAuCC,KAAvC,EAAmE;AACxEC,QAAM,CAACC,IAAPD,CAAYD,KAAZC,EAAmBE,OAAnBF,CAA2BG,CAAC,IAAI;AAC9B,QAAIT,IAAI,CAACS,CAAD,CAAR,EAAa;AACX,YAAMC,IAAI,GAAGX,SAAS,CAACU,CAAD,CAAtB;AACA,YAAME,OAAO,GAAGV,QAAQ,CAACW,GAATX,CAAaG,EAAbH,CAAhB;AACAU,aAAO,EAAEH,OAATG,CAAiBE,CAAC,IAAI;AACpB,cAAM,CAACC,CAAD,EAAIC,EAAJ,IAAUF,CAAhB;;AACA,YAAIC,CAAC,KAAKJ,IAAV,EAAgB;AACdN,YAAE,CAACY,mBAAHZ,CAAuBM,IAAvBN,EAA6BW,EAA7BX;AACAO,iBAAO,CAACM,MAARN,CAAeE,CAAfF;AACF;AACD,OANDA;AAOD,KAVD,MAUO;AACLP,QAAE,CAACqB,eAAHrB,CAAmBK,CAAnBL;AACF;AACD,GAdDE;AAeF","names":["eventName","isOn","handlers","WeakMap","bindProps","el","props","Object","keys","forEach","k","name","handler","get","v","n","fn","removeEventListener","delete","some","addEventListener","_handler","Set","add","has","set","removeAttribute","setAttribute","unbindProps"],"sources":["../../src/util/bindProps.ts"],"sourcesContent":["// Utilities\nimport { eventName, isOn } from '@/util/helpers'\n\nconst handlers = new WeakMap<HTMLElement, Set<[string, () => void]>>()\n\nexport function bindProps (el: HTMLElement, props: Record<string, any>) {\n  Object.keys(props).forEach(k => {\n    if (isOn(k)) {\n      const name = eventName(k)\n      const handler = handlers.get(el)\n      if (props[k] == null) {\n        handler?.forEach(v => {\n          const [n, fn] = v\n          if (n === name) {\n            el.removeEventListener(name, fn)\n            handler.delete(v)\n          }\n        })\n      } else if (!handler || ![...handler]?.some(v => v[0] === name && v[1] === props[k])) {\n        el.addEventListener(name, props[k])\n        const _handler = handler || new Set()\n        _handler.add([name, props[k]])\n        if (!handlers.has(el)) handlers.set(el, _handler)\n      }\n    } else {\n      if (props[k] == null) {\n        el.removeAttribute(k)\n      } else {\n        el.setAttribute(k, props[k])\n      }\n    }\n  })\n}\n\nexport function unbindProps (el: HTMLElement, props: Record<string, any>) {\n  Object.keys(props).forEach(k => {\n    if (isOn(k)) {\n      const name = eventName(k)\n      const handler = handlers.get(el)\n      handler?.forEach(v => {\n        const [n, fn] = v\n        if (n === name) {\n          el.removeEventListener(name, fn)\n          handler.delete(v)\n        }\n      })\n    } else {\n      el.removeAttribute(k)\n    }\n  })\n}\n"]},"metadata":{},"sourceType":"module"}