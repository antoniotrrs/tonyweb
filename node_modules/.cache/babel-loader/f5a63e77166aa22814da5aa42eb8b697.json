{"ast":null,"code":"import { mergeProps as _mergeProps, createVNode as _createVNode } from \"vue\"; // Components\n\nimport { makeVSelectionControlProps, VSelectionControl } from \"../VSelectionControl/VSelectionControl.js\"; // Composables\n\nimport { IconValue } from \"../../composables/icons.js\";\nimport { useProxiedModel } from \"../../composables/proxiedModel.js\"; // Utilities\n\nimport { computed } from 'vue';\nimport { genericComponent, omit, propsFactory, useRender } from \"../../util/index.js\"; // Types\n\nexport const makeVCheckboxBtnProps = propsFactory({\n  indeterminate: Boolean,\n  indeterminateIcon: {\n    type: IconValue,\n    default: '$checkboxIndeterminate'\n  },\n  ...makeVSelectionControlProps({\n    falseIcon: '$checkboxOff',\n    trueIcon: '$checkboxOn'\n  })\n}, 'VCheckboxBtn');\nexport const VCheckboxBtn = genericComponent()({\n  name: 'VCheckboxBtn',\n  props: makeVCheckboxBtnProps(),\n  emits: {\n    'update:modelValue': value => true,\n    'update:indeterminate': value => true\n  },\n\n  setup(props, _ref) {\n    let {\n      slots\n    } = _ref;\n    const indeterminate = useProxiedModel(props, 'indeterminate');\n    const model = useProxiedModel(props, 'modelValue');\n\n    function onChange(v) {\n      if (indeterminate.value) {\n        indeterminate.value = false;\n      }\n    }\n\n    const falseIcon = computed(() => {\n      return indeterminate.value ? props.indeterminateIcon : props.falseIcon;\n    });\n    const trueIcon = computed(() => {\n      return indeterminate.value ? props.indeterminateIcon : props.trueIcon;\n    });\n    useRender(() => {\n      const controlProps = omit(VSelectionControl.filterProps(props), ['modelValue']);\n      return _createVNode(VSelectionControl, _mergeProps(controlProps, {\n        \"modelValue\": model.value,\n        \"onUpdate:modelValue\": [$event => model.value = $event, onChange],\n        \"class\": ['v-checkbox-btn', props.class],\n        \"style\": props.style,\n        \"type\": \"checkbox\",\n        \"falseIcon\": falseIcon.value,\n        \"trueIcon\": trueIcon.value,\n        \"aria-checked\": indeterminate.value ? 'mixed' : undefined\n      }), slots);\n    });\n    return {};\n  }\n\n});","map":{"version":3,"mappings":"8EAAA;;AAAA,SACSA,0BADT,EACqCC,iBADrC,QACsD,2CADtD,C,CAGA;;AAAA,SACSC,SADT,QACkB,4BADlB;AACkB,SACTC,eADS,QACM,mCADN,C,CAGlB;;AACA,SAASC,QAAT,QAAyB,KAAzB;AAA8B,SACrBC,gBADqB,EACHC,IADG,EACGC,YADH,EACiBC,SADjB,QAC0B,qBAD1B,C,CAG9B;;AAIA,OAAO,MAAMC,qBAAqB,GAAGF,YAAY,CAAC;AAChDG,eAAa,EAAEC,OADiC;AAEhDC,mBAAiB,EAAE;AACjBC,QAAI,EAAEX,SADW;AAEjBY,WAAO,EAAE;AAFQ,GAF6B;AAOhD,KAAGd,0BAA0B,CAAC;AAC5Be,aAAS,EAAE,cADiB;AAE5BC,YAAQ,EAAE;AAFkB,GAAD;AAPmB,CAAD,EAW9C,cAX8C,CAA1C;AAaP,OAAO,MAAMC,YAAY,GAAGZ,gBAAgB,GAMK;AAC/Ca,MAAI,EAAE,cADyC;AAG/CC,OAAK,EAAEV,qBAAqB,EAHmB;AAK/CW,OAAK,EAAE;AACL,yBAAsBC,KAAU,IAAK,IADhC;AAEL,4BAAyBA,KAAc,IAAK;AAFvC,GALwC;;AAU/CC,OAAKA,CAAEH,KAAFG,EAAOC,IAAPD,EAAoB;AAAA,QAAX;AAAEE;AAAF,QAASD,IAAE;AACvB,UAAMb,aAAa,GAAGP,eAAe,CAACgB,KAAD,EAAQ,eAAR,CAArC;AACA,UAAMM,KAAK,GAAGtB,eAAe,CAACgB,KAAD,EAAQ,YAAR,CAA7B;;AAEA,aAASO,QAAT,CAAmBC,CAAnB,EAA2B;AACzB,UAAIjB,aAAa,CAACW,KAAlB,EAAyB;AACvBX,qBAAa,CAACW,KAAdX,GAAsB,KAAtBA;AACF;AACF;;AAEA,UAAMK,SAAS,GAAGX,QAAQ,CAAC,MAAM;AAC/B,aAAOM,aAAa,CAACW,KAAdX,GACHS,KAAK,CAACP,iBADHF,GAEHS,KAAK,CAACJ,SAFV;AAGD,KAJyB,CAA1B;AAMA,UAAMC,QAAQ,GAAGZ,QAAQ,CAAC,MAAM;AAC9B,aAAOM,aAAa,CAACW,KAAdX,GACHS,KAAK,CAACP,iBADHF,GAEHS,KAAK,CAACH,QAFV;AAGD,KAJwB,CAAzB;AAMAR,aAAS,CAAC,MAAM;AACd,YAAMoB,YAAY,GAAGtB,IAAI,CAACL,iBAAiB,CAAC4B,WAAlB5B,CAA8BkB,KAA9BlB,CAAD,EAAuC,CAAC,YAAD,CAAvC,CAAzB;AACA,yDAES2B,YAFT,EAEqB;AAAA,sBACPH,KAAK,CAACJ,KADC;AACI,0CAAXI,KAAK,CAACJ,KAANI,GAAWK,QAOCJ,QAPD,CADJ;AAQa,iBANvB,CACL,gBADK,EAELP,KAAK,CAACY,KAFD,CAFU;AAKhB,iBACOZ,KAAK,CAACa,KANG;AAME,0BANF;AAME,qBAGPjB,SAAS,CAACM,KATL;AASU,oBAChBL,QAAQ,CAACK,KAVH;AAUQ,wBACVX,aAAa,CAACW,KAAdX,GAAsB,OAAtBA,GAAgCuB;AAX9B,OAFrB,GAccT,KAdd;AAiBD,KAnBQ,CAAThB;AAqBA,WAAO,EAAP;AACF;;AAtD+C,CANL,CAArC","names":["makeVSelectionControlProps","VSelectionControl","IconValue","useProxiedModel","computed","genericComponent","omit","propsFactory","useRender","makeVCheckboxBtnProps","indeterminate","Boolean","indeterminateIcon","type","default","falseIcon","trueIcon","VCheckboxBtn","name","props","emits","value","setup","_ref","slots","model","onChange","v","controlProps","filterProps","$event","class","style","undefined"],"sources":["../../../src/components/VCheckbox/VCheckboxBtn.tsx"],"sourcesContent":["// Components\nimport { makeVSelectionControlProps, VSelectionControl } from '@/components/VSelectionControl/VSelectionControl'\n\n// Composables\nimport { IconValue } from '@/composables/icons'\nimport { useProxiedModel } from '@/composables/proxiedModel'\n\n// Utilities\nimport { computed } from 'vue'\nimport { genericComponent, omit, propsFactory, useRender } from '@/util'\n\n// Types\nimport type { VSelectionControlSlots } from '@/components/VSelectionControl/VSelectionControl'\nimport type { GenericProps } from '@/util'\n\nexport const makeVCheckboxBtnProps = propsFactory({\n  indeterminate: Boolean,\n  indeterminateIcon: {\n    type: IconValue,\n    default: '$checkboxIndeterminate',\n  },\n\n  ...makeVSelectionControlProps({\n    falseIcon: '$checkboxOff',\n    trueIcon: '$checkboxOn',\n  }),\n}, 'VCheckboxBtn')\n\nexport const VCheckboxBtn = genericComponent<new <T>(\n  props: {\n    modelValue?: T\n    'onUpdate:modelValue'?: (value: T) => void\n  },\n  slots: VSelectionControlSlots,\n) => GenericProps<typeof props, typeof slots>>()({\n  name: 'VCheckboxBtn',\n\n  props: makeVCheckboxBtnProps(),\n\n  emits: {\n    'update:modelValue': (value: any) => true,\n    'update:indeterminate': (value: boolean) => true,\n  },\n\n  setup (props, { slots }) {\n    const indeterminate = useProxiedModel(props, 'indeterminate')\n    const model = useProxiedModel(props, 'modelValue')\n\n    function onChange (v: any) {\n      if (indeterminate.value) {\n        indeterminate.value = false\n      }\n    }\n\n    const falseIcon = computed(() => {\n      return indeterminate.value\n        ? props.indeterminateIcon\n        : props.falseIcon\n    })\n\n    const trueIcon = computed(() => {\n      return indeterminate.value\n        ? props.indeterminateIcon\n        : props.trueIcon\n    })\n\n    useRender(() => {\n      const controlProps = omit(VSelectionControl.filterProps(props), ['modelValue'])\n      return (\n        <VSelectionControl\n          { ...controlProps }\n          v-model={ model.value }\n          class={[\n            'v-checkbox-btn',\n            props.class,\n          ]}\n          style={ props.style }\n          type=\"checkbox\"\n          onUpdate:modelValue={ onChange }\n          falseIcon={ falseIcon.value }\n          trueIcon={ trueIcon.value }\n          aria-checked={ indeterminate.value ? 'mixed' : undefined }\n          v-slots={ slots }\n        />\n      )\n    })\n\n    return {}\n  },\n})\n\nexport type VCheckboxBtn = InstanceType<typeof VCheckboxBtn>\n"]},"metadata":{},"sourceType":"module"}