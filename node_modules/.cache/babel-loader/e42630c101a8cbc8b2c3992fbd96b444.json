{"ast":null,"code":"/* eslint-disable sonarjs/no-identical-functions */\n// Utilities\nimport { toRaw } from 'vue';\nexport const independentSelectStrategy = mandatory => {\n  const strategy = {\n    select: _ref => {\n      let {\n        id,\n        value,\n        selected\n      } = _ref;\n      id = toRaw(id); // When mandatory and we're trying to deselect when id\n      // is the only currently selected item then do nothing\n\n      if (mandatory && !value) {\n        const on = Array.from(selected.entries()).reduce((arr, _ref2) => {\n          let [key, value] = _ref2;\n          if (value === 'on') arr.push(key);\n          return arr;\n        }, []);\n        if (on.length === 1 && on[0] === id) return selected;\n      }\n\n      selected.set(id, value ? 'on' : 'off');\n      return selected;\n    },\n    in: (v, children, parents) => {\n      const map = new Map();\n\n      for (const id of v || []) {\n        strategy.select({\n          id,\n          value: true,\n          selected: map,\n          children,\n          parents\n        });\n      }\n\n      return map;\n    },\n    out: v => {\n      const arr = [];\n\n      for (const [key, value] of v.entries()) {\n        if (value === 'on') arr.push(key);\n      }\n\n      return arr;\n    }\n  };\n  return strategy;\n};\nexport const independentSingleSelectStrategy = mandatory => {\n  const parentStrategy = independentSelectStrategy(mandatory);\n  const strategy = {\n    select: _ref3 => {\n      let {\n        selected,\n        id,\n        ...rest\n      } = _ref3;\n      id = toRaw(id);\n      const singleSelected = selected.has(id) ? new Map([[id, selected.get(id)]]) : new Map();\n      return parentStrategy.select({ ...rest,\n        id,\n        selected: singleSelected\n      });\n    },\n    in: (v, children, parents) => {\n      if (v?.length) {\n        return parentStrategy.in(v.slice(0, 1), children, parents);\n      }\n\n      return new Map();\n    },\n    out: (v, children, parents) => {\n      return parentStrategy.out(v, children, parents);\n    }\n  };\n  return strategy;\n};\nexport const leafSelectStrategy = mandatory => {\n  const parentStrategy = independentSelectStrategy(mandatory);\n  const strategy = {\n    select: _ref4 => {\n      let {\n        id,\n        selected,\n        children,\n        ...rest\n      } = _ref4;\n      id = toRaw(id);\n      if (children.has(id)) return selected;\n      return parentStrategy.select({\n        id,\n        selected,\n        children,\n        ...rest\n      });\n    },\n    in: parentStrategy.in,\n    out: parentStrategy.out\n  };\n  return strategy;\n};\nexport const leafSingleSelectStrategy = mandatory => {\n  const parentStrategy = independentSingleSelectStrategy(mandatory);\n  const strategy = {\n    select: _ref5 => {\n      let {\n        id,\n        selected,\n        children,\n        ...rest\n      } = _ref5;\n      id = toRaw(id);\n      if (children.has(id)) return selected;\n      return parentStrategy.select({\n        id,\n        selected,\n        children,\n        ...rest\n      });\n    },\n    in: parentStrategy.in,\n    out: parentStrategy.out\n  };\n  return strategy;\n};\nexport const classicSelectStrategy = mandatory => {\n  const strategy = {\n    select: _ref6 => {\n      let {\n        id,\n        value,\n        selected,\n        children,\n        parents\n      } = _ref6;\n      id = toRaw(id);\n      const original = new Map(selected);\n      const items = [id];\n\n      while (items.length) {\n        const item = items.shift();\n        selected.set(toRaw(item), value ? 'on' : 'off');\n\n        if (children.has(item)) {\n          items.push(...children.get(item));\n        }\n      }\n\n      let parent = toRaw(parents.get(id));\n\n      while (parent) {\n        const childrenIds = children.get(parent);\n        const everySelected = childrenIds.every(cid => selected.get(toRaw(cid)) === 'on');\n        const noneSelected = childrenIds.every(cid => !selected.has(toRaw(cid)) || selected.get(toRaw(cid)) === 'off');\n        selected.set(parent, everySelected ? 'on' : noneSelected ? 'off' : 'indeterminate');\n        parent = toRaw(parents.get(parent));\n      } // If mandatory and planned deselect results in no selected\n      // items then we can't do it, so return original state\n\n\n      if (mandatory && !value) {\n        const on = Array.from(selected.entries()).reduce((arr, _ref7) => {\n          let [key, value] = _ref7;\n          if (value === 'on') arr.push(key);\n          return arr;\n        }, []);\n        if (on.length === 0) return original;\n      }\n\n      return selected;\n    },\n    in: (v, children, parents) => {\n      let map = new Map();\n\n      for (const id of v || []) {\n        map = strategy.select({\n          id,\n          value: true,\n          selected: map,\n          children,\n          parents\n        });\n      }\n\n      return map;\n    },\n    out: (v, children) => {\n      const arr = [];\n\n      for (const [key, value] of v.entries()) {\n        if (value === 'on' && !children.has(key)) arr.push(key);\n      }\n\n      return arr;\n    }\n  };\n  return strategy;\n};\nexport const trunkSelectStrategy = mandatory => {\n  const parentStrategy = classicSelectStrategy(mandatory);\n  const strategy = {\n    select: parentStrategy.select,\n    in: parentStrategy.in,\n    out: (v, children, parents) => {\n      const arr = [];\n\n      for (const [key, value] of v.entries()) {\n        if (value === 'on') {\n          if (parents.has(key)) {\n            const parent = parents.get(key);\n            if (v.get(parent) === 'on') continue;\n          }\n\n          arr.push(key);\n        }\n      }\n\n      return arr;\n    }\n  };\n  return strategy;\n};","map":{"version":3,"mappings":"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","names":["toRaw","independentSelectStrategy","mandatory","strategy","select","_ref","id","value","selected","on","Array","from","entries","reduce","arr","_ref2","key","push","length","set","in","v","children","parents","map","Map","out","independentSingleSelectStrategy","parentStrategy","_ref3","rest","singleSelected","has","get","slice","leafSelectStrategy","_ref4","leafSingleSelectStrategy","_ref5","classicSelectStrategy","_ref6","original","items","item","shift","parent","childrenIds","everySelected","every","cid","noneSelected","_ref7","trunkSelectStrategy"],"sources":["../../../src/composables/nested/selectStrategies.ts"],"sourcesContent":["/* eslint-disable sonarjs/no-identical-functions */\n// Utilities\nimport { toRaw } from 'vue'\n\ntype SelectStrategyFunction = (data: {\n  id: unknown\n  value: boolean\n  selected: Map<unknown, 'on' | 'off' | 'indeterminate'>\n  children: Map<unknown, unknown[]>\n  parents: Map<unknown, unknown>\n  event?: Event\n}) => Map<unknown, 'on' | 'off' | 'indeterminate'>\n\ntype SelectStrategyTransformInFunction = (\n  v: readonly unknown[] | undefined,\n  children: Map<unknown, unknown[]>,\n  parents: Map<unknown, unknown>,\n) => Map<unknown, 'on' | 'off' | 'indeterminate'>\n\ntype SelectStrategyTransformOutFunction = (\n  v: Map<unknown, 'on' | 'off' | 'indeterminate'>,\n  children: Map<unknown, unknown[]>,\n  parents: Map<unknown, unknown>,\n) => unknown[]\n\nexport type SelectStrategy = {\n  select: SelectStrategyFunction\n  in: SelectStrategyTransformInFunction\n  out: SelectStrategyTransformOutFunction\n}\n\nexport const independentSelectStrategy = (mandatory?: boolean): SelectStrategy => {\n  const strategy: SelectStrategy = {\n    select: ({ id, value, selected }) => {\n      id = toRaw(id)\n\n      // When mandatory and we're trying to deselect when id\n      // is the only currently selected item then do nothing\n      if (mandatory && !value) {\n        const on = Array.from(selected.entries())\n          .reduce((arr, [key, value]) => {\n            if (value === 'on') arr.push(key)\n            return arr\n          }, [] as unknown[])\n        if (on.length === 1 && on[0] === id) return selected\n      }\n\n      selected.set(id, value ? 'on' : 'off')\n\n      return selected\n    },\n    in: (v, children, parents) => {\n      const map = new Map()\n\n      for (const id of (v || [])) {\n        strategy.select({\n          id,\n          value: true,\n          selected: map,\n          children,\n          parents,\n        })\n      }\n\n      return map\n    },\n    out: v => {\n      const arr = []\n\n      for (const [key, value] of v.entries()) {\n        if (value === 'on') arr.push(key)\n      }\n\n      return arr\n    },\n  }\n\n  return strategy\n}\n\nexport const independentSingleSelectStrategy = (mandatory?: boolean): SelectStrategy => {\n  const parentStrategy = independentSelectStrategy(mandatory)\n\n  const strategy: SelectStrategy = {\n    select: ({ selected, id, ...rest }) => {\n      id = toRaw(id)\n      const singleSelected = selected.has(id) ? new Map([[id, selected.get(id)!]]) : new Map()\n      return parentStrategy.select({ ...rest, id, selected: singleSelected })\n    },\n    in: (v, children, parents) => {\n      if (v?.length) {\n        return parentStrategy.in(v.slice(0, 1), children, parents)\n      }\n\n      return new Map()\n    },\n    out: (v, children, parents) => {\n      return parentStrategy.out(v, children, parents)\n    },\n  }\n\n  return strategy\n}\n\nexport const leafSelectStrategy = (mandatory?: boolean): SelectStrategy => {\n  const parentStrategy = independentSelectStrategy(mandatory)\n\n  const strategy: SelectStrategy = {\n    select: ({ id, selected, children, ...rest }) => {\n      id = toRaw(id)\n      if (children.has(id)) return selected\n\n      return parentStrategy.select({ id, selected, children, ...rest })\n    },\n    in: parentStrategy.in,\n    out: parentStrategy.out,\n  }\n\n  return strategy\n}\n\nexport const leafSingleSelectStrategy = (mandatory?: boolean): SelectStrategy => {\n  const parentStrategy = independentSingleSelectStrategy(mandatory)\n\n  const strategy: SelectStrategy = {\n    select: ({ id, selected, children, ...rest }) => {\n      id = toRaw(id)\n      if (children.has(id)) return selected\n\n      return parentStrategy.select({ id, selected, children, ...rest })\n    },\n    in: parentStrategy.in,\n    out: parentStrategy.out,\n  }\n\n  return strategy\n}\n\nexport const classicSelectStrategy = (mandatory?: boolean): SelectStrategy => {\n  const strategy: SelectStrategy = {\n    select: ({ id, value, selected, children, parents }) => {\n      id = toRaw(id)\n      const original = new Map(selected)\n\n      const items = [id]\n\n      while (items.length) {\n        const item = items.shift()!\n\n        selected.set(toRaw(item), value ? 'on' : 'off')\n\n        if (children.has(item)) {\n          items.push(...children.get(item)!)\n        }\n      }\n\n      let parent = toRaw(parents.get(id))\n\n      while (parent) {\n        const childrenIds = children.get(parent)!\n        const everySelected = childrenIds.every(cid => selected.get(toRaw(cid)) === 'on')\n        const noneSelected = childrenIds.every(cid => !selected.has(toRaw(cid)) || selected.get(toRaw(cid)) === 'off')\n\n        selected.set(parent, everySelected ? 'on' : noneSelected ? 'off' : 'indeterminate')\n\n        parent = toRaw(parents.get(parent))\n      }\n\n      // If mandatory and planned deselect results in no selected\n      // items then we can't do it, so return original state\n      if (mandatory && !value) {\n        const on = Array.from(selected.entries())\n          .reduce((arr, [key, value]) => {\n            if (value === 'on') arr.push(key)\n            return arr\n          }, [] as unknown[])\n        if (on.length === 0) return original\n      }\n\n      return selected\n    },\n    in: (v, children, parents) => {\n      let map = new Map()\n\n      for (const id of (v || [])) {\n        map = strategy.select({\n          id,\n          value: true,\n          selected: map,\n          children,\n          parents,\n        })\n      }\n\n      return map\n    },\n    out: (v, children) => {\n      const arr = []\n\n      for (const [key, value] of v.entries()) {\n        if (value === 'on' && !children.has(key)) arr.push(key)\n      }\n\n      return arr\n    },\n  }\n\n  return strategy\n}\n\nexport const trunkSelectStrategy = (mandatory?: boolean): SelectStrategy => {\n  const parentStrategy = classicSelectStrategy(mandatory)\n\n  const strategy: SelectStrategy = {\n    select: parentStrategy.select,\n    in: parentStrategy.in,\n    out: (v, children, parents) => {\n      const arr = []\n\n      for (const [key, value] of v.entries()) {\n        if (value === 'on') {\n          if (parents.has(key)) {\n            const parent = parents.get(key)\n            if (v.get(parent) === 'on') continue\n          }\n          arr.push(key)\n        }\n      }\n\n      return arr\n    },\n  }\n\n  return strategy\n}\n"]},"metadata":{},"sourceType":"module"}