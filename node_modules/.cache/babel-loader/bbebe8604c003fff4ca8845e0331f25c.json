{"ast":null,"code":"import _objectSpread from \"/Users/antoniotorres/Documents/tony/tonyweb/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.flat.js\";\nimport \"core-js/modules/es.array.unscopables.flat.js\";\nimport { createVNode as _createVNode } from \"vue\"; // Styles\n\nimport \"./VExpansionPanel.css\"; // Components\n\nimport { VExpansionPanelSymbol } from \"./shared.js\";\nimport { makeVExpansionPanelProps } from \"./VExpansionPanel.js\"; // Composables\n\nimport { makeComponentProps } from \"../../composables/component.js\";\nimport { provideDefaults } from \"../../composables/defaults.js\";\nimport { makeGroupProps, useGroup } from \"../../composables/group.js\";\nimport { makeTagProps } from \"../../composables/tag.js\";\nimport { makeThemeProps, provideTheme } from \"../../composables/theme.js\"; // Utilities\n\nimport { computed, toRef } from 'vue';\nimport { genericComponent, pick, propsFactory, useRender } from \"../../util/index.js\"; // Types\n\nvar allowedVariants = ['default', 'accordion', 'inset', 'popout'];\nexport var makeVExpansionPanelsProps = propsFactory(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({\n  flat: Boolean\n}, makeGroupProps()), pick(makeVExpansionPanelProps(), ['bgColor', 'collapseIcon', 'color', 'eager', 'elevation', 'expandIcon', 'focusable', 'hideActions', 'readonly', 'ripple', 'rounded', 'tile', 'static'])), makeThemeProps()), makeComponentProps()), makeTagProps()), {}, {\n  variant: {\n    type: String,\n    default: 'default',\n    validator: function validator(v) {\n      return allowedVariants.includes(v);\n    }\n  }\n}), 'VExpansionPanels');\nexport var VExpansionPanels = genericComponent()({\n  name: 'VExpansionPanels',\n  props: makeVExpansionPanelsProps(),\n  emits: {\n    'update:modelValue': function updateModelValue(val) {\n      return true;\n    }\n  },\n  setup: function setup(props, _ref) {\n    var slots = _ref.slots;\n\n    var _useGroup = useGroup(props, VExpansionPanelSymbol),\n        next = _useGroup.next,\n        prev = _useGroup.prev;\n\n    var _provideTheme = provideTheme(props),\n        themeClasses = _provideTheme.themeClasses;\n\n    var variantClass = computed(function () {\n      return props.variant && \"v-expansion-panels--variant-\".concat(props.variant);\n    });\n    provideDefaults({\n      VExpansionPanel: {\n        bgColor: toRef(props, 'bgColor'),\n        collapseIcon: toRef(props, 'collapseIcon'),\n        color: toRef(props, 'color'),\n        eager: toRef(props, 'eager'),\n        elevation: toRef(props, 'elevation'),\n        expandIcon: toRef(props, 'expandIcon'),\n        focusable: toRef(props, 'focusable'),\n        hideActions: toRef(props, 'hideActions'),\n        readonly: toRef(props, 'readonly'),\n        ripple: toRef(props, 'ripple'),\n        rounded: toRef(props, 'rounded'),\n        static: toRef(props, 'static')\n      }\n    });\n    useRender(function () {\n      return _createVNode(props.tag, {\n        \"class\": ['v-expansion-panels', {\n          'v-expansion-panels--flat': props.flat,\n          'v-expansion-panels--tile': props.tile\n        }, themeClasses.value, variantClass.value, props.class],\n        \"style\": props.style\n      }, {\n        default: function _default() {\n          var _slots$default;\n\n          return [(_slots$default = slots.default) === null || _slots$default === void 0 ? void 0 : _slots$default.call(slots, {\n            prev: prev,\n            next: next\n          })];\n        }\n      });\n    });\n    return {\n      next: next,\n      prev: prev\n    };\n  }\n});","map":{"version":3,"mappings":"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","names":["VExpansionPanelSymbol","makeVExpansionPanelProps","makeComponentProps","provideDefaults","makeGroupProps","useGroup","makeTagProps","makeThemeProps","provideTheme","computed","toRef","genericComponent","pick","propsFactory","useRender","allowedVariants","makeVExpansionPanelsProps","flat","Boolean","variant","type","String","default","validator","v","includes","VExpansionPanels","name","props","emits","val","setup","_ref","slots","next","prev","themeClasses","variantClass","VExpansionPanel","bgColor","collapseIcon","color","eager","elevation","expandIcon","focusable","hideActions","readonly","ripple","rounded","static","tile","value","class","style"],"sources":["../../../src/components/VExpansionPanel/VExpansionPanels.tsx"],"sourcesContent":["// Styles\nimport './VExpansionPanel.sass'\n\n// Components\nimport { VExpansionPanelSymbol } from './shared'\nimport { makeVExpansionPanelProps } from './VExpansionPanel'\n\n// Composables\nimport { makeComponentProps } from '@/composables/component'\nimport { provideDefaults } from '@/composables/defaults'\nimport { makeGroupProps, useGroup } from '@/composables/group'\nimport { makeTagProps } from '@/composables/tag'\nimport { makeThemeProps, provideTheme } from '@/composables/theme'\n\n// Utilities\nimport { computed, toRef } from 'vue'\nimport { genericComponent, pick, propsFactory, useRender } from '@/util'\n\n// Types\nimport type { PropType } from 'vue'\n\nconst allowedVariants = ['default', 'accordion', 'inset', 'popout'] as const\n\ntype Variant = typeof allowedVariants[number]\n\nexport type VExpansionPanelSlot = {\n  prev: () => void\n  next: () => void\n}\n\nexport type VExpansionPanelSlots = {\n  default: VExpansionPanelSlot\n}\n\nexport const makeVExpansionPanelsProps = propsFactory({\n  flat: Boolean,\n\n  ...makeGroupProps(),\n  ...pick(makeVExpansionPanelProps(), [\n    'bgColor',\n    'collapseIcon',\n    'color',\n    'eager',\n    'elevation',\n    'expandIcon',\n    'focusable',\n    'hideActions',\n    'readonly',\n    'ripple',\n    'rounded',\n    'tile',\n    'static',\n  ]),\n  ...makeThemeProps(),\n  ...makeComponentProps(),\n  ...makeTagProps(),\n\n  variant: {\n    type: String as PropType<Variant>,\n    default: 'default',\n    validator: (v: any) => allowedVariants.includes(v),\n  },\n}, 'VExpansionPanels')\n\nexport const VExpansionPanels = genericComponent<VExpansionPanelSlots>()({\n  name: 'VExpansionPanels',\n\n  props: makeVExpansionPanelsProps(),\n\n  emits: {\n    'update:modelValue': (val: unknown) => true,\n  },\n\n  setup (props, { slots }) {\n    const { next, prev } = useGroup(props, VExpansionPanelSymbol)\n\n    const { themeClasses } = provideTheme(props)\n\n    const variantClass = computed(() => props.variant && `v-expansion-panels--variant-${props.variant}`)\n\n    provideDefaults({\n      VExpansionPanel: {\n        bgColor: toRef(props, 'bgColor'),\n        collapseIcon: toRef(props, 'collapseIcon'),\n        color: toRef(props, 'color'),\n        eager: toRef(props, 'eager'),\n        elevation: toRef(props, 'elevation'),\n        expandIcon: toRef(props, 'expandIcon'),\n        focusable: toRef(props, 'focusable'),\n        hideActions: toRef(props, 'hideActions'),\n        readonly: toRef(props, 'readonly'),\n        ripple: toRef(props, 'ripple'),\n        rounded: toRef(props, 'rounded'),\n        static: toRef(props, 'static'),\n      },\n    })\n\n    useRender(() => (\n      <props.tag\n        class={[\n          'v-expansion-panels',\n          {\n            'v-expansion-panels--flat': props.flat,\n            'v-expansion-panels--tile': props.tile,\n          },\n          themeClasses.value,\n          variantClass.value,\n          props.class,\n        ]}\n        style={ props.style }\n      >\n        { slots.default?.({ prev, next }) }\n      </props.tag>\n    ))\n\n    return {\n      next,\n      prev,\n    }\n  },\n})\n\nexport type VExpansionPanels = InstanceType<typeof VExpansionPanels>\n"]},"metadata":{},"sourceType":"module"}