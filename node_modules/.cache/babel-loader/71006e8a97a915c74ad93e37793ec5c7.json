{"ast":null,"code":"import { Fragment as _Fragment, createVNode as _createVNode, mergeProps as _mergeProps } from \"vue\"; // Components\n\nimport { VBtn } from \"../VBtn/index.js\";\nimport { VDefaultsProvider } from \"../VDefaultsProvider/index.js\";\nimport { makeVSnackbarProps, VSnackbar } from \"../VSnackbar/VSnackbar.js\"; // Composables\n\nimport { useLocale } from \"../../composables/locale.js\"; // Utilities\n\nimport { computed, nextTick, shallowRef, watch } from 'vue';\nimport { genericComponent, omit, propsFactory, useRender } from \"../../util/index.js\"; // Types\n\nexport const makeVSnackbarQueueProps = propsFactory({\n  // TODO: Port this to Snackbar on dev\n  closable: [Boolean, String],\n  closeText: {\n    type: String,\n    default: '$vuetify.dismiss'\n  },\n  modelValue: {\n    type: Array,\n    default: () => []\n  },\n  ...omit(makeVSnackbarProps(), ['modelValue'])\n}, 'VSnackbarQueue');\nexport const VSnackbarQueue = genericComponent()({\n  name: 'VSnackbarQueue',\n  props: makeVSnackbarQueueProps(),\n  emits: {\n    'update:modelValue': val => true\n  },\n\n  setup(props, _ref) {\n    let {\n      emit,\n      slots\n    } = _ref;\n    const {\n      t\n    } = useLocale();\n    const isActive = shallowRef(false);\n    const isVisible = shallowRef(false);\n    const current = shallowRef();\n    watch(() => props.modelValue.length, (val, oldVal) => {\n      if (!isVisible.value && val > oldVal) {\n        showNext();\n      }\n    });\n    watch(isActive, val => {\n      if (val) isVisible.value = true;\n    });\n\n    function onAfterLeave() {\n      if (props.modelValue.length) {\n        showNext();\n      } else {\n        current.value = undefined;\n        isVisible.value = false;\n      }\n    }\n\n    function showNext() {\n      const [next, ...rest] = props.modelValue;\n      emit('update:modelValue', rest);\n      current.value = typeof next === 'string' ? {\n        text: next\n      } : next;\n      nextTick(() => {\n        isActive.value = true;\n      });\n    }\n\n    function onClickClose() {\n      isActive.value = false;\n    }\n\n    const btnProps = computed(() => ({\n      color: typeof props.closable === 'string' ? props.closable : undefined,\n      text: t(props.closeText)\n    }));\n    useRender(() => {\n      const hasActions = !!(props.closable || slots.actions);\n      const {\n        modelValue: _,\n        ...snackbarProps\n      } = VSnackbar.filterProps(props);\n      return _createVNode(_Fragment, null, [isVisible.value && !!current.value && (slots.default ? _createVNode(VDefaultsProvider, {\n        \"defaults\": {\n          VSnackbar: current.value\n        }\n      }, {\n        default: () => [slots.default({\n          item: current.value\n        })]\n      }) : _createVNode(VSnackbar, _mergeProps(snackbarProps, current.value, {\n        \"modelValue\": isActive.value,\n        \"onUpdate:modelValue\": $event => isActive.value = $event,\n        \"onAfterLeave\": onAfterLeave\n      }), {\n        text: slots.text ? () => slots.text?.({\n          item: current.value\n        }) : undefined,\n        actions: hasActions ? () => _createVNode(_Fragment, null, [!slots.actions ? _createVNode(VBtn, _mergeProps(btnProps.value, {\n          \"onClick\": onClickClose\n        }), null) : _createVNode(VDefaultsProvider, {\n          \"defaults\": {\n            VBtn: btnProps.value\n          }\n        }, {\n          default: () => [slots.actions({\n            item: current.value,\n            props: {\n              onClick: onClickClose\n            }\n          })]\n        })]) : undefined\n      }))]);\n    });\n  }\n\n});","map":{"version":3,"mappings":"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","names":["VBtn","VDefaultsProvider","makeVSnackbarProps","VSnackbar","useLocale","computed","nextTick","shallowRef","watch","genericComponent","omit","propsFactory","useRender","makeVSnackbarQueueProps","closable","Boolean","String","closeText","type","default","modelValue","Array","VSnackbarQueue","name","props","emits","val","setup","_ref","emit","slots","t","isActive","isVisible","current","length","oldVal","value","showNext","onAfterLeave","undefined","next","rest","text","onClickClose","btnProps","color","hasActions","actions","_","snackbarProps","filterProps","_createVNode","item","$event","onClick"],"sources":["../../../src/components/VSnackbarQueue/VSnackbarQueue.tsx"],"sourcesContent":["// Components\nimport { VBtn } from '@/components/VBtn'\nimport { VDefaultsProvider } from '@/components/VDefaultsProvider'\nimport { makeVSnackbarProps, VSnackbar } from '@/components/VSnackbar/VSnackbar'\n\n// Composables\nimport { useLocale } from '@/composables/locale'\n\n// Utilities\nimport { computed, nextTick, shallowRef, watch } from 'vue'\nimport { genericComponent, omit, propsFactory, useRender } from '@/util'\n\n// Types\nimport type { PropType, VNodeProps } from 'vue'\nimport type { GenericProps } from '@/util'\n\nexport type VSnackbarQueueSlots<T extends string | SnackbarMessage> = {\n  default: { item: T }\n  text: { item: T }\n  actions: {\n    item: T\n    props: {\n      onClick: () => void\n    }\n  }\n}\n\nexport type SnackbarMessage = string | Omit<\n  VSnackbar['$props'],\n  | 'modelValue'\n  | 'onUpdate:modelValue'\n  | 'activator'\n  | 'activatorProps'\n  | 'closeDelay'\n  | 'openDelay'\n  | 'openOnClick'\n  | 'openOnFocus'\n  | 'openOnHover'\n  | '$children'\n  | 'v-slots'\n  | `v-slot:${string}`\n  | keyof VNodeProps\n>\n\nexport const makeVSnackbarQueueProps = propsFactory({\n  // TODO: Port this to Snackbar on dev\n  closable: [Boolean, String],\n  closeText: {\n    type: String,\n    default: '$vuetify.dismiss',\n  },\n  modelValue: {\n    type: Array as PropType<readonly SnackbarMessage[]>,\n    default: () => [],\n  },\n\n  ...omit(makeVSnackbarProps(), ['modelValue']),\n}, 'VSnackbarQueue')\n\nexport const VSnackbarQueue = genericComponent<new <T extends readonly SnackbarMessage[]> (\n  props: {\n    modelValue?: T\n    'onUpdate:modelValue'?: (val: T) => void\n  },\n  slots: VSnackbarQueueSlots<T[number]>,\n) => GenericProps<typeof props, typeof slots>>()({\n  name: 'VSnackbarQueue',\n\n  props: makeVSnackbarQueueProps(),\n\n  emits: {\n    'update:modelValue': (val: SnackbarMessage[]) => true,\n  },\n\n  setup (props, { emit, slots }) {\n    const { t } = useLocale()\n\n    const isActive = shallowRef(false)\n    const isVisible = shallowRef(false)\n    const current = shallowRef<Exclude<SnackbarMessage, string>>()\n\n    watch(() => props.modelValue.length, (val, oldVal) => {\n      if (!isVisible.value && val > oldVal) {\n        showNext()\n      }\n    })\n    watch(isActive, val => {\n      if (val) isVisible.value = true\n    })\n\n    function onAfterLeave () {\n      if (props.modelValue.length) {\n        showNext()\n      } else {\n        current.value = undefined\n        isVisible.value = false\n      }\n    }\n    function showNext () {\n      const [next, ...rest] = props.modelValue\n      emit('update:modelValue', rest)\n      current.value = typeof next === 'string' ? { text: next } : next\n      nextTick(() => {\n        isActive.value = true\n      })\n    }\n    function onClickClose () {\n      isActive.value = false\n    }\n\n    const btnProps = computed(() => ({\n      color: typeof props.closable === 'string' ? props.closable : undefined,\n      text: t(props.closeText),\n    }))\n\n    useRender(() => {\n      const hasActions = !!(props.closable || slots.actions)\n      const { modelValue: _, ...snackbarProps } = VSnackbar.filterProps(props as any)\n\n      return (\n        <>\n          { isVisible.value && !!current.value && (\n            slots.default\n              ? (\n                <VDefaultsProvider defaults={{ VSnackbar: current.value }}>\n                  { slots.default({ item: current.value }) }\n                </VDefaultsProvider>\n              ) : (\n                <VSnackbar\n                  { ...snackbarProps }\n                  { ...current.value }\n                  v-model={ isActive.value }\n                  onAfterLeave={ onAfterLeave }\n                >\n                  {{\n                    text: slots.text ? () => slots.text?.({ item: current.value! }) : undefined,\n                    actions: hasActions ? () => (\n                      <>\n                        { !slots.actions ? (\n                          <VBtn\n                            { ...btnProps.value }\n                            onClick={ onClickClose }\n                          />\n                        ) : (\n                          <VDefaultsProvider\n                            defaults={{\n                              VBtn: btnProps.value,\n                            }}\n                          >\n                            { slots.actions({\n                              item: current.value!,\n                              props: { onClick: onClickClose },\n                            })}\n                          </VDefaultsProvider>\n                        )}\n                      </>\n                    ) : undefined,\n                  }}\n                </VSnackbar>\n              )\n          )}\n        </>\n      )\n    })\n  },\n})\n\nexport type VSnackbarQueue = InstanceType<typeof VSnackbarQueue>\n"]},"metadata":{},"sourceType":"module"}