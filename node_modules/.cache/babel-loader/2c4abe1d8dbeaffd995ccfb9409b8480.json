{"ast":null,"code":"// Utilities\nimport { effectScope, onScopeDispose, watch } from 'vue'; // Types\n\nexport function useToggleScope(source, fn) {\n  var scope;\n\n  function start() {\n    scope = effectScope();\n    scope.run(function () {\n      return fn.length ? fn(function () {\n        var _scope;\n\n        (_scope = scope) === null || _scope === void 0 ? void 0 : _scope.stop();\n        start();\n      }) : fn();\n    });\n  }\n\n  watch(source, function (active) {\n    if (active && !scope) {\n      start();\n    } else if (!active) {\n      var _scope2;\n\n      (_scope2 = scope) === null || _scope2 === void 0 ? void 0 : _scope2.stop();\n      scope = undefined;\n    }\n  }, {\n    immediate: true\n  });\n  onScopeDispose(function () {\n    var _scope3;\n\n    (_scope3 = scope) === null || _scope3 === void 0 ? void 0 : _scope3.stop();\n  });\n}","map":{"version":3,"mappings":"AAAA;AACA,SAASA,WAAT,EAAsBC,cAAtB,EAAsCC,KAAtC,QAAmD,KAAnD,C,CAEA;;AAGA,OAAO,SAASC,cAAT,CAAyBC,MAAzB,EAAuDC,EAAvD,EAAwF;AAC7F,MAAIC,KAAJ;;AACA,WAASC,KAAT,GAAkB;AAChBD,SAAK,GAAGN,WAAW,EAAnBM;AACAA,SAAK,CAACE,GAANF,CAAU;AAAA,aAAMD,EAAE,CAACI,MAAHJ,GACZA,EAAE,CAAC,YAAM;AAAA;;AAAEC,uBAAK,UAALA,wCAAOI,IAAPJ;AAAeC,aAAK;AAAI,OAAjC,CADUF,GAEXA,EAAE,EAFG;AAAA,KAAVC;AAIF;;AAEAJ,OAAK,CAACE,MAAD,EAASO,gBAAM,EAAI;AACtB,QAAIA,MAAM,IAAI,CAACL,KAAf,EAAsB;AACpBC,WAAK;AACN,KAFD,MAEO,IAAI,CAACI,MAAL,EAAa;AAAA;;AAClBL,sBAAK,UAALA,0CAAOI,IAAPJ;AACAA,WAAK,GAAGM,SAARN;AACF;AACD,GAPI,EAOF;AAAEO,aAAS,EAAE;AAAb,GAPE,CAALX;AASAD,gBAAc,CAAC,YAAM;AAAA;;AACnBK,oBAAK,UAALA,0CAAOI,IAAPJ;AACD,GAFa,CAAdL;AAGF","names":["effectScope","onScopeDispose","watch","useToggleScope","source","fn","scope","start","run","length","stop","active","undefined","immediate"],"sources":["../../src/composables/toggleScope.ts"],"sourcesContent":["// Utilities\nimport { effectScope, onScopeDispose, watch } from 'vue'\n\n// Types\nimport type { EffectScope, WatchSource } from 'vue'\n\nexport function useToggleScope (source: WatchSource<boolean>, fn: (reset: () => void) => void) {\n  let scope: EffectScope | undefined\n  function start () {\n    scope = effectScope()\n    scope.run(() => fn.length\n      ? fn(() => { scope?.stop(); start() })\n      : (fn as any)()\n    )\n  }\n\n  watch(source, active => {\n    if (active && !scope) {\n      start()\n    } else if (!active) {\n      scope?.stop()\n      scope = undefined\n    }\n  }, { immediate: true })\n\n  onScopeDispose(() => {\n    scope?.stop()\n  })\n}\n"]},"metadata":{},"sourceType":"module"}