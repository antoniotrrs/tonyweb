{"ast":null,"code":"import { createVNode as _createVNode, vShow as _vShow, withDirectives as _withDirectives } from \"vue\"; // Components\n\nimport { VExpandTransition } from \"../transitions/index.js\";\nimport { VDefaultsProvider } from \"../VDefaultsProvider/index.js\"; // Composables\n\nimport { useList } from \"./list.js\";\nimport { makeComponentProps } from \"../../composables/component.js\";\nimport { IconValue } from \"../../composables/icons.js\";\nimport { useNestedGroupActivator, useNestedItem } from \"../../composables/nested/nested.js\";\nimport { useSsrBoot } from \"../../composables/ssrBoot.js\";\nimport { makeTagProps } from \"../../composables/tag.js\";\nimport { MaybeTransition } from \"../../composables/transition.js\"; // Utilities\n\nimport { computed, toRef } from 'vue';\nimport { defineComponent, genericComponent, propsFactory, useRender } from \"../../util/index.js\";\nconst VListGroupActivator = defineComponent({\n  name: 'VListGroupActivator',\n\n  setup(_, _ref) {\n    let {\n      slots\n    } = _ref;\n    useNestedGroupActivator();\n    return () => slots.default?.();\n  }\n\n});\nexport const makeVListGroupProps = propsFactory({\n  /* @deprecated */\n  activeColor: String,\n  baseColor: String,\n  color: String,\n  collapseIcon: {\n    type: IconValue,\n    default: '$collapse'\n  },\n  expandIcon: {\n    type: IconValue,\n    default: '$expand'\n  },\n  prependIcon: IconValue,\n  appendIcon: IconValue,\n  fluid: Boolean,\n  subgroup: Boolean,\n  title: String,\n  value: null,\n  ...makeComponentProps(),\n  ...makeTagProps()\n}, 'VListGroup');\nexport const VListGroup = genericComponent()({\n  name: 'VListGroup',\n  props: makeVListGroupProps(),\n\n  setup(props, _ref2) {\n    let {\n      slots\n    } = _ref2;\n    const {\n      isOpen,\n      open,\n      id: _id\n    } = useNestedItem(toRef(props, 'value'), true);\n    const id = computed(() => `v-list-group--id-${String(_id.value)}`);\n    const list = useList();\n    const {\n      isBooted\n    } = useSsrBoot();\n\n    function onClick(e) {\n      e.stopPropagation();\n      if (['INPUT', 'TEXTAREA'].includes(e.target?.tagName)) return;\n      open(!isOpen.value, e);\n    }\n\n    const activatorProps = computed(() => ({\n      onClick,\n      class: 'v-list-group__header',\n      id: id.value\n    }));\n    const toggleIcon = computed(() => isOpen.value ? props.collapseIcon : props.expandIcon);\n    const activatorDefaults = computed(() => ({\n      VListItem: {\n        active: isOpen.value,\n        activeColor: props.activeColor,\n        baseColor: props.baseColor,\n        color: props.color,\n        prependIcon: props.prependIcon || props.subgroup && toggleIcon.value,\n        appendIcon: props.appendIcon || !props.subgroup && toggleIcon.value,\n        title: props.title,\n        value: props.value\n      }\n    }));\n    useRender(() => _createVNode(props.tag, {\n      \"class\": ['v-list-group', {\n        'v-list-group--prepend': list?.hasPrepend.value,\n        'v-list-group--fluid': props.fluid,\n        'v-list-group--subgroup': props.subgroup,\n        'v-list-group--open': isOpen.value\n      }, props.class],\n      \"style\": props.style\n    }, {\n      default: () => [slots.activator && _createVNode(VDefaultsProvider, {\n        \"defaults\": activatorDefaults.value\n      }, {\n        default: () => [_createVNode(VListGroupActivator, null, {\n          default: () => [slots.activator({\n            props: activatorProps.value,\n            isOpen: isOpen.value\n          })]\n        })]\n      }), _createVNode(MaybeTransition, {\n        \"transition\": {\n          component: VExpandTransition\n        },\n        \"disabled\": !isBooted.value\n      }, {\n        default: () => [_withDirectives(_createVNode(\"div\", {\n          \"class\": \"v-list-group__items\",\n          \"role\": \"group\",\n          \"aria-labelledby\": id.value\n        }, [slots.default?.()]), [[_vShow, isOpen.value]])]\n      })]\n    }));\n    return {\n      isOpen\n    };\n  }\n\n});","map":{"version":3,"mappings":"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","names":["VExpandTransition","VDefaultsProvider","useList","makeComponentProps","IconValue","useNestedGroupActivator","useNestedItem","useSsrBoot","makeTagProps","MaybeTransition","computed","toRef","defineComponent","genericComponent","propsFactory","useRender","VListGroupActivator","name","setup","_","_ref","slots","default","makeVListGroupProps","activeColor","String","baseColor","color","collapseIcon","type","expandIcon","prependIcon","appendIcon","fluid","Boolean","subgroup","title","value","VListGroup","props","_ref2","isOpen","open","id","_id","list","isBooted","onClick","e","stopPropagation","includes","target","tagName","activatorProps","class","toggleIcon","activatorDefaults","VListItem","active","hasPrepend","style","activator","_createVNode","component"],"sources":["../../../src/components/VList/VListGroup.tsx"],"sourcesContent":["// Components\nimport { VExpandTransition } from '@/components/transitions'\nimport { VDefaultsProvider } from '@/components/VDefaultsProvider'\n\n// Composables\nimport { useList } from './list'\nimport { makeComponentProps } from '@/composables/component'\nimport { IconValue } from '@/composables/icons'\nimport { useNestedGroupActivator, useNestedItem } from '@/composables/nested/nested'\nimport { useSsrBoot } from '@/composables/ssrBoot'\nimport { makeTagProps } from '@/composables/tag'\nimport { MaybeTransition } from '@/composables/transition'\n\n// Utilities\nimport { computed, toRef } from 'vue'\nimport { defineComponent, genericComponent, propsFactory, useRender } from '@/util'\n\nexport type VListGroupSlots = {\n  default: never\n  activator: { isOpen: boolean, props: Record<string, unknown> }\n}\n\nconst VListGroupActivator = defineComponent({\n  name: 'VListGroupActivator',\n\n  setup (_, { slots }) {\n    useNestedGroupActivator()\n\n    return () => slots.default?.()\n  },\n})\n\nexport const makeVListGroupProps = propsFactory({\n  /* @deprecated */\n  activeColor: String,\n  baseColor: String,\n  color: String,\n  collapseIcon: {\n    type: IconValue,\n    default: '$collapse',\n  },\n  expandIcon: {\n    type: IconValue,\n    default: '$expand',\n  },\n  prependIcon: IconValue,\n  appendIcon: IconValue,\n  fluid: Boolean,\n  subgroup: Boolean,\n  title: String,\n  value: null,\n\n  ...makeComponentProps(),\n  ...makeTagProps(),\n}, 'VListGroup')\n\nexport const VListGroup = genericComponent<VListGroupSlots>()({\n  name: 'VListGroup',\n\n  props: makeVListGroupProps(),\n\n  setup (props, { slots }) {\n    const { isOpen, open, id: _id } = useNestedItem(toRef(props, 'value'), true)\n    const id = computed(() => `v-list-group--id-${String(_id.value)}`)\n    const list = useList()\n    const { isBooted } = useSsrBoot()\n\n    function onClick (e: Event) {\n      e.stopPropagation()\n      if (['INPUT', 'TEXTAREA'].includes((e.target as Element)?.tagName)) return\n      open(!isOpen.value, e)\n    }\n\n    const activatorProps = computed(() => ({\n      onClick,\n      class: 'v-list-group__header',\n      id: id.value,\n    }))\n\n    const toggleIcon = computed(() => isOpen.value ? props.collapseIcon : props.expandIcon)\n    const activatorDefaults = computed(() => ({\n      VListItem: {\n        active: isOpen.value,\n        activeColor: props.activeColor,\n        baseColor: props.baseColor,\n        color: props.color,\n        prependIcon: props.prependIcon || (props.subgroup && toggleIcon.value),\n        appendIcon: props.appendIcon || (!props.subgroup && toggleIcon.value),\n        title: props.title,\n        value: props.value,\n      },\n    }))\n\n    useRender(() => (\n      <props.tag\n        class={[\n          'v-list-group',\n          {\n            'v-list-group--prepend': list?.hasPrepend.value,\n            'v-list-group--fluid': props.fluid,\n            'v-list-group--subgroup': props.subgroup,\n            'v-list-group--open': isOpen.value,\n          },\n          props.class,\n        ]}\n        style={ props.style }\n      >\n        { slots.activator && (\n          <VDefaultsProvider defaults={ activatorDefaults.value }>\n            <VListGroupActivator>\n              { slots.activator({ props: activatorProps.value, isOpen: isOpen.value }) }\n            </VListGroupActivator>\n          </VDefaultsProvider>\n        )}\n\n        <MaybeTransition transition={{ component: VExpandTransition }} disabled={ !isBooted.value }>\n          <div class=\"v-list-group__items\" role=\"group\" aria-labelledby={ id.value } v-show={ isOpen.value }>\n            { slots.default?.() }\n          </div>\n        </MaybeTransition>\n      </props.tag>\n    ))\n\n    return {\n      isOpen,\n    }\n  },\n})\n\nexport type VListGroup = InstanceType<typeof VListGroup>\n"]},"metadata":{},"sourceType":"module"}