{"ast":null,"code":"import { Fragment as _Fragment, createVNode as _createVNode, mergeProps as _mergeProps, createTextVNode as _createTextVNode } from \"vue\"; // Styles\n\nimport \"./VSelect.css\"; // Components\n\nimport { VDialogTransition } from \"../transitions/index.js\";\nimport { VAvatar } from \"../VAvatar/index.js\";\nimport { VCheckboxBtn } from \"../VCheckbox/index.js\";\nimport { VChip } from \"../VChip/index.js\";\nimport { VDefaultsProvider } from \"../VDefaultsProvider/index.js\";\nimport { VIcon } from \"../VIcon/index.js\";\nimport { VList, VListItem } from \"../VList/index.js\";\nimport { VMenu } from \"../VMenu/index.js\";\nimport { makeVTextFieldProps, VTextField } from \"../VTextField/VTextField.js\";\nimport { VVirtualScroll } from \"../VVirtualScroll/index.js\"; // Composables\n\nimport { useScrolling } from \"./useScrolling.js\";\nimport { useForm } from \"../../composables/form.js\";\nimport { forwardRefs } from \"../../composables/forwardRefs.js\";\nimport { IconValue } from \"../../composables/icons.js\";\nimport { makeItemsProps, useItems } from \"../../composables/list-items.js\";\nimport { useLocale } from \"../../composables/locale.js\";\nimport { useProxiedModel } from \"../../composables/proxiedModel.js\";\nimport { makeTransitionProps } from \"../../composables/transition.js\"; // Utilities\n\nimport { computed, mergeProps, nextTick, ref, shallowRef, watch } from 'vue';\nimport { checkPrintable, deepEqual, ensureValidVNode, genericComponent, IN_BROWSER, matchesSelector, omit, propsFactory, useRender, wrapInArray } from \"../../util/index.js\"; // Types\n\nexport const makeSelectProps = propsFactory({\n  chips: Boolean,\n  closableChips: Boolean,\n  closeText: {\n    type: String,\n    default: '$vuetify.close'\n  },\n  openText: {\n    type: String,\n    default: '$vuetify.open'\n  },\n  eager: Boolean,\n  hideNoData: Boolean,\n  hideSelected: Boolean,\n  listProps: {\n    type: Object\n  },\n  menu: Boolean,\n  menuIcon: {\n    type: IconValue,\n    default: '$dropdown'\n  },\n  menuProps: {\n    type: Object\n  },\n  multiple: Boolean,\n  noDataText: {\n    type: String,\n    default: '$vuetify.noDataText'\n  },\n  openOnClear: Boolean,\n  itemColor: String,\n  ...makeItemsProps({\n    itemChildren: false\n  })\n}, 'Select');\nexport const makeVSelectProps = propsFactory({ ...makeSelectProps(),\n  ...omit(makeVTextFieldProps({\n    modelValue: null,\n    role: 'combobox'\n  }), ['validationValue', 'dirty', 'appendInnerIcon']),\n  ...makeTransitionProps({\n    transition: {\n      component: VDialogTransition\n    }\n  })\n}, 'VSelect');\nexport const VSelect = genericComponent()({\n  name: 'VSelect',\n  props: makeVSelectProps(),\n  emits: {\n    'update:focused': focused => true,\n    'update:modelValue': value => true,\n    'update:menu': ue => true\n  },\n\n  setup(props, _ref) {\n    let {\n      slots\n    } = _ref;\n    const {\n      t\n    } = useLocale();\n    const vTextFieldRef = ref();\n    const vMenuRef = ref();\n    const vVirtualScrollRef = ref();\n    const {\n      items,\n      transformIn,\n      transformOut\n    } = useItems(props);\n    const model = useProxiedModel(props, 'modelValue', [], v => transformIn(v === null ? [null] : wrapInArray(v)), v => {\n      const transformed = transformOut(v);\n      return props.multiple ? transformed : transformed[0] ?? null;\n    });\n    const counterValue = computed(() => {\n      return typeof props.counterValue === 'function' ? props.counterValue(model.value) : typeof props.counterValue === 'number' ? props.counterValue : model.value.length;\n    });\n    const form = useForm(props);\n    const selectedValues = computed(() => model.value.map(selection => selection.value));\n    const isFocused = shallowRef(false);\n    let keyboardLookupPrefix = '';\n    let keyboardLookupLastTime;\n    const displayItems = computed(() => {\n      if (props.hideSelected) {\n        return items.value.filter(item => !model.value.some(s => (props.valueComparator || deepEqual)(s, item)));\n      }\n\n      return items.value;\n    });\n    const menuDisabled = computed(() => props.hideNoData && !displayItems.value.length || form.isReadonly.value || form.isDisabled.value);\n\n    const _menu = useProxiedModel(props, 'menu');\n\n    const menu = computed({\n      get: () => _menu.value,\n      set: v => {\n        if (_menu.value && !v && vMenuRef.value?.Î¨openChildren.size) return;\n        if (v && menuDisabled.value) return;\n        _menu.value = v;\n      }\n    });\n    const label = computed(() => menu.value ? props.closeText : props.openText);\n    const computedMenuProps = computed(() => {\n      return { ...props.menuProps,\n        activatorProps: { ...(props.menuProps?.activatorProps || {}),\n          'aria-haspopup': 'listbox' // Set aria-haspopup to 'listbox'\n\n        }\n      };\n    });\n    const listRef = ref();\n    const listEvents = useScrolling(listRef, vTextFieldRef);\n\n    function onClear(e) {\n      if (props.openOnClear) {\n        menu.value = true;\n      }\n    }\n\n    function onMousedownControl() {\n      if (menuDisabled.value) return;\n      menu.value = !menu.value;\n    }\n\n    function onListKeydown(e) {\n      if (checkPrintable(e)) {\n        onKeydown(e);\n      }\n    }\n\n    function onKeydown(e) {\n      if (!e.key || form.isReadonly.value) return;\n\n      if (['Enter', ' ', 'ArrowDown', 'ArrowUp', 'Home', 'End'].includes(e.key)) {\n        e.preventDefault();\n      }\n\n      if (['Enter', 'ArrowDown', ' '].includes(e.key)) {\n        menu.value = true;\n      }\n\n      if (['Escape', 'Tab'].includes(e.key)) {\n        menu.value = false;\n      }\n\n      if (e.key === 'Home') {\n        listRef.value?.focus('first');\n      } else if (e.key === 'End') {\n        listRef.value?.focus('last');\n      } // html select hotkeys\n\n\n      const KEYBOARD_LOOKUP_THRESHOLD = 1000; // milliseconds\n\n      if (!checkPrintable(e)) return;\n      const now = performance.now();\n\n      if (now - keyboardLookupLastTime > KEYBOARD_LOOKUP_THRESHOLD) {\n        keyboardLookupPrefix = '';\n      }\n\n      keyboardLookupPrefix += e.key.toLowerCase();\n      keyboardLookupLastTime = now;\n      const item = items.value.find(item => item.title.toLowerCase().startsWith(keyboardLookupPrefix));\n\n      if (item !== undefined) {\n        model.value = [item];\n        const index = displayItems.value.indexOf(item);\n        IN_BROWSER && window.requestAnimationFrame(() => {\n          index >= 0 && vVirtualScrollRef.value?.scrollToIndex(index);\n        });\n      }\n    }\n    /** @param set - null means toggle */\n\n\n    function select(item) {\n      let set = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      if (item.props.disabled) return;\n\n      if (props.multiple) {\n        const index = model.value.findIndex(selection => (props.valueComparator || deepEqual)(selection.value, item.value));\n        const add = set == null ? !~index : set;\n\n        if (~index) {\n          const value = add ? [...model.value, item] : [...model.value];\n          value.splice(index, 1);\n          model.value = value;\n        } else if (add) {\n          model.value = [...model.value, item];\n        }\n      } else {\n        const add = set !== false;\n        model.value = add ? [item] : [];\n        nextTick(() => {\n          menu.value = false;\n        });\n      }\n    }\n\n    function onBlur(e) {\n      if (!listRef.value?.$el.contains(e.relatedTarget)) {\n        menu.value = false;\n      }\n    }\n\n    function onAfterEnter() {\n      if (props.eager) {\n        vVirtualScrollRef.value?.calculateVisibleItems();\n      }\n    }\n\n    function onAfterLeave() {\n      if (isFocused.value) {\n        vTextFieldRef.value?.focus();\n      }\n    }\n\n    function onFocusin(e) {\n      isFocused.value = true;\n    }\n\n    function onModelUpdate(v) {\n      if (v == null) model.value = [];else if (matchesSelector(vTextFieldRef.value, ':autofill') || matchesSelector(vTextFieldRef.value, ':-webkit-autofill')) {\n        const item = items.value.find(item => item.title === v);\n\n        if (item) {\n          select(item);\n        }\n      } else if (vTextFieldRef.value) {\n        vTextFieldRef.value.value = '';\n      }\n    }\n\n    watch(menu, () => {\n      if (!props.hideSelected && menu.value && model.value.length) {\n        const index = displayItems.value.findIndex(item => model.value.some(s => (props.valueComparator || deepEqual)(s.value, item.value)));\n        IN_BROWSER && window.requestAnimationFrame(() => {\n          index >= 0 && vVirtualScrollRef.value?.scrollToIndex(index);\n        });\n      }\n    });\n    watch(() => props.items, (newVal, oldVal) => {\n      if (menu.value) return;\n\n      if (isFocused.value && !oldVal.length && newVal.length) {\n        menu.value = true;\n      }\n    });\n    useRender(() => {\n      const hasChips = !!(props.chips || slots.chip);\n      const hasList = !!(!props.hideNoData || displayItems.value.length || slots['prepend-item'] || slots['append-item'] || slots['no-data']);\n      const isDirty = model.value.length > 0;\n      const textFieldProps = VTextField.filterProps(props);\n      const placeholder = isDirty || !isFocused.value && props.label && !props.persistentPlaceholder ? undefined : props.placeholder;\n      return _createVNode(VTextField, _mergeProps({\n        \"ref\": vTextFieldRef\n      }, textFieldProps, {\n        \"modelValue\": model.value.map(v => v.props.value).join(', '),\n        \"onUpdate:modelValue\": onModelUpdate,\n        \"focused\": isFocused.value,\n        \"onUpdate:focused\": $event => isFocused.value = $event,\n        \"validationValue\": model.externalValue,\n        \"counterValue\": counterValue.value,\n        \"dirty\": isDirty,\n        \"class\": ['v-select', {\n          'v-select--active-menu': menu.value,\n          'v-select--chips': !!props.chips,\n          [`v-select--${props.multiple ? 'multiple' : 'single'}`]: true,\n          'v-select--selected': model.value.length,\n          'v-select--selection-slot': !!slots.selection\n        }, props.class],\n        \"style\": props.style,\n        \"inputmode\": \"none\",\n        \"placeholder\": placeholder,\n        \"onClick:clear\": onClear,\n        \"onMousedown:control\": onMousedownControl,\n        \"onBlur\": onBlur,\n        \"onKeydown\": onKeydown,\n        \"aria-label\": t(label.value),\n        \"title\": t(label.value)\n      }), { ...slots,\n        default: () => _createVNode(_Fragment, null, [_createVNode(VMenu, _mergeProps({\n          \"ref\": vMenuRef,\n          \"modelValue\": menu.value,\n          \"onUpdate:modelValue\": $event => menu.value = $event,\n          \"activator\": \"parent\",\n          \"contentClass\": \"v-select__content\",\n          \"disabled\": menuDisabled.value,\n          \"eager\": props.eager,\n          \"maxHeight\": 310,\n          \"openOnClick\": false,\n          \"closeOnContentClick\": false,\n          \"transition\": props.transition,\n          \"onAfterEnter\": onAfterEnter,\n          \"onAfterLeave\": onAfterLeave\n        }, computedMenuProps.value), {\n          default: () => [hasList && _createVNode(VList, _mergeProps({\n            \"ref\": listRef,\n            \"selected\": selectedValues.value,\n            \"selectStrategy\": props.multiple ? 'independent' : 'single-independent',\n            \"onMousedown\": e => e.preventDefault(),\n            \"onKeydown\": onListKeydown,\n            \"onFocusin\": onFocusin,\n            \"tabindex\": \"-1\",\n            \"aria-live\": \"polite\",\n            \"color\": props.itemColor ?? props.color\n          }, listEvents, props.listProps), {\n            default: () => [slots['prepend-item']?.(), !displayItems.value.length && !props.hideNoData && (slots['no-data']?.() ?? _createVNode(VListItem, {\n              \"key\": \"no-data\",\n              \"title\": t(props.noDataText)\n            }, null)), _createVNode(VVirtualScroll, {\n              \"ref\": vVirtualScrollRef,\n              \"renderless\": true,\n              \"items\": displayItems.value,\n              \"itemKey\": \"value\"\n            }, {\n              default: _ref2 => {\n                let {\n                  item,\n                  index,\n                  itemRef\n                } = _ref2;\n                const itemProps = mergeProps(item.props, {\n                  ref: itemRef,\n                  key: item.value,\n                  onClick: () => select(item, null)\n                });\n                return slots.item?.({\n                  item,\n                  index,\n                  props: itemProps\n                }) ?? _createVNode(VListItem, _mergeProps(itemProps, {\n                  \"role\": \"option\"\n                }), {\n                  prepend: _ref3 => {\n                    let {\n                      isSelected\n                    } = _ref3;\n                    return _createVNode(_Fragment, null, [props.multiple && !props.hideSelected ? _createVNode(VCheckboxBtn, {\n                      \"key\": item.value,\n                      \"modelValue\": isSelected,\n                      \"ripple\": false,\n                      \"tabindex\": \"-1\"\n                    }, null) : undefined, item.props.prependAvatar && _createVNode(VAvatar, {\n                      \"image\": item.props.prependAvatar\n                    }, null), item.props.prependIcon && _createVNode(VIcon, {\n                      \"icon\": item.props.prependIcon\n                    }, null)]);\n                  }\n                });\n              }\n            }), slots['append-item']?.()]\n          })]\n        }), model.value.map((item, index) => {\n          function onChipClose(e) {\n            e.stopPropagation();\n            e.preventDefault();\n            select(item, false);\n          }\n\n          const slotProps = {\n            'onClick:close': onChipClose,\n\n            onKeydown(e) {\n              if (e.key !== 'Enter' && e.key !== ' ') return;\n              e.preventDefault();\n              e.stopPropagation();\n              onChipClose(e);\n            },\n\n            onMousedown(e) {\n              e.preventDefault();\n              e.stopPropagation();\n            },\n\n            modelValue: true,\n            'onUpdate:modelValue': undefined\n          };\n          const hasSlot = hasChips ? !!slots.chip : !!slots.selection;\n          const slotContent = hasSlot ? ensureValidVNode(hasChips ? slots.chip({\n            item,\n            index,\n            props: slotProps\n          }) : slots.selection({\n            item,\n            index\n          })) : undefined;\n          if (hasSlot && !slotContent) return undefined;\n          return _createVNode(\"div\", {\n            \"key\": item.value,\n            \"class\": \"v-select__selection\"\n          }, [hasChips ? !slots.chip ? _createVNode(VChip, _mergeProps({\n            \"key\": \"chip\",\n            \"closable\": props.closableChips,\n            \"size\": \"small\",\n            \"text\": item.title,\n            \"disabled\": item.props.disabled\n          }, slotProps), null) : _createVNode(VDefaultsProvider, {\n            \"key\": \"chip-defaults\",\n            \"defaults\": {\n              VChip: {\n                closable: props.closableChips,\n                size: 'small',\n                text: item.title\n              }\n            }\n          }, {\n            default: () => [slotContent]\n          }) : slotContent ?? _createVNode(\"span\", {\n            \"class\": \"v-select__selection-text\"\n          }, [item.title, props.multiple && index < model.value.length - 1 && _createVNode(\"span\", {\n            \"class\": \"v-select__selection-comma\"\n          }, [_createTextVNode(\",\")])])]);\n        })]),\n        'append-inner': function () {\n          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n          }\n\n          return _createVNode(_Fragment, null, [slots['append-inner']?.(...args), props.menuIcon ? _createVNode(VIcon, {\n            \"class\": \"v-select__menu-icon\",\n            \"color\": vTextFieldRef.value?.fieldIconColor,\n            \"icon\": props.menuIcon\n          }, null) : undefined]);\n        }\n      });\n    });\n    return forwardRefs({\n      isFocused,\n      menu,\n      select\n    }, vTextFieldRef);\n  }\n\n});","map":{"version":3,"mappings":"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","names":["VDialogTransition","VAvatar","VCheckboxBtn","VChip","VDefaultsProvider","VIcon","VList","VListItem","VMenu","makeVTextFieldProps","VTextField","VVirtualScroll","useScrolling","useForm","forwardRefs","IconValue","makeItemsProps","useItems","useLocale","useProxiedModel","makeTransitionProps","computed","mergeProps","nextTick","ref","shallowRef","watch","checkPrintable","deepEqual","ensureValidVNode","genericComponent","IN_BROWSER","matchesSelector","omit","propsFactory","useRender","wrapInArray","makeSelectProps","chips","Boolean","closableChips","closeText","type","String","default","openText","eager","hideNoData","hideSelected","listProps","Object","menu","menuIcon","menuProps","multiple","noDataText","openOnClear","itemColor","itemChildren","makeVSelectProps","modelValue","role","transition","component","VSelect","name","props","emits","focused","value","ue","setup","_ref","slots","t","vTextFieldRef","vMenuRef","vVirtualScrollRef","items","transformIn","transformOut","model","v","transformed","counterValue","length","form","selectedValues","map","selection","isFocused","keyboardLookupPrefix","keyboardLookupLastTime","displayItems","filter","item","some","s","valueComparator","menuDisabled","isReadonly","isDisabled","_menu","get","set","Î¨openChildren","size","label","computedMenuProps","activatorProps","listRef","listEvents","onClear","e","onMousedownControl","onListKeydown","onKeydown","key","includes","preventDefault","focus","KEYBOARD_LOOKUP_THRESHOLD","now","performance","toLowerCase","find","title","startsWith","undefined","index","indexOf","window","requestAnimationFrame","scrollToIndex","select","disabled","findIndex","add","splice","onBlur","$el","contains","relatedTarget","onAfterEnter","calculateVisibleItems","onAfterLeave","onFocusin","onModelUpdate","newVal","oldVal","hasChips","chip","hasList","isDirty","textFieldProps","filterProps","placeholder","persistentPlaceholder","join","$event","externalValue","class","style","color","_createVNode","_ref2","itemRef","itemProps","onClick","prepend","_ref3","isSelected","prependAvatar","prependIcon","onChipClose","stopPropagation","slotProps","onMousedown","hasSlot","slotContent","closable","text","args","_key","arguments","fieldIconColor"],"sources":["../../../src/components/VSelect/VSelect.tsx"],"sourcesContent":["// Styles\nimport './VSelect.sass'\n\n// Components\nimport { VDialogTransition } from '@/components/transitions'\nimport { VAvatar } from '@/components/VAvatar'\nimport { VCheckboxBtn } from '@/components/VCheckbox'\nimport { VChip } from '@/components/VChip'\nimport { VDefaultsProvider } from '@/components/VDefaultsProvider'\nimport { VIcon } from '@/components/VIcon'\nimport { VList, VListItem } from '@/components/VList'\nimport { VMenu } from '@/components/VMenu'\nimport { makeVTextFieldProps, VTextField } from '@/components/VTextField/VTextField'\nimport { VVirtualScroll } from '@/components/VVirtualScroll'\n\n// Composables\nimport { useScrolling } from './useScrolling'\nimport { useForm } from '@/composables/form'\nimport { forwardRefs } from '@/composables/forwardRefs'\nimport { IconValue } from '@/composables/icons'\nimport { makeItemsProps, useItems } from '@/composables/list-items'\nimport { useLocale } from '@/composables/locale'\nimport { useProxiedModel } from '@/composables/proxiedModel'\nimport { makeTransitionProps } from '@/composables/transition'\n\n// Utilities\nimport { computed, mergeProps, nextTick, ref, shallowRef, watch } from 'vue'\nimport {\n  checkPrintable,\n  deepEqual,\n  ensureValidVNode,\n  genericComponent,\n  IN_BROWSER,\n  matchesSelector,\n  omit,\n  propsFactory,\n  useRender,\n  wrapInArray,\n} from '@/util'\n\n// Types\nimport type { Component, PropType } from 'vue'\nimport type { VFieldSlots } from '@/components/VField/VField'\nimport type { VInputSlots } from '@/components/VInput/VInput'\nimport type { ListItem } from '@/composables/list-items'\nimport type { GenericProps, SelectItemKey } from '@/util'\n\ntype Primitive = string | number | boolean | symbol\n\ntype Val <T, ReturnObject extends boolean> = [T] extends [Primitive]\n  ? T\n  : (ReturnObject extends true ? T : any)\n\ntype Value <T, ReturnObject extends boolean, Multiple extends boolean> =\n  Multiple extends true\n    ? readonly Val<T, ReturnObject>[]\n    : Val<T, ReturnObject> | null\n\nexport const makeSelectProps = propsFactory({\n  chips: Boolean,\n  closableChips: Boolean,\n  closeText: {\n    type: String,\n    default: '$vuetify.close',\n  },\n  openText: {\n    type: String,\n    default: '$vuetify.open',\n  },\n  eager: Boolean,\n  hideNoData: Boolean,\n  hideSelected: Boolean,\n  listProps: {\n    type: Object as PropType<VList['$props']>,\n  },\n  menu: Boolean,\n  menuIcon: {\n    type: IconValue,\n    default: '$dropdown',\n  },\n  menuProps: {\n    type: Object as PropType<VMenu['$props']>,\n  },\n  multiple: Boolean,\n  noDataText: {\n    type: String,\n    default: '$vuetify.noDataText',\n  },\n  openOnClear: Boolean,\n  itemColor: String,\n\n  ...makeItemsProps({ itemChildren: false }),\n}, 'Select')\n\nexport const makeVSelectProps = propsFactory({\n  ...makeSelectProps(),\n  ...omit(makeVTextFieldProps({\n    modelValue: null,\n    role: 'combobox',\n  }), ['validationValue', 'dirty', 'appendInnerIcon']),\n  ...makeTransitionProps({ transition: { component: VDialogTransition as Component } }),\n}, 'VSelect')\n\ntype ItemType<T> = T extends readonly (infer U)[] ? U : never\n\nexport const VSelect = genericComponent<new <\n  T extends readonly any[],\n  Item = ItemType<T>,\n  ReturnObject extends boolean = false,\n  Multiple extends boolean = false,\n  V extends Value<Item, ReturnObject, Multiple> = Value<Item, ReturnObject, Multiple>\n>(\n  props: {\n    items?: T\n    itemTitle?: SelectItemKey<ItemType<T>>\n    itemValue?: SelectItemKey<ItemType<T>>\n    itemProps?: SelectItemKey<ItemType<T>>\n    returnObject?: ReturnObject\n    multiple?: Multiple\n    modelValue?: V | null\n    'onUpdate:modelValue'?: (value: V) => void\n  },\n  slots: Omit<VInputSlots & VFieldSlots, 'default'> & {\n    item: { item: ListItem<Item>, index: number, props: Record<string, unknown> }\n    chip: { item: ListItem<Item>, index: number, props: Record<string, unknown> }\n    selection: { item: ListItem<Item>, index: number }\n    'prepend-item': never\n    'append-item': never\n    'no-data': never\n  }\n) => GenericProps<typeof props, typeof slots>>()({\n  name: 'VSelect',\n\n  props: makeVSelectProps(),\n\n  emits: {\n    'update:focused': (focused: boolean) => true,\n    'update:modelValue': (value: any) => true,\n    'update:menu': (ue: boolean) => true,\n  },\n\n  setup (props, { slots }) {\n    const { t } = useLocale()\n    const vTextFieldRef = ref<VTextField>()\n    const vMenuRef = ref<VMenu>()\n    const vVirtualScrollRef = ref<VVirtualScroll>()\n    const { items, transformIn, transformOut } = useItems(props)\n    const model = useProxiedModel(\n      props,\n      'modelValue',\n      [],\n      v => transformIn(v === null ? [null] : wrapInArray(v)),\n      v => {\n        const transformed = transformOut(v)\n        return props.multiple ? transformed : (transformed[0] ?? null)\n      }\n    )\n    const counterValue = computed(() => {\n      return typeof props.counterValue === 'function' ? props.counterValue(model.value)\n        : typeof props.counterValue === 'number' ? props.counterValue\n        : model.value.length\n    })\n    const form = useForm(props)\n    const selectedValues = computed(() => model.value.map(selection => selection.value))\n    const isFocused = shallowRef(false)\n\n    let keyboardLookupPrefix = ''\n    let keyboardLookupLastTime: number\n\n    const displayItems = computed(() => {\n      if (props.hideSelected) {\n        return items.value.filter(item => !model.value.some(s => (props.valueComparator || deepEqual)(s, item)))\n      }\n      return items.value\n    })\n\n    const menuDisabled = computed(() => (\n      (props.hideNoData && !displayItems.value.length) ||\n      form.isReadonly.value || form.isDisabled.value\n    ))\n    const _menu = useProxiedModel(props, 'menu')\n    const menu = computed({\n      get: () => _menu.value,\n      set: v => {\n        if (_menu.value && !v && vMenuRef.value?.Î¨openChildren.size) return\n        if (v && menuDisabled.value) return\n        _menu.value = v\n      },\n    })\n\n    const label = computed(() => menu.value ? props.closeText : props.openText)\n\n    const computedMenuProps = computed(() => {\n      return {\n        ...props.menuProps,\n        activatorProps: {\n          ...(props.menuProps?.activatorProps || {}),\n          'aria-haspopup': 'listbox', // Set aria-haspopup to 'listbox'\n        },\n      }\n    })\n\n    const listRef = ref<VList>()\n    const listEvents = useScrolling(listRef, vTextFieldRef)\n    function onClear (e: MouseEvent) {\n      if (props.openOnClear) {\n        menu.value = true\n      }\n    }\n    function onMousedownControl () {\n      if (menuDisabled.value) return\n\n      menu.value = !menu.value\n    }\n    function onListKeydown (e: KeyboardEvent) {\n      if (checkPrintable(e)) {\n        onKeydown(e)\n      }\n    }\n    function onKeydown (e: KeyboardEvent) {\n      if (!e.key || form.isReadonly.value) return\n\n      if (['Enter', ' ', 'ArrowDown', 'ArrowUp', 'Home', 'End'].includes(e.key)) {\n        e.preventDefault()\n      }\n\n      if (['Enter', 'ArrowDown', ' '].includes(e.key)) {\n        menu.value = true\n      }\n\n      if (['Escape', 'Tab'].includes(e.key)) {\n        menu.value = false\n      }\n\n      if (e.key === 'Home') {\n        listRef.value?.focus('first')\n      } else if (e.key === 'End') {\n        listRef.value?.focus('last')\n      }\n\n      // html select hotkeys\n      const KEYBOARD_LOOKUP_THRESHOLD = 1000 // milliseconds\n\n      if (!checkPrintable(e)) return\n\n      const now = performance.now()\n      if (now - keyboardLookupLastTime > KEYBOARD_LOOKUP_THRESHOLD) {\n        keyboardLookupPrefix = ''\n      }\n      keyboardLookupPrefix += e.key.toLowerCase()\n      keyboardLookupLastTime = now\n\n      const item = items.value.find(item => item.title.toLowerCase().startsWith(keyboardLookupPrefix))\n      if (item !== undefined) {\n        model.value = [item]\n        const index = displayItems.value.indexOf(item)\n        IN_BROWSER && window.requestAnimationFrame(() => {\n          index >= 0 && vVirtualScrollRef.value?.scrollToIndex(index)\n        })\n      }\n    }\n\n    /** @param set - null means toggle */\n    function select (item: ListItem, set: boolean | null = true) {\n      if (item.props.disabled) return\n\n      if (props.multiple) {\n        const index = model.value.findIndex(selection => (props.valueComparator || deepEqual)(selection.value, item.value))\n        const add = set == null ? !~index : set\n\n        if (~index) {\n          const value = add ? [...model.value, item] : [...model.value]\n          value.splice(index, 1)\n          model.value = value\n        } else if (add) {\n          model.value = [...model.value, item]\n        }\n      } else {\n        const add = set !== false\n        model.value = add ? [item] : []\n\n        nextTick(() => {\n          menu.value = false\n        })\n      }\n    }\n    function onBlur (e: FocusEvent) {\n      if (!listRef.value?.$el.contains(e.relatedTarget as HTMLElement)) {\n        menu.value = false\n      }\n    }\n    function onAfterEnter () {\n      if (props.eager) {\n        vVirtualScrollRef.value?.calculateVisibleItems()\n      }\n    }\n    function onAfterLeave () {\n      if (isFocused.value) {\n        vTextFieldRef.value?.focus()\n      }\n    }\n    function onFocusin (e: FocusEvent) {\n      isFocused.value = true\n    }\n    function onModelUpdate (v: any) {\n      if (v == null) model.value = []\n      else if (matchesSelector(vTextFieldRef.value, ':autofill') || matchesSelector(vTextFieldRef.value, ':-webkit-autofill')) {\n        const item = items.value.find(item => item.title === v)\n        if (item) {\n          select(item)\n        }\n      } else if (vTextFieldRef.value) {\n        vTextFieldRef.value.value = ''\n      }\n    }\n\n    watch(menu, () => {\n      if (!props.hideSelected && menu.value && model.value.length) {\n        const index = displayItems.value.findIndex(\n          item => model.value.some(s => (props.valueComparator || deepEqual)(s.value, item.value))\n        )\n        IN_BROWSER && window.requestAnimationFrame(() => {\n          index >= 0 && vVirtualScrollRef.value?.scrollToIndex(index)\n        })\n      }\n    })\n\n    watch(() => props.items, (newVal, oldVal) => {\n      if (menu.value) return\n\n      if (isFocused.value && !oldVal.length && newVal.length) {\n        menu.value = true\n      }\n    })\n\n    useRender(() => {\n      const hasChips = !!(props.chips || slots.chip)\n      const hasList = !!(\n        (!props.hideNoData || displayItems.value.length) ||\n        slots['prepend-item'] ||\n        slots['append-item'] ||\n        slots['no-data']\n      )\n      const isDirty = model.value.length > 0\n      const textFieldProps = VTextField.filterProps(props)\n\n      const placeholder = isDirty || (\n        !isFocused.value &&\n        props.label &&\n        !props.persistentPlaceholder\n      ) ? undefined : props.placeholder\n\n      return (\n        <VTextField\n          ref={ vTextFieldRef }\n          { ...textFieldProps }\n          modelValue={ model.value.map(v => v.props.value).join(', ') }\n          onUpdate:modelValue={ onModelUpdate }\n          v-model:focused={ isFocused.value }\n          validationValue={ model.externalValue }\n          counterValue={ counterValue.value }\n          dirty={ isDirty }\n          class={[\n            'v-select',\n            {\n              'v-select--active-menu': menu.value,\n              'v-select--chips': !!props.chips,\n              [`v-select--${props.multiple ? 'multiple' : 'single'}`]: true,\n              'v-select--selected': model.value.length,\n              'v-select--selection-slot': !!slots.selection,\n            },\n            props.class,\n          ]}\n          style={ props.style }\n          inputmode=\"none\"\n          placeholder={ placeholder }\n          onClick:clear={ onClear }\n          onMousedown:control={ onMousedownControl }\n          onBlur={ onBlur }\n          onKeydown={ onKeydown }\n          aria-label={ t(label.value) }\n          title={ t(label.value) }\n        >\n          {{\n            ...slots,\n            default: () => (\n              <>\n                <VMenu\n                  ref={ vMenuRef }\n                  v-model={ menu.value }\n                  activator=\"parent\"\n                  contentClass=\"v-select__content\"\n                  disabled={ menuDisabled.value }\n                  eager={ props.eager }\n                  maxHeight={ 310 }\n                  openOnClick={ false }\n                  closeOnContentClick={ false }\n                  transition={ props.transition }\n                  onAfterEnter={ onAfterEnter }\n                  onAfterLeave={ onAfterLeave }\n                  { ...computedMenuProps.value }\n                >\n                  { hasList && (\n                    <VList\n                      ref={ listRef }\n                      selected={ selectedValues.value }\n                      selectStrategy={ props.multiple ? 'independent' : 'single-independent' }\n                      onMousedown={ (e: MouseEvent) => e.preventDefault() }\n                      onKeydown={ onListKeydown }\n                      onFocusin={ onFocusin }\n                      tabindex=\"-1\"\n                      aria-live=\"polite\"\n                      color={ props.itemColor ?? props.color }\n                      { ...listEvents }\n                      { ...props.listProps }\n                    >\n                      { slots['prepend-item']?.() }\n\n                      { !displayItems.value.length && !props.hideNoData && (slots['no-data']?.() ?? (\n                        <VListItem key=\"no-data\" title={ t(props.noDataText) } />\n                      ))}\n\n                      <VVirtualScroll ref={ vVirtualScrollRef } renderless items={ displayItems.value } itemKey=\"value\">\n                        { ({ item, index, itemRef }) => {\n                          const itemProps = mergeProps(item.props, {\n                            ref: itemRef,\n                            key: item.value,\n                            onClick: () => select(item, null),\n                          })\n\n                          return slots.item?.({\n                            item,\n                            index,\n                            props: itemProps,\n                          }) ?? (\n                            <VListItem { ...itemProps } role=\"option\">\n                              {{\n                                prepend: ({ isSelected }) => (\n                                  <>\n                                    { props.multiple && !props.hideSelected ? (\n                                      <VCheckboxBtn\n                                        key={ item.value }\n                                        modelValue={ isSelected }\n                                        ripple={ false }\n                                        tabindex=\"-1\"\n                                      />\n                                    ) : undefined }\n\n                                    { item.props.prependAvatar && (\n                                      <VAvatar image={ item.props.prependAvatar } />\n                                    )}\n\n                                    { item.props.prependIcon && (\n                                      <VIcon icon={ item.props.prependIcon } />\n                                    )}\n                                  </>\n                                ),\n                              }}\n                            </VListItem>\n                          )\n                        }}\n                      </VVirtualScroll>\n\n                      { slots['append-item']?.() }\n                    </VList>\n                  )}\n                </VMenu>\n\n                { model.value.map((item, index) => {\n                  function onChipClose (e: Event) {\n                    e.stopPropagation()\n                    e.preventDefault()\n\n                    select(item, false)\n                  }\n\n                  const slotProps = {\n                    'onClick:close': onChipClose,\n                    onKeydown (e: KeyboardEvent) {\n                      if (e.key !== 'Enter' && e.key !== ' ') return\n\n                      e.preventDefault()\n                      e.stopPropagation()\n\n                      onChipClose(e)\n                    },\n                    onMousedown (e: MouseEvent) {\n                      e.preventDefault()\n                      e.stopPropagation()\n                    },\n                    modelValue: true,\n                    'onUpdate:modelValue': undefined,\n                  }\n\n                  const hasSlot = hasChips ? !!slots.chip : !!slots.selection\n                  const slotContent = hasSlot\n                    ? ensureValidVNode(\n                      hasChips\n                        ? slots.chip!({ item, index, props: slotProps })\n                        : slots.selection!({ item, index })\n                    )\n                    : undefined\n\n                  if (hasSlot && !slotContent) return undefined\n\n                  return (\n                    <div key={ item.value } class=\"v-select__selection\">\n                      { hasChips ? (\n                        !slots.chip ? (\n                          <VChip\n                            key=\"chip\"\n                            closable={ props.closableChips }\n                            size=\"small\"\n                            text={ item.title }\n                            disabled={ item.props.disabled }\n                            { ...slotProps }\n                          />\n                        ) : (\n                          <VDefaultsProvider\n                            key=\"chip-defaults\"\n                            defaults={{\n                              VChip: {\n                                closable: props.closableChips,\n                                size: 'small',\n                                text: item.title,\n                              },\n                            }}\n                          >\n                            { slotContent }\n                          </VDefaultsProvider>\n                        )\n                      ) : (\n                        slotContent ?? (\n                          <span class=\"v-select__selection-text\">\n                            { item.title }\n                            { props.multiple && (index < model.value.length - 1) && (\n                              <span class=\"v-select__selection-comma\">,</span>\n                            )}\n                          </span>\n                        )\n                      )}\n                    </div>\n                  )\n                })}\n              </>\n            ),\n            'append-inner': (...args) => (\n              <>\n                { slots['append-inner']?.(...args) }\n                { props.menuIcon ? (\n                  <VIcon\n                    class=\"v-select__menu-icon\"\n                    color={ vTextFieldRef.value?.fieldIconColor }\n                    icon={ props.menuIcon }\n                  />\n                ) : undefined }\n              </>\n            ),\n          }}\n        </VTextField>\n      )\n    })\n\n    return forwardRefs({\n      isFocused,\n      menu,\n      select,\n    }, vTextFieldRef)\n  },\n})\n\nexport type VSelect = InstanceType<typeof VSelect>\n"]},"metadata":{},"sourceType":"module"}