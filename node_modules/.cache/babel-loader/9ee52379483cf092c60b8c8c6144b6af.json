{"ast":null,"code":"import _toConsumableArray from \"/Users/antoniotorres/Documents/tony/tonyweb/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _objectSpread from \"/Users/antoniotorres/Documents/tony/tonyweb/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"/Users/antoniotorres/Documents/tony/tonyweb/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _createForOfIteratorHelper from \"/Users/antoniotorres/Documents/tony/tonyweb/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _slicedToArray from \"/Users/antoniotorres/Documents/tony/tonyweb/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nvar _excluded = [\"selected\", \"id\"],\n    _excluded2 = [\"id\", \"selected\", \"children\"],\n    _excluded3 = [\"id\", \"selected\", \"children\"];\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.map.js\";\nimport \"core-js/modules/es.array.slice.js\";\n\n/* eslint-disable sonarjs/no-identical-functions */\n// Utilities\nimport { toRaw } from 'vue';\nexport var independentSelectStrategy = function independentSelectStrategy(mandatory) {\n  var strategy = {\n    select: function select(_ref) {\n      var id = _ref.id,\n          value = _ref.value,\n          selected = _ref.selected;\n      id = toRaw(id); // When mandatory and we're trying to deselect when id\n      // is the only currently selected item then do nothing\n\n      if (mandatory && !value) {\n        var on = Array.from(selected.entries()).reduce(function (arr, _ref2) {\n          var _ref8 = _slicedToArray(_ref2, 2),\n              key = _ref8[0],\n              value = _ref8[1];\n\n          if (value === 'on') arr.push(key);\n          return arr;\n        }, []);\n        if (on.length === 1 && on[0] === id) return selected;\n      }\n\n      selected.set(id, value ? 'on' : 'off');\n      return selected;\n    },\n    in: function _in(v, children, parents) {\n      var map = new Map();\n\n      var _iterator = _createForOfIteratorHelper(v || []),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var id = _step.value;\n          strategy.select({\n            id: id,\n            value: true,\n            selected: map,\n            children: children,\n            parents: parents\n          });\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return map;\n    },\n    out: function out(v) {\n      var arr = [];\n\n      var _iterator2 = _createForOfIteratorHelper(v.entries()),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var _step2$value = _slicedToArray(_step2.value, 2),\n              key = _step2$value[0],\n              value = _step2$value[1];\n\n          if (value === 'on') arr.push(key);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      return arr;\n    }\n  };\n  return strategy;\n};\nexport var independentSingleSelectStrategy = function independentSingleSelectStrategy(mandatory) {\n  var parentStrategy = independentSelectStrategy(mandatory);\n  var strategy = {\n    select: function select(_ref3) {\n      var selected = _ref3.selected,\n          id = _ref3.id,\n          rest = _objectWithoutProperties(_ref3, _excluded);\n\n      id = toRaw(id);\n      var singleSelected = selected.has(id) ? new Map([[id, selected.get(id)]]) : new Map();\n      return parentStrategy.select(_objectSpread(_objectSpread({}, rest), {}, {\n        id: id,\n        selected: singleSelected\n      }));\n    },\n    in: function _in(v, children, parents) {\n      if (v !== null && v !== void 0 && v.length) {\n        return parentStrategy.in(v.slice(0, 1), children, parents);\n      }\n\n      return new Map();\n    },\n    out: function out(v, children, parents) {\n      return parentStrategy.out(v, children, parents);\n    }\n  };\n  return strategy;\n};\nexport var leafSelectStrategy = function leafSelectStrategy(mandatory) {\n  var parentStrategy = independentSelectStrategy(mandatory);\n  var strategy = {\n    select: function select(_ref4) {\n      var id = _ref4.id,\n          selected = _ref4.selected,\n          children = _ref4.children,\n          rest = _objectWithoutProperties(_ref4, _excluded2);\n\n      id = toRaw(id);\n      if (children.has(id)) return selected;\n      return parentStrategy.select(_objectSpread({\n        id: id,\n        selected: selected,\n        children: children\n      }, rest));\n    },\n    in: parentStrategy.in,\n    out: parentStrategy.out\n  };\n  return strategy;\n};\nexport var leafSingleSelectStrategy = function leafSingleSelectStrategy(mandatory) {\n  var parentStrategy = independentSingleSelectStrategy(mandatory);\n  var strategy = {\n    select: function select(_ref5) {\n      var id = _ref5.id,\n          selected = _ref5.selected,\n          children = _ref5.children,\n          rest = _objectWithoutProperties(_ref5, _excluded3);\n\n      id = toRaw(id);\n      if (children.has(id)) return selected;\n      return parentStrategy.select(_objectSpread({\n        id: id,\n        selected: selected,\n        children: children\n      }, rest));\n    },\n    in: parentStrategy.in,\n    out: parentStrategy.out\n  };\n  return strategy;\n};\nexport var classicSelectStrategy = function classicSelectStrategy(mandatory) {\n  var strategy = {\n    select: function select(_ref6) {\n      var id = _ref6.id,\n          value = _ref6.value,\n          selected = _ref6.selected,\n          children = _ref6.children,\n          parents = _ref6.parents;\n      id = toRaw(id);\n      var original = new Map(selected);\n      var items = [id];\n\n      while (items.length) {\n        var item = items.shift();\n        selected.set(toRaw(item), value ? 'on' : 'off');\n\n        if (children.has(item)) {\n          items.push.apply(items, _toConsumableArray(children.get(item)));\n        }\n      }\n\n      var parent = toRaw(parents.get(id));\n\n      while (parent) {\n        var childrenIds = children.get(parent);\n        var everySelected = childrenIds.every(function (cid) {\n          return selected.get(toRaw(cid)) === 'on';\n        });\n        var noneSelected = childrenIds.every(function (cid) {\n          return !selected.has(toRaw(cid)) || selected.get(toRaw(cid)) === 'off';\n        });\n        selected.set(parent, everySelected ? 'on' : noneSelected ? 'off' : 'indeterminate');\n        parent = toRaw(parents.get(parent));\n      } // If mandatory and planned deselect results in no selected\n      // items then we can't do it, so return original state\n\n\n      if (mandatory && !value) {\n        var on = Array.from(selected.entries()).reduce(function (arr, _ref7) {\n          var _ref9 = _slicedToArray(_ref7, 2),\n              key = _ref9[0],\n              value = _ref9[1];\n\n          if (value === 'on') arr.push(key);\n          return arr;\n        }, []);\n        if (on.length === 0) return original;\n      }\n\n      return selected;\n    },\n    in: function _in(v, children, parents) {\n      var map = new Map();\n\n      var _iterator3 = _createForOfIteratorHelper(v || []),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var id = _step3.value;\n          map = strategy.select({\n            id: id,\n            value: true,\n            selected: map,\n            children: children,\n            parents: parents\n          });\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      return map;\n    },\n    out: function out(v, children) {\n      var arr = [];\n\n      var _iterator4 = _createForOfIteratorHelper(v.entries()),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var _step4$value = _slicedToArray(_step4.value, 2),\n              key = _step4$value[0],\n              value = _step4$value[1];\n\n          if (value === 'on' && !children.has(key)) arr.push(key);\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n\n      return arr;\n    }\n  };\n  return strategy;\n};\nexport var trunkSelectStrategy = function trunkSelectStrategy(mandatory) {\n  var parentStrategy = classicSelectStrategy(mandatory);\n  var strategy = {\n    select: parentStrategy.select,\n    in: parentStrategy.in,\n    out: function out(v, children, parents) {\n      var arr = [];\n\n      var _iterator5 = _createForOfIteratorHelper(v.entries()),\n          _step5;\n\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var _step5$value = _slicedToArray(_step5.value, 2),\n              key = _step5$value[0],\n              value = _step5$value[1];\n\n          if (value === 'on') {\n            if (parents.has(key)) {\n              var parent = parents.get(key);\n              if (v.get(parent) === 'on') continue;\n            }\n\n            arr.push(key);\n          }\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n\n      return arr;\n    }\n  };\n  return strategy;\n};","map":{"version":3,"mappings":"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","names":["toRaw","independentSelectStrategy","mandatory","strategy","select","_ref","id","value","selected","on","Array","from","entries","reduce","arr","_ref2","key","push","length","set","in","v","children","parents","map","Map","out","independentSingleSelectStrategy","parentStrategy","_ref3","rest","singleSelected","has","get","slice","leafSelectStrategy","_ref4","leafSingleSelectStrategy","_ref5","classicSelectStrategy","_ref6","original","items","item","shift","parent","childrenIds","everySelected","every","cid","noneSelected","_ref7","trunkSelectStrategy"],"sources":["../../../src/composables/nested/selectStrategies.ts"],"sourcesContent":["/* eslint-disable sonarjs/no-identical-functions */\n// Utilities\nimport { toRaw } from 'vue'\n\ntype SelectStrategyFunction = (data: {\n  id: unknown\n  value: boolean\n  selected: Map<unknown, 'on' | 'off' | 'indeterminate'>\n  children: Map<unknown, unknown[]>\n  parents: Map<unknown, unknown>\n  event?: Event\n}) => Map<unknown, 'on' | 'off' | 'indeterminate'>\n\ntype SelectStrategyTransformInFunction = (\n  v: readonly unknown[] | undefined,\n  children: Map<unknown, unknown[]>,\n  parents: Map<unknown, unknown>,\n) => Map<unknown, 'on' | 'off' | 'indeterminate'>\n\ntype SelectStrategyTransformOutFunction = (\n  v: Map<unknown, 'on' | 'off' | 'indeterminate'>,\n  children: Map<unknown, unknown[]>,\n  parents: Map<unknown, unknown>,\n) => unknown[]\n\nexport type SelectStrategy = {\n  select: SelectStrategyFunction\n  in: SelectStrategyTransformInFunction\n  out: SelectStrategyTransformOutFunction\n}\n\nexport const independentSelectStrategy = (mandatory?: boolean): SelectStrategy => {\n  const strategy: SelectStrategy = {\n    select: ({ id, value, selected }) => {\n      id = toRaw(id)\n\n      // When mandatory and we're trying to deselect when id\n      // is the only currently selected item then do nothing\n      if (mandatory && !value) {\n        const on = Array.from(selected.entries())\n          .reduce((arr, [key, value]) => {\n            if (value === 'on') arr.push(key)\n            return arr\n          }, [] as unknown[])\n        if (on.length === 1 && on[0] === id) return selected\n      }\n\n      selected.set(id, value ? 'on' : 'off')\n\n      return selected\n    },\n    in: (v, children, parents) => {\n      const map = new Map()\n\n      for (const id of (v || [])) {\n        strategy.select({\n          id,\n          value: true,\n          selected: map,\n          children,\n          parents,\n        })\n      }\n\n      return map\n    },\n    out: v => {\n      const arr = []\n\n      for (const [key, value] of v.entries()) {\n        if (value === 'on') arr.push(key)\n      }\n\n      return arr\n    },\n  }\n\n  return strategy\n}\n\nexport const independentSingleSelectStrategy = (mandatory?: boolean): SelectStrategy => {\n  const parentStrategy = independentSelectStrategy(mandatory)\n\n  const strategy: SelectStrategy = {\n    select: ({ selected, id, ...rest }) => {\n      id = toRaw(id)\n      const singleSelected = selected.has(id) ? new Map([[id, selected.get(id)!]]) : new Map()\n      return parentStrategy.select({ ...rest, id, selected: singleSelected })\n    },\n    in: (v, children, parents) => {\n      if (v?.length) {\n        return parentStrategy.in(v.slice(0, 1), children, parents)\n      }\n\n      return new Map()\n    },\n    out: (v, children, parents) => {\n      return parentStrategy.out(v, children, parents)\n    },\n  }\n\n  return strategy\n}\n\nexport const leafSelectStrategy = (mandatory?: boolean): SelectStrategy => {\n  const parentStrategy = independentSelectStrategy(mandatory)\n\n  const strategy: SelectStrategy = {\n    select: ({ id, selected, children, ...rest }) => {\n      id = toRaw(id)\n      if (children.has(id)) return selected\n\n      return parentStrategy.select({ id, selected, children, ...rest })\n    },\n    in: parentStrategy.in,\n    out: parentStrategy.out,\n  }\n\n  return strategy\n}\n\nexport const leafSingleSelectStrategy = (mandatory?: boolean): SelectStrategy => {\n  const parentStrategy = independentSingleSelectStrategy(mandatory)\n\n  const strategy: SelectStrategy = {\n    select: ({ id, selected, children, ...rest }) => {\n      id = toRaw(id)\n      if (children.has(id)) return selected\n\n      return parentStrategy.select({ id, selected, children, ...rest })\n    },\n    in: parentStrategy.in,\n    out: parentStrategy.out,\n  }\n\n  return strategy\n}\n\nexport const classicSelectStrategy = (mandatory?: boolean): SelectStrategy => {\n  const strategy: SelectStrategy = {\n    select: ({ id, value, selected, children, parents }) => {\n      id = toRaw(id)\n      const original = new Map(selected)\n\n      const items = [id]\n\n      while (items.length) {\n        const item = items.shift()!\n\n        selected.set(toRaw(item), value ? 'on' : 'off')\n\n        if (children.has(item)) {\n          items.push(...children.get(item)!)\n        }\n      }\n\n      let parent = toRaw(parents.get(id))\n\n      while (parent) {\n        const childrenIds = children.get(parent)!\n        const everySelected = childrenIds.every(cid => selected.get(toRaw(cid)) === 'on')\n        const noneSelected = childrenIds.every(cid => !selected.has(toRaw(cid)) || selected.get(toRaw(cid)) === 'off')\n\n        selected.set(parent, everySelected ? 'on' : noneSelected ? 'off' : 'indeterminate')\n\n        parent = toRaw(parents.get(parent))\n      }\n\n      // If mandatory and planned deselect results in no selected\n      // items then we can't do it, so return original state\n      if (mandatory && !value) {\n        const on = Array.from(selected.entries())\n          .reduce((arr, [key, value]) => {\n            if (value === 'on') arr.push(key)\n            return arr\n          }, [] as unknown[])\n        if (on.length === 0) return original\n      }\n\n      return selected\n    },\n    in: (v, children, parents) => {\n      let map = new Map()\n\n      for (const id of (v || [])) {\n        map = strategy.select({\n          id,\n          value: true,\n          selected: map,\n          children,\n          parents,\n        })\n      }\n\n      return map\n    },\n    out: (v, children) => {\n      const arr = []\n\n      for (const [key, value] of v.entries()) {\n        if (value === 'on' && !children.has(key)) arr.push(key)\n      }\n\n      return arr\n    },\n  }\n\n  return strategy\n}\n\nexport const trunkSelectStrategy = (mandatory?: boolean): SelectStrategy => {\n  const parentStrategy = classicSelectStrategy(mandatory)\n\n  const strategy: SelectStrategy = {\n    select: parentStrategy.select,\n    in: parentStrategy.in,\n    out: (v, children, parents) => {\n      const arr = []\n\n      for (const [key, value] of v.entries()) {\n        if (value === 'on') {\n          if (parents.has(key)) {\n            const parent = parents.get(key)\n            if (v.get(parent) === 'on') continue\n          }\n          arr.push(key)\n        }\n      }\n\n      return arr\n    },\n  }\n\n  return strategy\n}\n"]},"metadata":{},"sourceType":"module"}