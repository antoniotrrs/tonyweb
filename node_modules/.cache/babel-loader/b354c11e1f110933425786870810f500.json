{"ast":null,"code":"// Composables\nimport { useProxiedModel } from \"./proxiedModel.js\"; // Utilities\n\nimport { computed, inject, markRaw, provide, ref, shallowRef, toRef, watch } from 'vue';\nimport { consoleWarn, propsFactory } from \"../util/index.js\"; // Types\n\nexport const FormKey = Symbol.for('vuetify:form');\nexport const makeFormProps = propsFactory({\n  disabled: Boolean,\n  fastFail: Boolean,\n  readonly: Boolean,\n  modelValue: {\n    type: Boolean,\n    default: null\n  },\n  validateOn: {\n    type: String,\n    default: 'input'\n  }\n}, 'form');\nexport function createForm(props) {\n  const model = useProxiedModel(props, 'modelValue');\n  const isDisabled = computed(() => props.disabled);\n  const isReadonly = computed(() => props.readonly);\n  const isValidating = shallowRef(false);\n  const items = ref([]);\n  const errors = ref([]);\n\n  async function validate() {\n    const results = [];\n    let valid = true;\n    errors.value = [];\n    isValidating.value = true;\n\n    for (const item of items.value) {\n      const itemErrorMessages = await item.validate();\n\n      if (itemErrorMessages.length > 0) {\n        valid = false;\n        results.push({\n          id: item.id,\n          errorMessages: itemErrorMessages\n        });\n      }\n\n      if (!valid && props.fastFail) break;\n    }\n\n    errors.value = results;\n    isValidating.value = false;\n    return {\n      valid,\n      errors: errors.value\n    };\n  }\n\n  function reset() {\n    items.value.forEach(item => item.reset());\n  }\n\n  function resetValidation() {\n    items.value.forEach(item => item.resetValidation());\n  }\n\n  watch(items, () => {\n    let valid = 0;\n    let invalid = 0;\n    const results = [];\n\n    for (const item of items.value) {\n      if (item.isValid === false) {\n        invalid++;\n        results.push({\n          id: item.id,\n          errorMessages: item.errorMessages\n        });\n      } else if (item.isValid === true) valid++;\n    }\n\n    errors.value = results;\n    model.value = invalid > 0 ? false : valid === items.value.length ? true : null;\n  }, {\n    deep: true,\n    flush: 'post'\n  });\n  provide(FormKey, {\n    register: _ref => {\n      let {\n        id,\n        vm,\n        validate,\n        reset,\n        resetValidation\n      } = _ref;\n\n      if (items.value.some(item => item.id === id)) {\n        consoleWarn(`Duplicate input name \"${id}\"`);\n      }\n\n      items.value.push({\n        id,\n        validate,\n        reset,\n        resetValidation,\n        vm: markRaw(vm),\n        isValid: null,\n        errorMessages: []\n      });\n    },\n    unregister: id => {\n      items.value = items.value.filter(item => {\n        return item.id !== id;\n      });\n    },\n    update: (id, isValid, errorMessages) => {\n      const found = items.value.find(item => item.id === id);\n      if (!found) return;\n      found.isValid = isValid;\n      found.errorMessages = errorMessages;\n    },\n    isDisabled,\n    isReadonly,\n    isValidating,\n    isValid: model,\n    items,\n    validateOn: toRef(props, 'validateOn')\n  });\n  return {\n    errors,\n    isDisabled,\n    isReadonly,\n    isValidating,\n    isValid: model,\n    items,\n    validate,\n    reset,\n    resetValidation\n  };\n}\nexport function useForm(props) {\n  const form = inject(FormKey, null);\n  return { ...form,\n    isReadonly: computed(() => !!(props?.readonly ?? form?.isReadonly.value)),\n    isDisabled: computed(() => !!(props?.disabled ?? form?.isDisabled.value))\n  };\n}","map":{"version":3,"mappings":"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","names":["useProxiedModel","computed","inject","markRaw","provide","ref","shallowRef","toRef","watch","consoleWarn","propsFactory","FormKey","Symbol","for","makeFormProps","disabled","Boolean","fastFail","readonly","modelValue","type","default","validateOn","String","createForm","props","model","isDisabled","isReadonly","isValidating","items","errors","validate","results","valid","value","item","itemErrorMessages","length","push","id","errorMessages","reset","forEach","resetValidation","invalid","isValid","deep","flush","register","_ref","vm","some","unregister","filter","update","found","find","useForm","form"],"sources":["../../src/composables/form.ts"],"sourcesContent":["// Composables\nimport { useProxiedModel } from '@/composables/proxiedModel'\n\n// Utilities\nimport { computed, inject, markRaw, provide, ref, shallowRef, toRef, watch } from 'vue'\nimport { consoleWarn, propsFactory } from '@/util'\n\n// Types\nimport type { ComponentInternalInstance, ComputedRef, InjectionKey, PropType, Raw, Ref } from 'vue'\nimport type { ValidationProps } from './validation'\nimport type { EventProp } from '@/util'\n\nexport interface FormProvide {\n  register: (item: {\n    id: number | string\n    vm: ComponentInternalInstance\n    validate: () => Promise<string[]>\n    reset: () => Promise<void>\n    resetValidation: () => Promise<void>\n  }) => void\n  unregister: (id: number | string) => void\n  update: (id: number | string, isValid: boolean | null, errorMessages: string[]) => void\n  items: Ref<FormField[]>\n  isDisabled: ComputedRef<boolean>\n  isReadonly: ComputedRef<boolean>\n  isValidating: Ref<boolean>\n  isValid: Ref<boolean | null>\n  validateOn: Ref<FormProps['validateOn']>\n}\n\nexport interface FormField {\n  id: number | string\n  validate: () => Promise<string[]>\n  reset: () => Promise<void>\n  resetValidation: () => Promise<void>\n  vm: Raw<ComponentInternalInstance>\n  isValid: boolean | null\n  errorMessages: string[]\n}\n\nexport interface FieldValidationResult {\n  id: number | string\n  errorMessages: string[]\n}\n\nexport interface FormValidationResult {\n  valid: boolean\n  errors: FieldValidationResult[]\n}\n\nexport interface SubmitEventPromise extends SubmitEvent, Promise<FormValidationResult> {}\n\nexport const FormKey: InjectionKey<FormProvide> = Symbol.for('vuetify:form')\n\nexport interface FormProps {\n  disabled: boolean\n  fastFail: boolean\n  readonly: boolean\n  modelValue: boolean | null\n  'onUpdate:modelValue': EventProp<[boolean | null]> | undefined\n  validateOn: ValidationProps['validateOn']\n}\n\nexport const makeFormProps = propsFactory({\n  disabled: Boolean,\n  fastFail: Boolean,\n  readonly: Boolean,\n  modelValue: {\n    type: Boolean as PropType<boolean | null>,\n    default: null,\n  },\n  validateOn: {\n    type: String as PropType<FormProps['validateOn']>,\n    default: 'input',\n  },\n}, 'form')\n\nexport function createForm (props: FormProps) {\n  const model = useProxiedModel(props, 'modelValue')\n\n  const isDisabled = computed(() => props.disabled)\n  const isReadonly = computed(() => props.readonly)\n  const isValidating = shallowRef(false)\n  const items = ref<FormField[]>([])\n  const errors = ref<FieldValidationResult[]>([])\n\n  async function validate () {\n    const results = []\n    let valid = true\n\n    errors.value = []\n    isValidating.value = true\n\n    for (const item of items.value) {\n      const itemErrorMessages = await item.validate()\n\n      if (itemErrorMessages.length > 0) {\n        valid = false\n\n        results.push({\n          id: item.id,\n          errorMessages: itemErrorMessages,\n        })\n      }\n\n      if (!valid && props.fastFail) break\n    }\n\n    errors.value = results\n    isValidating.value = false\n\n    return { valid, errors: errors.value }\n  }\n\n  function reset () {\n    items.value.forEach(item => item.reset())\n  }\n\n  function resetValidation () {\n    items.value.forEach(item => item.resetValidation())\n  }\n\n  watch(items, () => {\n    let valid = 0\n    let invalid = 0\n    const results = []\n\n    for (const item of items.value) {\n      if (item.isValid === false) {\n        invalid++\n        results.push({\n          id: item.id,\n          errorMessages: item.errorMessages,\n        })\n      } else if (item.isValid === true) valid++\n    }\n\n    errors.value = results\n    model.value =\n      invalid > 0 ? false\n      : valid === items.value.length ? true\n      : null\n  }, { deep: true, flush: 'post' })\n\n  provide(FormKey, {\n    register: ({ id, vm, validate, reset, resetValidation }) => {\n      if (items.value.some(item => item.id === id)) {\n        consoleWarn(`Duplicate input name \"${id}\"`)\n      }\n\n      items.value.push({\n        id,\n        validate,\n        reset,\n        resetValidation,\n        vm: markRaw(vm),\n        isValid: null,\n        errorMessages: [],\n      })\n    },\n    unregister: id => {\n      items.value = items.value.filter(item => {\n        return item.id !== id\n      })\n    },\n    update: (id, isValid, errorMessages) => {\n      const found = items.value.find(item => item.id === id)\n\n      if (!found) return\n\n      found.isValid = isValid\n      found.errorMessages = errorMessages\n    },\n    isDisabled,\n    isReadonly,\n    isValidating,\n    isValid: model,\n    items,\n    validateOn: toRef(props, 'validateOn'),\n  })\n\n  return {\n    errors,\n    isDisabled,\n    isReadonly,\n    isValidating,\n    isValid: model,\n    items,\n    validate,\n    reset,\n    resetValidation,\n  }\n}\n\nexport function useForm (props?: { readonly: boolean | null, disabled: boolean | null }) {\n  const form = inject(FormKey, null)\n  return {\n    ...form,\n    isReadonly: computed(() => !!(props?.readonly ?? form?.isReadonly.value)),\n    isDisabled: computed(() => !!(props?.disabled ?? form?.isDisabled.value)),\n  }\n}\n"]},"metadata":{},"sourceType":"module"}