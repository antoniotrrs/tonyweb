{"ast":null,"code":"// Utilities\nimport { computed, nextTick, ref, useId, watch, createVNode as _createVNode } from 'vue';\nimport { makeLineProps } from \"./util/line.js\";\nimport { genPath as _genPath } from \"./util/path.js\";\nimport { genericComponent, getPropertyFromItem, propsFactory, useRender } from \"../../util/index.js\"; // Types\n\nexport const makeVTrendlineProps = propsFactory({\n  fill: Boolean,\n  ...makeLineProps()\n}, 'VTrendline');\nexport const VTrendline = genericComponent()({\n  name: 'VTrendline',\n  props: makeVTrendlineProps(),\n\n  setup(props, _ref) {\n    let {\n      slots\n    } = _ref;\n    const uid = useId();\n    const id = computed(() => props.id || `trendline-${uid}`);\n    const autoDrawDuration = computed(() => Number(props.autoDrawDuration) || (props.fill ? 500 : 2000));\n    const lastLength = ref(0);\n    const path = ref(null);\n\n    function genPoints(values, boundary) {\n      const {\n        minX,\n        maxX,\n        minY,\n        maxY\n      } = boundary;\n      const totalValues = values.length;\n      const maxValue = props.max != null ? Number(props.max) : Math.max(...values);\n      const minValue = props.min != null ? Number(props.min) : Math.min(...values);\n      const gridX = (maxX - minX) / (totalValues - 1);\n      const gridY = (maxY - minY) / (maxValue - minValue || 1);\n      return values.map((value, index) => {\n        return {\n          x: minX + index * gridX,\n          y: maxY - (value - minValue) * gridY,\n          value\n        };\n      });\n    }\n\n    const hasLabels = computed(() => {\n      return Boolean(props.showLabels || props.labels.length > 0 || !!slots?.label);\n    });\n    const lineWidth = computed(() => {\n      return parseFloat(props.lineWidth) || 4;\n    });\n    const totalWidth = computed(() => Number(props.width));\n    const boundary = computed(() => {\n      const padding = Number(props.padding);\n      return {\n        minX: padding,\n        maxX: totalWidth.value - padding,\n        minY: padding,\n        maxY: parseInt(props.height, 10) - padding\n      };\n    });\n    const items = computed(() => props.modelValue.map(item => getPropertyFromItem(item, props.itemValue, item)));\n    const parsedLabels = computed(() => {\n      const labels = [];\n      const points = genPoints(items.value, boundary.value);\n      const len = points.length;\n\n      for (let i = 0; labels.length < len; i++) {\n        const item = points[i];\n        let value = props.labels[i];\n\n        if (!value) {\n          value = typeof item === 'object' ? item.value : item;\n        }\n\n        labels.push({\n          x: item.x,\n          value: String(value)\n        });\n      }\n\n      return labels;\n    });\n    watch(() => props.modelValue, async () => {\n      await nextTick();\n      if (!props.autoDraw || !path.value) return;\n      const pathRef = path.value;\n      const length = pathRef.getTotalLength();\n\n      if (!props.fill) {\n        // Initial setup to \"hide\" the line by using the stroke dash array\n        pathRef.style.strokeDasharray = `${length}`;\n        pathRef.style.strokeDashoffset = `${length}`; // Force reflow to ensure the transition starts from this state\n\n        pathRef.getBoundingClientRect(); // Animate the stroke dash offset to \"draw\" the line\n\n        pathRef.style.transition = `stroke-dashoffset ${autoDrawDuration.value}ms ${props.autoDrawEasing}`;\n        pathRef.style.strokeDashoffset = '0';\n      } else {\n        // Your existing logic for filled paths remains the same\n        pathRef.style.transformOrigin = 'bottom center';\n        pathRef.style.transition = 'none';\n        pathRef.style.transform = `scaleY(0)`;\n        pathRef.getBoundingClientRect();\n        pathRef.style.transition = `transform ${autoDrawDuration.value}ms ${props.autoDrawEasing}`;\n        pathRef.style.transform = `scaleY(1)`;\n      }\n\n      lastLength.value = length;\n    }, {\n      immediate: true\n    });\n\n    function genPath(fill) {\n      const smoothValue = typeof props.smooth === 'boolean' ? props.smooth ? 8 : 0 : Number(props.smooth);\n      return _genPath(genPoints(items.value, boundary.value), smoothValue, fill, parseInt(props.height, 10));\n    }\n\n    useRender(() => {\n      const gradientData = !props.gradient.slice().length ? [''] : props.gradient.slice().reverse();\n      return _createVNode(\"svg\", {\n        \"display\": \"block\",\n        \"stroke-width\": parseFloat(props.lineWidth) ?? 4\n      }, [_createVNode(\"defs\", null, [_createVNode(\"linearGradient\", {\n        \"id\": id.value,\n        \"gradientUnits\": \"userSpaceOnUse\",\n        \"x1\": props.gradientDirection === 'left' ? '100%' : '0',\n        \"y1\": props.gradientDirection === 'top' ? '100%' : '0',\n        \"x2\": props.gradientDirection === 'right' ? '100%' : '0',\n        \"y2\": props.gradientDirection === 'bottom' ? '100%' : '0'\n      }, [gradientData.map((color, index) => _createVNode(\"stop\", {\n        \"offset\": index / Math.max(gradientData.length - 1, 1),\n        \"stop-color\": color || 'currentColor'\n      }, null))])]), hasLabels.value && _createVNode(\"g\", {\n        \"key\": \"labels\",\n        \"style\": {\n          textAnchor: 'middle',\n          dominantBaseline: 'mathematical',\n          fill: 'currentColor'\n        }\n      }, [parsedLabels.value.map((item, i) => _createVNode(\"text\", {\n        \"x\": item.x + lineWidth.value / 2 + lineWidth.value / 2,\n        \"y\": parseInt(props.height, 10) - 4 + (parseInt(props.labelSize, 10) || 7 * 0.75),\n        \"font-size\": Number(props.labelSize) || 7\n      }, [slots.label?.({\n        index: i,\n        value: item.value\n      }) ?? item.value]))]), _createVNode(\"path\", {\n        \"ref\": path,\n        \"d\": genPath(props.fill),\n        \"fill\": props.fill ? `url(#${id.value})` : 'none',\n        \"stroke\": props.fill ? 'none' : `url(#${id.value})`\n      }, null), props.fill && _createVNode(\"path\", {\n        \"d\": genPath(false),\n        \"fill\": \"none\",\n        \"stroke\": props.color ?? props.gradient?.[0]\n      }, null)]);\n    });\n  }\n\n});","map":{"version":3,"mappings":"AAAA;AACA,SAASA,QAAT,EAAmBC,QAAnB,EAA6BC,GAA7B,EAAkCC,KAAlC,EAAyCC,KAAzC,EAA8CC,2BAA9C,QAAsD,KAAtD;AAA2D,SAClDC,aADkD,QACrC,gBADqC;AACrC,SACbC,OAAO,IAAIC,QADE,QACM,gBADN;AACM,SACnBC,gBADmB,EACDC,mBADC,EACoBC,YADpB,EACkCC,SADlC,QAC2C,qBAD3C,C,CAG5B;;AA0BA,OAAO,MAAMC,mBAAmB,GAAGF,YAAY,CAAC;AAC9CG,MAAI,EAAEC,OADwC;AAG9C,KAAGT,aAAa;AAH8B,CAAD,EAI5C,YAJ4C,CAAxC;AAMP,OAAO,MAAMU,UAAU,GAAGP,gBAAgB,GAAoB;AAC5DQ,MAAI,EAAE,YADsD;AAG5DC,OAAK,EAAEL,mBAAmB,EAHkC;;AAK5DM,OAAKA,CAAED,KAAFC,EAAOC,IAAPD,EAAoB;AAAA,QAAX;AAAEE;AAAF,QAASD,IAAE;AACvB,UAAME,GAAG,GAAGnB,KAAK,EAAjB;AACA,UAAMoB,EAAE,GAAGvB,QAAQ,CAAC,MAAMkB,KAAK,CAACK,EAANL,IAAY,aAAaI,GAAG,EAAnC,CAAnB;AACA,UAAME,gBAAgB,GAAGxB,QAAQ,CAAC,MAAMyB,MAAM,CAACP,KAAK,CAACM,gBAAP,CAANC,KAAmCP,KAAK,CAACJ,IAANI,GAAa,GAAbA,GAAmB,IAAtDO,CAAP,CAAjC;AAEA,UAAMC,UAAU,GAAGxB,GAAG,CAAC,CAAD,CAAtB;AACA,UAAMyB,IAAI,GAAGzB,GAAG,CAAwB,IAAxB,CAAhB;;AAEA,aAAS0B,SAAT,CACEC,MADF,EAEEC,QAFF,EAGW;AACT,YAAM;AAAEC,YAAF;AAAQC,YAAR;AAAcC,YAAd;AAAoBC;AAApB,UAA6BJ,QAAnC;AACA,YAAMK,WAAW,GAAGN,MAAM,CAACO,MAA3B;AACA,YAAMC,QAAQ,GAAGnB,KAAK,CAACoB,GAANpB,IAAa,IAAbA,GAAoBO,MAAM,CAACP,KAAK,CAACoB,GAAP,CAA1BpB,GAAwCqB,IAAI,CAACD,GAALC,CAAS,GAAGV,MAAZU,CAAzD;AACA,YAAMC,QAAQ,GAAGtB,KAAK,CAACuB,GAANvB,IAAa,IAAbA,GAAoBO,MAAM,CAACP,KAAK,CAACuB,GAAP,CAA1BvB,GAAwCqB,IAAI,CAACE,GAALF,CAAS,GAAGV,MAAZU,CAAzD;AAEA,YAAMG,KAAK,GAAG,CAACV,IAAI,GAAGD,IAAR,KAAiBI,WAAW,GAAG,CAA/B,CAAd;AACA,YAAMQ,KAAK,GAAG,CAACT,IAAI,GAAGD,IAAR,KAAkBI,QAAQ,GAAGG,QAAXH,IAAwB,CAA1C,CAAd;AAEA,aAAOR,MAAM,CAACe,GAAPf,CAAW,CAACgB,KAAD,EAAQC,KAAR,KAAkB;AAClC,eAAO;AACLC,WAAC,EAAEhB,IAAI,GAAGe,KAAK,GAAGJ,KADb;AAELM,WAAC,EAAEd,IAAI,GAAG,CAACW,KAAK,GAAGL,QAAT,IAAqBG,KAF1B;AAGLE;AAHK,SAAP;AAKD,OANMhB,CAAP;AAOF;;AACA,UAAMoB,SAAS,GAAGjD,QAAQ,CAAC,MAAM;AAC/B,aAAOe,OAAO,CACZG,KAAK,CAACgC,UAANhC,IACAA,KAAK,CAACiC,MAANjC,CAAakB,MAAblB,GAAsB,CADtBA,IAEA,CAAC,CAACG,KAAK,EAAE+B,KAHG,CAAd;AAKD,KANyB,CAA1B;AAOA,UAAMC,SAAS,GAAGrD,QAAQ,CAAC,MAAM;AAC/B,aAAOsD,UAAU,CAACpC,KAAK,CAACmC,SAAP,CAAVC,IAA+B,CAAtC;AACD,KAFyB,CAA1B;AAGA,UAAMC,UAAU,GAAGvD,QAAQ,CAAC,MAAMyB,MAAM,CAACP,KAAK,CAACsC,KAAP,CAAb,CAA3B;AAEA,UAAM1B,QAAQ,GAAG9B,QAAQ,CAAW,MAAM;AACxC,YAAMyD,OAAO,GAAGhC,MAAM,CAACP,KAAK,CAACuC,OAAP,CAAtB;AAEA,aAAO;AACL1B,YAAI,EAAE0B,OADD;AAELzB,YAAI,EAAEuB,UAAU,CAACV,KAAXU,GAAmBE,OAFpB;AAGLxB,YAAI,EAAEwB,OAHD;AAILvB,YAAI,EAAEwB,QAAQ,CAACxC,KAAK,CAACyC,MAAP,EAAe,EAAf,CAARD,GAA6BD;AAJ9B,OAAP;AAMD,KATwB,CAAzB;AAUA,UAAMG,KAAK,GAAG5D,QAAQ,CAAC,MAAMkB,KAAK,CAAC2C,UAAN3C,CAAiB0B,GAAjB1B,CAAqB4C,IAAI,IAAIpD,mBAAmB,CAACoD,IAAD,EAAO5C,KAAK,CAAC6C,SAAb,EAAwBD,IAAxB,CAAhD5C,CAAP,CAAtB;AACA,UAAM8C,YAAY,GAAGhE,QAAQ,CAAC,MAAM;AAClC,YAAMmD,MAAM,GAAG,EAAf;AACA,YAAMc,MAAM,GAAGrC,SAAS,CAACgC,KAAK,CAACf,KAAP,EAAcf,QAAQ,CAACe,KAAvB,CAAxB;AACA,YAAMqB,GAAG,GAAGD,MAAM,CAAC7B,MAAnB;;AAEA,WAAK,IAAI+B,CAAC,GAAG,CAAb,EAAgBhB,MAAM,CAACf,MAAPe,GAAgBe,GAAhC,EAAqCC,CAAC,EAAtC,EAA0C;AACxC,cAAML,IAAI,GAAGG,MAAM,CAACE,CAAD,CAAnB;AACA,YAAItB,KAAK,GAAG3B,KAAK,CAACiC,MAANjC,CAAaiD,CAAbjD,CAAZ;;AAEA,YAAI,CAAC2B,KAAL,EAAY;AACVA,eAAK,GAAG,OAAOiB,IAAP,KAAgB,QAAhB,GACJA,IAAI,CAACjB,KADD,GAEJiB,IAFJjB;AAGF;;AAEAM,cAAM,CAACiB,IAAPjB,CAAY;AACVJ,WAAC,EAAEe,IAAI,CAACf,CADE;AAEVF,eAAK,EAAEwB,MAAM,CAACxB,KAAD;AAFH,SAAZM;AAIF;;AAEA,aAAOA,MAAP;AACD,KAtB4B,CAA7B;AAwBA/C,SAAK,CAAC,MAAMc,KAAK,CAAC2C,UAAb,EAAyB,YAAY;AACxC,YAAM5D,QAAQ,EAAd;AAEA,UAAI,CAACiB,KAAK,CAACoD,QAAP,IAAmB,CAAC3C,IAAI,CAACkB,KAA7B,EAAoC;AAEpC,YAAM0B,OAAO,GAAG5C,IAAI,CAACkB,KAArB;AACA,YAAMT,MAAM,GAAGmC,OAAO,CAACC,cAARD,EAAf;;AAEA,UAAI,CAACrD,KAAK,CAACJ,IAAX,EAAiB;AACf;AACAyD,eAAO,CAACE,KAARF,CAAcG,eAAdH,GAAgC,GAAGnC,MAAM,EAAzCmC;AACAA,eAAO,CAACE,KAARF,CAAcI,gBAAdJ,GAAiC,GAAGnC,MAAM,EAA1CmC,CAHe,CAKf;;AACAA,eAAO,CAACK,qBAARL,GANe,CAQf;;AACAA,eAAO,CAACE,KAARF,CAAcM,UAAdN,GAA2B,qBAAqB/C,gBAAgB,CAACqB,KAAK,MAAM3B,KAAK,CAAC4D,cAAc,EAAhGP;AACAA,eAAO,CAACE,KAARF,CAAcI,gBAAdJ,GAAiC,GAAjCA;AACD,OAXD,MAWO;AACL;AACAA,eAAO,CAACE,KAARF,CAAcQ,eAAdR,GAAgC,eAAhCA;AACAA,eAAO,CAACE,KAARF,CAAcM,UAAdN,GAA2B,MAA3BA;AACAA,eAAO,CAACE,KAARF,CAAcS,SAAdT,GAA0B,WAA1BA;AACAA,eAAO,CAACK,qBAARL;AACAA,eAAO,CAACE,KAARF,CAAcM,UAAdN,GAA2B,aAAa/C,gBAAgB,CAACqB,KAAK,MAAM3B,KAAK,CAAC4D,cAAc,EAAxFP;AACAA,eAAO,CAACE,KAARF,CAAcS,SAAdT,GAA0B,WAA1BA;AACF;;AAEA7C,gBAAU,CAACmB,KAAXnB,GAAmBU,MAAnBV;AACD,KA9BI,EA8BF;AAAEuD,eAAS,EAAE;AAAb,KA9BE,CAAL7E;;AAgCA,aAASG,OAAT,CAAkBO,IAAlB,EAAiC;AAC/B,YAAMoE,WAAW,GAAG,OAAOhE,KAAK,CAACiE,MAAb,KAAwB,SAAxB,GAAqCjE,KAAK,CAACiE,MAANjE,GAAe,CAAfA,GAAmB,CAAxD,GAA6DO,MAAM,CAACP,KAAK,CAACiE,MAAP,CAAvF;AAEA,aAAO3E,QAAQ,CACboB,SAAS,CAACgC,KAAK,CAACf,KAAP,EAAcf,QAAQ,CAACe,KAAvB,CADI,EAEbqC,WAFa,EAGbpE,IAHa,EAIb4C,QAAQ,CAACxC,KAAK,CAACyC,MAAP,EAAe,EAAf,CAJK,CAAf;AAMF;;AAEA/C,aAAS,CAAC,MAAM;AACd,YAAMwE,YAAY,GAAG,CAAClE,KAAK,CAACmE,QAANnE,CAAeoE,KAAfpE,GAAuBkB,MAAxB,GAAiC,CAAC,EAAD,CAAjC,GAAwClB,KAAK,CAACmE,QAANnE,CAAeoE,KAAfpE,GAAuBqE,OAAvBrE,EAA7D;AAEA;AAAA;AAAA,wBAGmBoC,UAAU,CAACpC,KAAK,CAACmC,SAAP,CAAVC,IAA+B;AAHlD,SAGmD;AAAA,cAItC/B,EAAE,CAACsB,KAJmC;AAI9B,yCAJ8B;AAI9B,cAER3B,KAAK,CAACsE,iBAANtE,KAA4B,MAA5BA,GAAqC,MAArCA,GAA8C,GANR;AAMW,cACjDA,KAAK,CAACsE,iBAANtE,KAA4B,KAA5BA,GAAoC,MAApCA,GAA6C,GAPP;AAOU,cAChDA,KAAK,CAACsE,iBAANtE,KAA4B,OAA5BA,GAAsC,MAAtCA,GAA+C,GART;AAQY,cAClDA,KAAK,CAACsE,iBAANtE,KAA4B,QAA5BA,GAAuC,MAAvCA,GAAgD;AATV,SASa,CAGtDkE,YAAY,CAACxC,GAAbwC,CAAiB,CAACK,KAAD,EAAQ3C,KAAR,KAAa4C;AAAA,kBACb5C,KAAK,GAAIP,IAAI,CAACD,GAALC,CAAS6C,YAAY,CAAChD,MAAbgD,GAAsB,CAA/B7C,EAAkC,CAAlCA,CADI;AACiC,sBAAgBkD,KAAK,IAAI;AAD1D,SACwE,IADxE,CAA9BL,CAHsD,CATb,KAmB7CnC,SAAS,CAACJ,KAAVI,IAAeyC;AAAA;AAAA,iBAGN;AACLC,oBAAU,EAAE,QADP;AAELC,0BAAgB,EAAE,cAFb;AAGL9E,cAAI,EAAE;AAHD;AAHM,SAOZ,CAGCkD,YAAY,CAACnB,KAAbmB,CAAmBpB,GAAnBoB,CAAuB,CAACF,IAAD,EAAOK,CAAP,KAAQuB;AAAA,aAEvB5B,IAAI,CAACf,CAALe,GAAUT,SAAS,CAACR,KAAVQ,GAAkB,CAA5BS,GAAiCT,SAAS,CAACR,KAAVQ,GAAkB,CAF5B;AAE6B,aACnDK,QAAQ,CAACxC,KAAK,CAACyC,MAAP,EAAe,EAAf,CAARD,GAA6B,CAA7BA,IAAmCA,QAAQ,CAACxC,KAAK,CAAC2E,SAAP,EAAkB,EAAlB,CAARnC,IAAiC,IAAI,IAAxEA,CAHsB;AAGuD,qBACtEjC,MAAM,CAACP,KAAK,CAAC2E,SAAP,CAANpE,IAA2B;AAJZ,SAIa,CAEtCJ,KAAK,CAAC+B,KAAN/B,GAAc;AAAEyB,aAAK,EAAEqB,CAAT;AAAYtB,aAAK,EAAEiB,IAAI,CAACjB;AAAxB,OAAdxB,KAAkDyC,IAAI,CAACjB,KAFjB,CAJb,CAA/BmB,CAHD,CAPY,CAnB8B,EAwC9C0B;AAAA,eAGO/D,IAHP;AAGW,aACNpB,OAAO,CAACW,KAAK,CAACJ,IAAP,CAJZ;AAIwB,gBAChBI,KAAK,CAACJ,IAANI,GAAa,QAAQK,EAAE,CAACsB,KAAK,GAA7B3B,GAAmC,MAL3C;AAKiD,kBACvCA,KAAK,CAACJ,IAANI,GAAa,MAAbA,GAAsB,QAAQK,EAAE,CAACsB,KAAK;AANhD,SAMmD,IANnD,CAxC8C,EAiD7C3B,KAAK,CAACJ,IAANI,IAAUwE;AAAA,aAEJnF,OAAO,CAAC,KAAD,CAFH;AAEU,sBAFV;AAEU,kBAETW,KAAK,CAACuE,KAANvE,IAAeA,KAAK,CAACmE,QAANnE,GAAiB,CAAjBA;AAJhB,SAImC,IAJnC,CAjDmC,CAHnD;AA6DD,KAhEQ,CAATN;AAiEF;;AA5L4D,CAApB,CAAnC","names":["computed","nextTick","ref","useId","watch","createVNode","makeLineProps","genPath","_genPath","genericComponent","getPropertyFromItem","propsFactory","useRender","makeVTrendlineProps","fill","Boolean","VTrendline","name","props","setup","_ref","slots","uid","id","autoDrawDuration","Number","lastLength","path","genPoints","values","boundary","minX","maxX","minY","maxY","totalValues","length","maxValue","max","Math","minValue","min","gridX","gridY","map","value","index","x","y","hasLabels","showLabels","labels","label","lineWidth","parseFloat","totalWidth","width","padding","parseInt","height","items","modelValue","item","itemValue","parsedLabels","points","len","i","push","String","autoDraw","pathRef","getTotalLength","style","strokeDasharray","strokeDashoffset","getBoundingClientRect","transition","autoDrawEasing","transformOrigin","transform","immediate","smoothValue","smooth","gradientData","gradient","slice","reverse","gradientDirection","color","_createVNode","textAnchor","dominantBaseline","labelSize"],"sources":["../../../src/components/VSparkline/VTrendline.tsx"],"sourcesContent":["// Utilities\nimport { computed, nextTick, ref, useId, watch } from 'vue'\nimport { makeLineProps } from './util/line'\nimport { genPath as _genPath } from './util/path'\nimport { genericComponent, getPropertyFromItem, propsFactory, useRender } from '@/util'\n\n// Types\nexport type VTrendlineSlots = {\n  default: void\n  label: { index: number, value: string }\n}\n\nexport type SparklineItem = number | { value: number }\n\nexport type SparklineText = {\n  x: number\n  value: string\n}\n\nexport interface Boundary {\n  minX: number\n  minY: number\n  maxX: number\n  maxY: number\n}\n\nexport interface Point {\n  x: number\n  y: number\n  value: number\n}\n\nexport const makeVTrendlineProps = propsFactory({\n  fill: Boolean,\n\n  ...makeLineProps(),\n}, 'VTrendline')\n\nexport const VTrendline = genericComponent<VTrendlineSlots>()({\n  name: 'VTrendline',\n\n  props: makeVTrendlineProps(),\n\n  setup (props, { slots }) {\n    const uid = useId()\n    const id = computed(() => props.id || `trendline-${uid}`)\n    const autoDrawDuration = computed(() => Number(props.autoDrawDuration) || (props.fill ? 500 : 2000))\n\n    const lastLength = ref(0)\n    const path = ref<SVGPathElement | null>(null)\n\n    function genPoints (\n      values: number[],\n      boundary: Boundary\n    ): Point[] {\n      const { minX, maxX, minY, maxY } = boundary\n      const totalValues = values.length\n      const maxValue = props.max != null ? Number(props.max) : Math.max(...values)\n      const minValue = props.min != null ? Number(props.min) : Math.min(...values)\n\n      const gridX = (maxX - minX) / (totalValues - 1)\n      const gridY = (maxY - minY) / ((maxValue - minValue) || 1)\n\n      return values.map((value, index) => {\n        return {\n          x: minX + index * gridX,\n          y: maxY - (value - minValue) * gridY,\n          value,\n        }\n      })\n    }\n    const hasLabels = computed(() => {\n      return Boolean(\n        props.showLabels ||\n        props.labels.length > 0 ||\n        !!slots?.label\n      )\n    })\n    const lineWidth = computed(() => {\n      return parseFloat(props.lineWidth) || 4\n    })\n    const totalWidth = computed(() => Number(props.width))\n\n    const boundary = computed<Boundary>(() => {\n      const padding = Number(props.padding)\n\n      return {\n        minX: padding,\n        maxX: totalWidth.value - padding,\n        minY: padding,\n        maxY: parseInt(props.height, 10) - padding,\n      }\n    })\n    const items = computed(() => props.modelValue.map(item => getPropertyFromItem(item, props.itemValue, item)))\n    const parsedLabels = computed(() => {\n      const labels = []\n      const points = genPoints(items.value, boundary.value)\n      const len = points.length\n\n      for (let i = 0; labels.length < len; i++) {\n        const item = points[i]\n        let value = props.labels[i]\n\n        if (!value) {\n          value = typeof item === 'object'\n            ? item.value\n            : item\n        }\n\n        labels.push({\n          x: item.x,\n          value: String(value),\n        })\n      }\n\n      return labels\n    })\n\n    watch(() => props.modelValue, async () => {\n      await nextTick()\n\n      if (!props.autoDraw || !path.value) return\n\n      const pathRef = path.value\n      const length = pathRef.getTotalLength()\n\n      if (!props.fill) {\n        // Initial setup to \"hide\" the line by using the stroke dash array\n        pathRef.style.strokeDasharray = `${length}`\n        pathRef.style.strokeDashoffset = `${length}`\n\n        // Force reflow to ensure the transition starts from this state\n        pathRef.getBoundingClientRect()\n\n        // Animate the stroke dash offset to \"draw\" the line\n        pathRef.style.transition = `stroke-dashoffset ${autoDrawDuration.value}ms ${props.autoDrawEasing}`\n        pathRef.style.strokeDashoffset = '0'\n      } else {\n        // Your existing logic for filled paths remains the same\n        pathRef.style.transformOrigin = 'bottom center'\n        pathRef.style.transition = 'none'\n        pathRef.style.transform = `scaleY(0)`\n        pathRef.getBoundingClientRect()\n        pathRef.style.transition = `transform ${autoDrawDuration.value}ms ${props.autoDrawEasing}`\n        pathRef.style.transform = `scaleY(1)`\n      }\n\n      lastLength.value = length\n    }, { immediate: true })\n\n    function genPath (fill: boolean) {\n      const smoothValue = typeof props.smooth === 'boolean' ? (props.smooth ? 8 : 0) : Number(props.smooth)\n\n      return _genPath(\n        genPoints(items.value, boundary.value),\n        smoothValue,\n        fill,\n        parseInt(props.height, 10)\n      )\n    }\n\n    useRender(() => {\n      const gradientData = !props.gradient.slice().length ? [''] : props.gradient.slice().reverse()\n\n      return (\n        <svg\n          display=\"block\"\n          stroke-width={ parseFloat(props.lineWidth) ?? 4 }\n        >\n          <defs>\n            <linearGradient\n              id={ id.value }\n              gradientUnits=\"userSpaceOnUse\"\n              x1={ props.gradientDirection === 'left' ? '100%' : '0' }\n              y1={ props.gradientDirection === 'top' ? '100%' : '0' }\n              x2={ props.gradientDirection === 'right' ? '100%' : '0' }\n              y2={ props.gradientDirection === 'bottom' ? '100%' : '0' }\n            >\n              {\n                gradientData.map((color, index) => (\n                  <stop offset={ index / (Math.max(gradientData.length - 1, 1)) } stop-color={ color || 'currentColor' } />\n                ))\n              }\n            </linearGradient>\n          </defs>\n\n          { hasLabels.value && (\n            <g\n              key=\"labels\"\n              style={{\n                textAnchor: 'middle',\n                dominantBaseline: 'mathematical',\n                fill: 'currentColor',\n              }}\n            >\n              {\n                parsedLabels.value.map((item, i) => (\n                  <text\n                    x={ item.x + (lineWidth.value / 2) + lineWidth.value / 2 }\n                    y={ (parseInt(props.height, 10) - 4) + (parseInt(props.labelSize, 10) || 7 * 0.75) }\n                    font-size={ Number(props.labelSize) || 7 }\n                  >\n                    { slots.label?.({ index: i, value: item.value }) ?? item.value }\n                  </text>\n                ))\n              }\n            </g>\n          )}\n\n          <path\n            ref={ path }\n            d={ genPath(props.fill) }\n            fill={ props.fill ? `url(#${id.value})` : 'none' }\n            stroke={ props.fill ? 'none' : `url(#${id.value})` }\n          />\n\n          { props.fill && (\n            <path\n              d={ genPath(false) }\n              fill=\"none\"\n              stroke={ props.color ?? props.gradient?.[0] }\n            />\n          )}\n        </svg>\n      )\n    })\n  },\n})\n\nexport type VTrendline = InstanceType<typeof VTrendline>\n"]},"metadata":{},"sourceType":"module"}