{"ast":null,"code":"import _objectSpread from \"/Users/antoniotorres/Documents/tony/tonyweb/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport { Fragment as _Fragment, mergeProps as _mergeProps, createVNode as _createVNode } from \"vue\"; // Styles\n\nimport \"./VTabs.css\"; // Components\n\nimport { VTab } from \"./VTab.js\";\nimport { VTabsWindow } from \"./VTabsWindow.js\";\nimport { VTabsWindowItem } from \"./VTabsWindowItem.js\";\nimport { makeVSlideGroupProps, VSlideGroup } from \"../VSlideGroup/VSlideGroup.js\"; // Composables\n\nimport { useBackgroundColor } from \"../../composables/color.js\";\nimport { provideDefaults } from \"../../composables/defaults.js\";\nimport { makeDensityProps, useDensity } from \"../../composables/density.js\";\nimport { useProxiedModel } from \"../../composables/proxiedModel.js\";\nimport { useScopeId } from \"../../composables/scopeId.js\";\nimport { makeTagProps } from \"../../composables/tag.js\"; // Utilities\n\nimport { computed, toRef } from 'vue';\nimport { VTabsSymbol } from \"./shared.js\";\nimport { convertToUnit, genericComponent, isObject, propsFactory, useRender } from \"../../util/index.js\"; // Types\n\nfunction parseItems(items) {\n  if (!items) return [];\n  return items.map(function (item) {\n    if (!isObject(item)) return {\n      text: item,\n      value: item\n    };\n    return item;\n  });\n}\n\nexport var makeVTabsProps = propsFactory(_objectSpread(_objectSpread(_objectSpread({\n  alignTabs: {\n    type: String,\n    default: 'start'\n  },\n  color: String,\n  fixedTabs: Boolean,\n  items: {\n    type: Array,\n    default: function _default() {\n      return [];\n    }\n  },\n  stacked: Boolean,\n  bgColor: String,\n  grow: Boolean,\n  height: {\n    type: [Number, String],\n    default: undefined\n  },\n  hideSlider: Boolean,\n  sliderColor: String\n}, makeVSlideGroupProps({\n  mandatory: 'force',\n  selectedClass: 'v-tab-item--selected'\n})), makeDensityProps()), makeTagProps()), 'VTabs');\nexport var VTabs = genericComponent()({\n  name: 'VTabs',\n  props: makeVTabsProps(),\n  emits: {\n    'update:modelValue': function updateModelValue(v) {\n      return true;\n    }\n  },\n  setup: function setup(props, _ref) {\n    var attrs = _ref.attrs,\n        slots = _ref.slots;\n    var model = useProxiedModel(props, 'modelValue');\n    var items = computed(function () {\n      return parseItems(props.items);\n    });\n\n    var _useDensity = useDensity(props),\n        densityClasses = _useDensity.densityClasses;\n\n    var _useBackgroundColor = useBackgroundColor(toRef(props, 'bgColor')),\n        backgroundColorClasses = _useBackgroundColor.backgroundColorClasses,\n        backgroundColorStyles = _useBackgroundColor.backgroundColorStyles;\n\n    var _useScopeId = useScopeId(),\n        scopeId = _useScopeId.scopeId;\n\n    provideDefaults({\n      VTab: {\n        color: toRef(props, 'color'),\n        direction: toRef(props, 'direction'),\n        stacked: toRef(props, 'stacked'),\n        fixed: toRef(props, 'fixedTabs'),\n        sliderColor: toRef(props, 'sliderColor'),\n        hideSlider: toRef(props, 'hideSlider')\n      }\n    });\n    useRender(function () {\n      var slideGroupProps = VSlideGroup.filterProps(props);\n      var hasWindow = !!(slots.window || props.items.length > 0);\n      return _createVNode(_Fragment, null, [_createVNode(VSlideGroup, _mergeProps(slideGroupProps, {\n        \"modelValue\": model.value,\n        \"onUpdate:modelValue\": function onUpdateModelValue($event) {\n          return model.value = $event;\n        },\n        \"class\": ['v-tabs', \"v-tabs--\".concat(props.direction), \"v-tabs--align-tabs-\".concat(props.alignTabs), {\n          'v-tabs--fixed-tabs': props.fixedTabs,\n          'v-tabs--grow': props.grow,\n          'v-tabs--stacked': props.stacked\n        }, densityClasses.value, backgroundColorClasses.value, props.class],\n        \"style\": [{\n          '--v-tabs-height': convertToUnit(props.height)\n        }, backgroundColorStyles.value, props.style],\n        \"role\": \"tablist\",\n        \"symbol\": VTabsSymbol\n      }, scopeId, attrs), {\n        default: function _default() {\n          var _slots$default, _slots$default2;\n\n          return [(_slots$default = (_slots$default2 = slots.default) === null || _slots$default2 === void 0 ? void 0 : _slots$default2.call(slots)) !== null && _slots$default !== void 0 ? _slots$default : items.value.map(function (item) {\n            var _slots$tab, _slots$tab2;\n\n            return (_slots$tab = (_slots$tab2 = slots.tab) === null || _slots$tab2 === void 0 ? void 0 : _slots$tab2.call(slots, {\n              item: item\n            })) !== null && _slots$tab !== void 0 ? _slots$tab : _createVNode(VTab, _mergeProps(item, {\n              \"key\": item.text,\n              \"value\": item.value\n            }), {\n              default: slots[\"tab.\".concat(item.value)] ? function () {\n                var _slots$;\n\n                return (_slots$ = slots[\"tab.\".concat(item.value)]) === null || _slots$ === void 0 ? void 0 : _slots$.call(slots, {\n                  item: item\n                });\n              } : undefined\n            });\n          })];\n        }\n      }), hasWindow && _createVNode(VTabsWindow, _mergeProps({\n        \"modelValue\": model.value,\n        \"onUpdate:modelValue\": function onUpdateModelValue($event) {\n          return model.value = $event;\n        },\n        \"key\": \"tabs-window\"\n      }, scopeId), {\n        default: function _default() {\n          var _slots$window;\n\n          return [items.value.map(function (item) {\n            var _slots$item, _slots$item2;\n\n            return (_slots$item = (_slots$item2 = slots.item) === null || _slots$item2 === void 0 ? void 0 : _slots$item2.call(slots, {\n              item: item\n            })) !== null && _slots$item !== void 0 ? _slots$item : _createVNode(VTabsWindowItem, {\n              \"value\": item.value\n            }, {\n              default: function _default() {\n                var _slots$2;\n\n                return (_slots$2 = slots[\"item.\".concat(item.value)]) === null || _slots$2 === void 0 ? void 0 : _slots$2.call(slots, {\n                  item: item\n                });\n              }\n            });\n          }), (_slots$window = slots.window) === null || _slots$window === void 0 ? void 0 : _slots$window.call(slots)];\n        }\n      })]);\n    });\n    return {};\n  }\n});","map":{"version":3,"mappings":"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","names":["VTab","VTabsWindow","VTabsWindowItem","makeVSlideGroupProps","VSlideGroup","useBackgroundColor","provideDefaults","makeDensityProps","useDensity","useProxiedModel","useScopeId","makeTagProps","computed","toRef","VTabsSymbol","convertToUnit","genericComponent","isObject","propsFactory","useRender","parseItems","items","map","item","text","value","makeVTabsProps","alignTabs","type","String","default","color","fixedTabs","Boolean","Array","stacked","bgColor","grow","height","Number","undefined","hideSlider","sliderColor","mandatory","selectedClass","VTabs","name","props","emits","v","setup","_ref","attrs","slots","model","densityClasses","backgroundColorClasses","backgroundColorStyles","scopeId","direction","fixed","slideGroupProps","filterProps","hasWindow","window","length","$event","class","style","tab","_createVNode"],"sources":["../../../src/components/VTabs/VTabs.tsx"],"sourcesContent":["// Styles\nimport './VTabs.sass'\n\n// Components\nimport { VTab } from './VTab'\nimport { VTabsWindow } from './VTabsWindow'\nimport { VTabsWindowItem } from './VTabsWindowItem'\nimport { makeVSlideGroupProps, VSlideGroup } from '@/components/VSlideGroup/VSlideGroup'\n\n// Composables\nimport { useBackgroundColor } from '@/composables/color'\nimport { provideDefaults } from '@/composables/defaults'\nimport { makeDensityProps, useDensity } from '@/composables/density'\nimport { useProxiedModel } from '@/composables/proxiedModel'\nimport { useScopeId } from '@/composables/scopeId'\nimport { makeTagProps } from '@/composables/tag'\n\n// Utilities\nimport { computed, toRef } from 'vue'\nimport { VTabsSymbol } from './shared'\nimport { convertToUnit, genericComponent, isObject, propsFactory, useRender } from '@/util'\n\n// Types\nimport type { PropType } from 'vue'\nimport type { GenericProps } from '@/util'\n\nexport type TabItem = string | number | Record<string, any>\n\nexport type VTabsSlot<T> = {\n  item: T\n}\n\nexport type VTabsSlots<T> = {\n  default: never\n  tab: VTabsSlot<T>\n  item: VTabsSlot<T>\n  window: never\n} & {\n  [key: `tab.${string}`]: VTabsSlot<T>\n  [key: `item.${string}`]: VTabsSlot<T>\n}\n\nfunction parseItems (items: readonly TabItem[] | undefined) {\n  if (!items) return []\n\n  return items.map(item => {\n    if (!isObject(item)) return { text: item, value: item }\n\n    return item\n  })\n}\n\nexport const makeVTabsProps = propsFactory({\n  alignTabs: {\n    type: String as PropType<'start' | 'title' | 'center' | 'end'>,\n    default: 'start',\n  },\n  color: String,\n  fixedTabs: Boolean,\n  items: {\n    type: Array as PropType<readonly TabItem[]>,\n    default: () => ([]),\n  },\n  stacked: Boolean,\n  bgColor: String,\n  grow: Boolean,\n  height: {\n    type: [Number, String],\n    default: undefined,\n  },\n  hideSlider: Boolean,\n  sliderColor: String,\n\n  ...makeVSlideGroupProps({\n    mandatory: 'force' as const,\n    selectedClass: 'v-tab-item--selected',\n  }),\n  ...makeDensityProps(),\n  ...makeTagProps(),\n}, 'VTabs')\n\nexport const VTabs = genericComponent<new <T = TabItem>(\n  props: {\n    items?: T[]\n  },\n  slots: VTabsSlots<T>\n) => GenericProps<typeof props, typeof slots>>()({\n  name: 'VTabs',\n\n  props: makeVTabsProps(),\n\n  emits: {\n    'update:modelValue': (v: unknown) => true,\n  },\n\n  setup (props, { attrs, slots }) {\n    const model = useProxiedModel(props, 'modelValue')\n    const items = computed(() => parseItems(props.items))\n    const { densityClasses } = useDensity(props)\n    const { backgroundColorClasses, backgroundColorStyles } = useBackgroundColor(toRef(props, 'bgColor'))\n    const { scopeId } = useScopeId()\n\n    provideDefaults({\n      VTab: {\n        color: toRef(props, 'color'),\n        direction: toRef(props, 'direction'),\n        stacked: toRef(props, 'stacked'),\n        fixed: toRef(props, 'fixedTabs'),\n        sliderColor: toRef(props, 'sliderColor'),\n        hideSlider: toRef(props, 'hideSlider'),\n      },\n    })\n\n    useRender(() => {\n      const slideGroupProps = VSlideGroup.filterProps(props)\n      const hasWindow = !!(slots.window || props.items.length > 0)\n\n      return (\n        <>\n          <VSlideGroup\n            { ...slideGroupProps }\n            v-model={ model.value }\n            class={[\n              'v-tabs',\n              `v-tabs--${props.direction}`,\n              `v-tabs--align-tabs-${props.alignTabs}`,\n              {\n                'v-tabs--fixed-tabs': props.fixedTabs,\n                'v-tabs--grow': props.grow,\n                'v-tabs--stacked': props.stacked,\n              },\n              densityClasses.value,\n              backgroundColorClasses.value,\n              props.class,\n            ]}\n            style={[\n              { '--v-tabs-height': convertToUnit(props.height) },\n              backgroundColorStyles.value,\n              props.style,\n            ]}\n            role=\"tablist\"\n            symbol={ VTabsSymbol }\n            { ...scopeId }\n            { ...attrs }\n          >\n            { slots.default?.() ?? items.value.map(item => (\n              slots.tab?.({ item }) ?? (\n                <VTab\n                  { ...item }\n                  key={ item.text }\n                  value={ item.value }\n                  v-slots={{\n                    default: slots[`tab.${item.value}`] ? () => slots[`tab.${item.value}`]?.({ item }) : undefined,\n                  }}\n                />\n              )\n            ))}\n          </VSlideGroup>\n\n          { hasWindow && (\n            <VTabsWindow\n              v-model={ model.value }\n              key=\"tabs-window\"\n              { ...scopeId }\n            >\n              { items.value.map(item => slots.item?.({ item }) ?? (\n                <VTabsWindowItem\n                  value={ item.value }\n                  v-slots={{\n                    default: () => slots[`item.${item.value}`]?.({ item }),\n                  }}\n                />\n              ))}\n\n              { slots.window?.() }\n            </VTabsWindow>\n          )}\n        </>\n      )\n    })\n\n    return {}\n  },\n})\n\nexport type VTabs = InstanceType<typeof VTabs>\n"]},"metadata":{},"sourceType":"module"}