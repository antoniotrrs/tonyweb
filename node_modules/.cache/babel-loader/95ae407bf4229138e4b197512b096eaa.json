{"ast":null,"code":"import { createVNode as _createVNode } from \"vue\"; // Styles\n\nimport \"./VIcon.css\"; // Composables\n\nimport { useTextColor } from \"../../composables/color.js\";\nimport { makeComponentProps } from \"../../composables/component.js\";\nimport { IconValue, useIcon } from \"../../composables/icons.js\";\nimport { makeSizeProps, useSize } from \"../../composables/size.js\";\nimport { makeTagProps } from \"../../composables/tag.js\";\nimport { makeThemeProps, useTheme } from \"../../composables/theme.js\"; // Utilities\n\nimport { computed, ref, Text, toRef } from 'vue';\nimport { convertToUnit, flattenFragments, genericComponent, propsFactory, useRender } from \"../../util/index.js\";\nexport const makeVIconProps = propsFactory({\n  color: String,\n  disabled: Boolean,\n  start: Boolean,\n  end: Boolean,\n  icon: IconValue,\n  opacity: [String, Number],\n  ...makeComponentProps(),\n  ...makeSizeProps(),\n  ...makeTagProps({\n    tag: 'i'\n  }),\n  ...makeThemeProps()\n}, 'VIcon');\nexport const VIcon = genericComponent()({\n  name: 'VIcon',\n  props: makeVIconProps(),\n\n  setup(props, _ref) {\n    let {\n      attrs,\n      slots\n    } = _ref;\n    const slotIcon = ref();\n    const {\n      themeClasses\n    } = useTheme();\n    const {\n      iconData\n    } = useIcon(computed(() => slotIcon.value || props.icon));\n    const {\n      sizeClasses\n    } = useSize(props);\n    const {\n      textColorClasses,\n      textColorStyles\n    } = useTextColor(toRef(props, 'color'));\n    useRender(() => {\n      const slotValue = slots.default?.();\n\n      if (slotValue) {\n        slotIcon.value = flattenFragments(slotValue).filter(node => node.type === Text && node.children && typeof node.children === 'string')[0]?.children;\n      }\n\n      const hasClick = !!(attrs.onClick || attrs.onClickOnce);\n      return _createVNode(iconData.value.component, {\n        \"tag\": props.tag,\n        \"icon\": iconData.value.icon,\n        \"class\": ['v-icon', 'notranslate', themeClasses.value, sizeClasses.value, textColorClasses.value, {\n          'v-icon--clickable': hasClick,\n          'v-icon--disabled': props.disabled,\n          'v-icon--start': props.start,\n          'v-icon--end': props.end\n        }, props.class],\n        \"style\": [{\n          '--v-icon-opacity': props.opacity\n        }, !sizeClasses.value ? {\n          fontSize: convertToUnit(props.size),\n          height: convertToUnit(props.size),\n          width: convertToUnit(props.size)\n        } : undefined, textColorStyles.value, props.style],\n        \"role\": hasClick ? 'button' : undefined,\n        \"aria-hidden\": !hasClick,\n        \"tabindex\": hasClick ? props.disabled ? -1 : 0 : undefined\n      }, {\n        default: () => [slotValue]\n      });\n    });\n    return {};\n  }\n\n});","map":{"version":3,"mappings":"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","names":["useTextColor","makeComponentProps","IconValue","useIcon","makeSizeProps","useSize","makeTagProps","makeThemeProps","useTheme","computed","ref","Text","toRef","convertToUnit","flattenFragments","genericComponent","propsFactory","useRender","makeVIconProps","color","String","disabled","Boolean","start","end","icon","opacity","Number","tag","VIcon","name","props","setup","_ref","attrs","slots","slotIcon","themeClasses","iconData","value","sizeClasses","textColorClasses","textColorStyles","slotValue","default","filter","node","type","children","hasClick","onClick","onClickOnce","class","fontSize","size","height","width","undefined","style"],"sources":["../../../src/components/VIcon/VIcon.tsx"],"sourcesContent":["// Styles\nimport './VIcon.sass'\n\n// Composables\nimport { useTextColor } from '@/composables/color'\nimport { makeComponentProps } from '@/composables/component'\nimport { IconValue, useIcon } from '@/composables/icons'\nimport { makeSizeProps, useSize } from '@/composables/size'\nimport { makeTagProps } from '@/composables/tag'\nimport { makeThemeProps, useTheme } from '@/composables/theme'\n\n// Utilities\nimport { computed, ref, Text, toRef } from 'vue'\nimport { convertToUnit, flattenFragments, genericComponent, propsFactory, useRender } from '@/util'\n\nexport const makeVIconProps = propsFactory({\n  color: String,\n  disabled: Boolean,\n  start: Boolean,\n  end: Boolean,\n  icon: IconValue,\n  opacity: [String, Number],\n\n  ...makeComponentProps(),\n  ...makeSizeProps(),\n  ...makeTagProps({ tag: 'i' }),\n  ...makeThemeProps(),\n}, 'VIcon')\n\nexport const VIcon = genericComponent()({\n  name: 'VIcon',\n\n  props: makeVIconProps(),\n\n  setup (props, { attrs, slots }) {\n    const slotIcon = ref<string>()\n\n    const { themeClasses } = useTheme()\n    const { iconData } = useIcon(computed(() => slotIcon.value || props.icon))\n    const { sizeClasses } = useSize(props)\n    const { textColorClasses, textColorStyles } = useTextColor(toRef(props, 'color'))\n\n    useRender(() => {\n      const slotValue = slots.default?.()\n      if (slotValue) {\n        slotIcon.value = flattenFragments(slotValue).filter(node =>\n          node.type === Text && node.children && typeof node.children === 'string'\n        )[0]?.children as string\n      }\n      const hasClick = !!(attrs.onClick || attrs.onClickOnce)\n\n      return (\n        <iconData.value.component\n          tag={ props.tag }\n          icon={ iconData.value.icon }\n          class={[\n            'v-icon',\n            'notranslate',\n            themeClasses.value,\n            sizeClasses.value,\n            textColorClasses.value,\n            {\n              'v-icon--clickable': hasClick,\n              'v-icon--disabled': props.disabled,\n              'v-icon--start': props.start,\n              'v-icon--end': props.end,\n            },\n            props.class,\n          ]}\n          style={[\n            {\n              '--v-icon-opacity': props.opacity,\n            },\n            !sizeClasses.value ? ({\n              fontSize: convertToUnit(props.size),\n              height: convertToUnit(props.size),\n              width: convertToUnit(props.size),\n            }) : undefined,\n            textColorStyles.value,\n            props.style,\n          ]}\n          role={ hasClick ? 'button' : undefined }\n          aria-hidden={ !hasClick }\n          tabindex={ hasClick ? props.disabled ? -1 : 0 : undefined }\n        >\n          { slotValue }\n        </iconData.value.component>\n      )\n    })\n\n    return {}\n  },\n})\n\nexport type VIcon = InstanceType<typeof VIcon>\n"]},"metadata":{},"sourceType":"module"}