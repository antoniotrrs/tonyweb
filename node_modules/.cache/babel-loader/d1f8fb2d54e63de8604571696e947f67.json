{"ast":null,"code":"import _slicedToArray from \"/Users/antoniotorres/Documents/tony/tony/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.split.js\";\n// Utilities\nimport { includes } from \"./helpers.js\";\nvar block = ['top', 'bottom'];\nvar inline = ['start', 'end', 'left', 'right'];\n/** Parse a raw anchor string into an object */\n\nexport function parseAnchor(anchor, isRtl) {\n  var _anchor$split = anchor.split(' '),\n      _anchor$split2 = _slicedToArray(_anchor$split, 2),\n      side = _anchor$split2[0],\n      align = _anchor$split2[1];\n\n  if (!align) {\n    align = includes(block, side) ? 'start' : includes(inline, side) ? 'top' : 'center';\n  }\n\n  return {\n    side: toPhysical(side, isRtl),\n    align: toPhysical(align, isRtl)\n  };\n}\nexport function toPhysical(str, isRtl) {\n  if (str === 'start') return isRtl ? 'right' : 'left';\n  if (str === 'end') return isRtl ? 'left' : 'right';\n  return str;\n}\nexport function flipSide(anchor) {\n  return {\n    side: {\n      center: 'center',\n      top: 'bottom',\n      bottom: 'top',\n      left: 'right',\n      right: 'left'\n    }[anchor.side],\n    align: anchor.align\n  };\n}\nexport function flipAlign(anchor) {\n  return {\n    side: anchor.side,\n    align: {\n      center: 'center',\n      top: 'bottom',\n      bottom: 'top',\n      left: 'right',\n      right: 'left'\n    }[anchor.align]\n  };\n}\nexport function flipCorner(anchor) {\n  return {\n    side: anchor.align,\n    align: anchor.side\n  };\n}\nexport function getAxis(anchor) {\n  return includes(block, anchor.side) ? 'y' : 'x';\n}","map":{"version":3,"mappings":";;;AAAA;AAAA,SACSA,QADT,QACiB,cADjB;AAGA,IAAMC,KAAK,GAAG,CAAC,KAAD,EAAQ,QAAR,CAAd;AACA,IAAMC,MAAM,GAAG,CAAC,OAAD,EAAU,KAAV,EAAiB,MAAjB,EAAyB,OAAzB,CAAf;AAeA;;AACA,OAAO,SAASC,WAAT,CAAsBC,MAAtB,EAAsCC,KAAtC,EAAsD;AAC3D,sBAAoBD,MAAM,CAACE,KAAPF,CAAa,GAAbA,CAApB;AAAA;AAAA,MAAKG,IAAL;AAAA,MAAWC,KAAX;;AACA,MAAI,CAACA,KAAL,EAAY;AACVA,SAAK,GACHR,QAAQ,CAACC,KAAD,EAAQM,IAAR,CAARP,GAAwB,OAAxBA,GACEA,QAAQ,CAACE,MAAD,EAASK,IAAT,CAARP,GAAyB,KAAzBA,GACA,QAHJQ;AAIF;;AAEA,SAAO;AACLD,QAAI,EAAEE,UAAU,CAACF,IAAD,EAAOF,KAAP,CADX;AAELG,SAAK,EAAEC,UAAU,CAACD,KAAD,EAAQH,KAAR;AAFZ,GAAP;AAIF;AAEA,OAAO,SAASI,UAAT,CAAqBC,GAArB,EAAuDL,KAAvD,EAAuE;AAC5E,MAAIK,GAAG,KAAK,OAAZ,EAAqB,OAAOL,KAAK,GAAG,OAAH,GAAa,MAAzB;AACrB,MAAIK,GAAG,KAAK,KAAZ,EAAmB,OAAOL,KAAK,GAAG,MAAH,GAAY,OAAxB;AACnB,SAAOK,GAAP;AACF;AAEA,OAAO,SAASC,QAAT,CAAmBP,MAAnB,EAAyC;AAC9C,SAAO;AACLG,QAAI,EAAE;AACJK,YAAM,EAAE,QADJ;AAEJC,SAAG,EAAE,QAFD;AAGJC,YAAM,EAAE,KAHJ;AAIJC,UAAI,EAAE,OAJF;AAKJC,WAAK,EAAE;AALH,MAMJZ,MAAM,CAACG,IANH,CADD;AAQLC,SAAK,EAAEJ,MAAM,CAACI;AART,GAAP;AAUF;AAEA,OAAO,SAASS,SAAT,CAAoBb,MAApB,EAA0C;AAC/C,SAAO;AACLG,QAAI,EAAEH,MAAM,CAACG,IADR;AAELC,SAAK,EAAE;AACLI,YAAM,EAAE,QADH;AAELC,SAAG,EAAE,QAFA;AAGLC,YAAM,EAAE,KAHH;AAILC,UAAI,EAAE,OAJD;AAKLC,WAAK,EAAE;AALF,MAMLZ,MAAM,CAACI,KANF;AAFF,GAAP;AAUF;AAEA,OAAO,SAASU,UAAT,CAAqBd,MAArB,EAA2C;AAChD,SAAO;AACLG,QAAI,EAAEH,MAAM,CAACI,KADR;AAELA,SAAK,EAAEJ,MAAM,CAACG;AAFT,GAAP;AAIF;AAEA,OAAO,SAASY,OAAT,CAAkBf,MAAlB,EAAwC;AAC7C,SAAOJ,QAAQ,CAACC,KAAD,EAAQG,MAAM,CAACG,IAAf,CAARP,GAA+B,GAA/BA,GAAqC,GAA5C;AACF","names":["includes","block","inline","parseAnchor","anchor","isRtl","split","side","align","toPhysical","str","flipSide","center","top","bottom","left","right","flipAlign","flipCorner","getAxis"],"sources":["../../src/util/anchor.ts"],"sourcesContent":["// Utilities\nimport { includes } from '@/util/helpers'\n\nconst block = ['top', 'bottom'] as const\nconst inline = ['start', 'end', 'left', 'right'] as const\ntype Tblock = typeof block[number]\ntype Tinline = typeof inline[number]\nexport type Anchor =\n  | Tblock\n  | Tinline\n  | 'center'\n  | 'center center'\n  | `${Tblock} ${Tinline | 'center'}`\n  | `${Tinline} ${Tblock | 'center'}`\nexport type ParsedAnchor =\n  | { side: 'center', align: 'center' }\n  | { side: Tblock, align: 'left' | 'right' | 'center' }\n  | { side: 'left' | 'right', align: Tblock | 'center' }\n\n/** Parse a raw anchor string into an object */\nexport function parseAnchor (anchor: Anchor, isRtl: boolean) {\n  let [side, align] = anchor.split(' ') as [Tblock | Tinline | 'center', Tblock | Tinline | 'center' | undefined]\n  if (!align) {\n    align =\n      includes(block, side) ? 'start'\n      : includes(inline, side) ? 'top'\n      : 'center'\n  }\n\n  return {\n    side: toPhysical(side, isRtl),\n    align: toPhysical(align, isRtl),\n  } as ParsedAnchor\n}\n\nexport function toPhysical (str: 'center' | Tblock | Tinline, isRtl: boolean) {\n  if (str === 'start') return isRtl ? 'right' : 'left'\n  if (str === 'end') return isRtl ? 'left' : 'right'\n  return str\n}\n\nexport function flipSide (anchor: ParsedAnchor) {\n  return {\n    side: {\n      center: 'center',\n      top: 'bottom',\n      bottom: 'top',\n      left: 'right',\n      right: 'left',\n    }[anchor.side],\n    align: anchor.align,\n  } as ParsedAnchor\n}\n\nexport function flipAlign (anchor: ParsedAnchor) {\n  return {\n    side: anchor.side,\n    align: {\n      center: 'center',\n      top: 'bottom',\n      bottom: 'top',\n      left: 'right',\n      right: 'left',\n    }[anchor.align],\n  } as ParsedAnchor\n}\n\nexport function flipCorner (anchor: ParsedAnchor) {\n  return {\n    side: anchor.align,\n    align: anchor.side,\n  } as ParsedAnchor\n}\n\nexport function getAxis (anchor: ParsedAnchor) {\n  return includes(block, anchor.side) ? 'y' : 'x'\n}\n"]},"metadata":{},"sourceType":"module"}