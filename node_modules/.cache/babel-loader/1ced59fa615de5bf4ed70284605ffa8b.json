{"ast":null,"code":"import { createVNode as _createVNode } from \"vue\"; // Components\n\nimport { VExpansionPanelSymbol } from \"./shared.js\";\nimport { makeVExpansionPanelTextProps, VExpansionPanelText } from \"./VExpansionPanelText.js\";\nimport { makeVExpansionPanelTitleProps, VExpansionPanelTitle } from \"./VExpansionPanelTitle.js\";\nimport { VDefaultsProvider } from \"../VDefaultsProvider/index.js\"; // Composables\n\nimport { useBackgroundColor } from \"../../composables/color.js\";\nimport { makeElevationProps, useElevation } from \"../../composables/elevation.js\";\nimport { makeGroupItemProps, useGroupItem } from \"../../composables/group.js\";\nimport { makeRoundedProps, useRounded } from \"../../composables/rounded.js\";\nimport { makeTagProps } from \"../../composables/tag.js\"; // Utilities\n\nimport { computed, provide } from 'vue';\nimport { genericComponent, propsFactory, useRender } from \"../../util/index.js\";\nexport const makeVExpansionPanelProps = propsFactory({\n  title: String,\n  text: String,\n  bgColor: String,\n  ...makeElevationProps(),\n  ...makeGroupItemProps(),\n  ...makeRoundedProps(),\n  ...makeTagProps(),\n  ...makeVExpansionPanelTitleProps(),\n  ...makeVExpansionPanelTextProps()\n}, 'VExpansionPanel');\nexport const VExpansionPanel = genericComponent()({\n  name: 'VExpansionPanel',\n  props: makeVExpansionPanelProps(),\n  emits: {\n    'group:selected': val => true\n  },\n\n  setup(props, _ref) {\n    let {\n      slots\n    } = _ref;\n    const groupItem = useGroupItem(props, VExpansionPanelSymbol);\n    const {\n      backgroundColorClasses,\n      backgroundColorStyles\n    } = useBackgroundColor(props, 'bgColor');\n    const {\n      elevationClasses\n    } = useElevation(props);\n    const {\n      roundedClasses\n    } = useRounded(props);\n    const isDisabled = computed(() => groupItem?.disabled.value || props.disabled);\n    const selectedIndices = computed(() => groupItem.group.items.value.reduce((arr, item, index) => {\n      if (groupItem.group.selected.value.includes(item.id)) arr.push(index);\n      return arr;\n    }, []));\n    const isBeforeSelected = computed(() => {\n      const index = groupItem.group.items.value.findIndex(item => item.id === groupItem.id);\n      return !groupItem.isSelected.value && selectedIndices.value.some(selectedIndex => selectedIndex - index === 1);\n    });\n    const isAfterSelected = computed(() => {\n      const index = groupItem.group.items.value.findIndex(item => item.id === groupItem.id);\n      return !groupItem.isSelected.value && selectedIndices.value.some(selectedIndex => selectedIndex - index === -1);\n    });\n    provide(VExpansionPanelSymbol, groupItem);\n    useRender(() => {\n      const hasText = !!(slots.text || props.text);\n      const hasTitle = !!(slots.title || props.title);\n      const expansionPanelTitleProps = VExpansionPanelTitle.filterProps(props);\n      const expansionPanelTextProps = VExpansionPanelText.filterProps(props);\n      return _createVNode(props.tag, {\n        \"class\": ['v-expansion-panel', {\n          'v-expansion-panel--active': groupItem.isSelected.value,\n          'v-expansion-panel--before-active': isBeforeSelected.value,\n          'v-expansion-panel--after-active': isAfterSelected.value,\n          'v-expansion-panel--disabled': isDisabled.value\n        }, roundedClasses.value, backgroundColorClasses.value, props.class],\n        \"style\": [backgroundColorStyles.value, props.style]\n      }, {\n        default: () => [_createVNode(\"div\", {\n          \"class\": ['v-expansion-panel__shadow', ...elevationClasses.value]\n        }, null), _createVNode(VDefaultsProvider, {\n          \"defaults\": {\n            VExpansionPanelTitle: { ...expansionPanelTitleProps\n            },\n            VExpansionPanelText: { ...expansionPanelTextProps\n            }\n          }\n        }, {\n          default: () => [hasTitle && _createVNode(VExpansionPanelTitle, {\n            \"key\": \"title\"\n          }, {\n            default: () => [slots.title ? slots.title() : props.title]\n          }), hasText && _createVNode(VExpansionPanelText, {\n            \"key\": \"text\"\n          }, {\n            default: () => [slots.text ? slots.text() : props.text]\n          }), slots.default?.()]\n        })]\n      });\n    });\n    return {\n      groupItem\n    };\n  }\n\n});","map":{"version":3,"mappings":"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","names":["VExpansionPanelSymbol","makeVExpansionPanelTextProps","VExpansionPanelText","makeVExpansionPanelTitleProps","VExpansionPanelTitle","VDefaultsProvider","useBackgroundColor","makeElevationProps","useElevation","makeGroupItemProps","useGroupItem","makeRoundedProps","useRounded","makeTagProps","computed","provide","genericComponent","propsFactory","useRender","makeVExpansionPanelProps","title","String","text","bgColor","VExpansionPanel","name","props","emits","val","setup","_ref","slots","groupItem","backgroundColorClasses","backgroundColorStyles","elevationClasses","roundedClasses","isDisabled","disabled","value","selectedIndices","group","items","reduce","arr","item","index","selected","includes","id","push","isBeforeSelected","findIndex","isSelected","some","selectedIndex","isAfterSelected","hasText","hasTitle","expansionPanelTitleProps","filterProps","expansionPanelTextProps","class","style","default","_createVNode"],"sources":["../../../src/components/VExpansionPanel/VExpansionPanel.tsx"],"sourcesContent":["// Components\nimport { VExpansionPanelSymbol } from './shared'\nimport { makeVExpansionPanelTextProps, VExpansionPanelText } from './VExpansionPanelText'\nimport { makeVExpansionPanelTitleProps, VExpansionPanelTitle } from './VExpansionPanelTitle'\nimport { VDefaultsProvider } from '@/components/VDefaultsProvider'\n\n// Composables\nimport { useBackgroundColor } from '@/composables/color'\nimport { makeElevationProps, useElevation } from '@/composables/elevation'\nimport { makeGroupItemProps, useGroupItem } from '@/composables/group'\nimport { makeRoundedProps, useRounded } from '@/composables/rounded'\nimport { makeTagProps } from '@/composables/tag'\n\n// Utilities\nimport { computed, provide } from 'vue'\nimport { genericComponent, propsFactory, useRender } from '@/util'\n\nexport const makeVExpansionPanelProps = propsFactory({\n  title: String,\n  text: String,\n  bgColor: String,\n\n  ...makeElevationProps(),\n  ...makeGroupItemProps(),\n  ...makeRoundedProps(),\n  ...makeTagProps(),\n  ...makeVExpansionPanelTitleProps(),\n  ...makeVExpansionPanelTextProps(),\n}, 'VExpansionPanel')\n\nexport type VExpansionPanelSlots = {\n  default: never\n  title: never\n  text: never\n}\n\nexport const VExpansionPanel = genericComponent<VExpansionPanelSlots>()({\n  name: 'VExpansionPanel',\n\n  props: makeVExpansionPanelProps(),\n\n  emits: {\n    'group:selected': (val: { value: boolean }) => true,\n  },\n\n  setup (props, { slots }) {\n    const groupItem = useGroupItem(props, VExpansionPanelSymbol)\n    const { backgroundColorClasses, backgroundColorStyles } = useBackgroundColor(props, 'bgColor')\n    const { elevationClasses } = useElevation(props)\n    const { roundedClasses } = useRounded(props)\n    const isDisabled = computed(() => groupItem?.disabled.value || props.disabled)\n\n    const selectedIndices = computed(() => groupItem.group.items.value.reduce<number[]>((arr, item, index) => {\n      if (groupItem.group.selected.value.includes(item.id)) arr.push(index)\n      return arr\n    }, []))\n\n    const isBeforeSelected = computed(() => {\n      const index = groupItem.group.items.value.findIndex(item => item.id === groupItem.id)\n      return !groupItem.isSelected.value &&\n        selectedIndices.value.some(selectedIndex => selectedIndex - index === 1)\n    })\n\n    const isAfterSelected = computed(() => {\n      const index = groupItem.group.items.value.findIndex(item => item.id === groupItem.id)\n      return !groupItem.isSelected.value &&\n        selectedIndices.value.some(selectedIndex => selectedIndex - index === -1)\n    })\n\n    provide(VExpansionPanelSymbol, groupItem)\n\n    useRender(() => {\n      const hasText = !!(slots.text || props.text)\n      const hasTitle = !!(slots.title || props.title)\n\n      const expansionPanelTitleProps = VExpansionPanelTitle.filterProps(props)\n      const expansionPanelTextProps = VExpansionPanelText.filterProps(props)\n\n      return (\n        <props.tag\n          class={[\n            'v-expansion-panel',\n            {\n              'v-expansion-panel--active': groupItem.isSelected.value,\n              'v-expansion-panel--before-active': isBeforeSelected.value,\n              'v-expansion-panel--after-active': isAfterSelected.value,\n              'v-expansion-panel--disabled': isDisabled.value,\n            },\n            roundedClasses.value,\n            backgroundColorClasses.value,\n            props.class,\n          ]}\n          style={[\n            backgroundColorStyles.value,\n            props.style,\n          ]}\n        >\n          <div\n            class={[\n              'v-expansion-panel__shadow',\n              ...elevationClasses.value,\n            ]}\n          />\n\n          <VDefaultsProvider\n            defaults={{\n              VExpansionPanelTitle: {\n                ...expansionPanelTitleProps,\n              },\n              VExpansionPanelText: {\n                ...expansionPanelTextProps,\n              },\n            }}\n          >\n            { hasTitle && (\n              <VExpansionPanelTitle key=\"title\">\n                { slots.title ? slots.title() : props.title }\n              </VExpansionPanelTitle>\n            )}\n\n            { hasText && (\n              <VExpansionPanelText key=\"text\">\n                { slots.text ? slots.text() : props.text }\n              </VExpansionPanelText>\n            )}\n\n            { slots.default?.() }\n          </VDefaultsProvider>\n        </props.tag>\n      )\n    })\n\n    return {\n      groupItem,\n    }\n  },\n})\n\nexport type VExpansionPanel = InstanceType<typeof VExpansionPanel>\n"]},"metadata":{},"sourceType":"module"}