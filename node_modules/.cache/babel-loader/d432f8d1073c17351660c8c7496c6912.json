{"ast":null,"code":"import _objectSpread from \"/Users/antoniotorres/Documents/tony/tonyweb/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport { createVNode as _createVNode, vShow as _vShow, withDirectives as _withDirectives } from \"vue\"; // Components\n\nimport { VExpansionPanelSymbol } from \"./shared.js\";\nimport { VExpandTransition } from \"../transitions/index.js\"; // Composables\n\nimport { makeComponentProps } from \"../../composables/component.js\";\nimport { makeLazyProps, useLazy } from \"../../composables/lazy.js\"; // Utilities\n\nimport { inject } from 'vue';\nimport { genericComponent, propsFactory, useRender } from \"../../util/index.js\";\nexport var makeVExpansionPanelTextProps = propsFactory(_objectSpread(_objectSpread({}, makeComponentProps()), makeLazyProps()), 'VExpansionPanelText');\nexport var VExpansionPanelText = genericComponent()({\n  name: 'VExpansionPanelText',\n  props: makeVExpansionPanelTextProps(),\n  setup: function setup(props, _ref) {\n    var slots = _ref.slots;\n    var expansionPanel = inject(VExpansionPanelSymbol);\n    if (!expansionPanel) throw new Error('[Vuetify] v-expansion-panel-text needs to be placed inside v-expansion-panel');\n\n    var _useLazy = useLazy(props, expansionPanel.isSelected),\n        hasContent = _useLazy.hasContent,\n        onAfterLeave = _useLazy.onAfterLeave;\n\n    useRender(function () {\n      return _createVNode(VExpandTransition, {\n        \"onAfterLeave\": onAfterLeave\n      }, {\n        default: function _default() {\n          var _slots$default;\n\n          return [_withDirectives(_createVNode(\"div\", {\n            \"class\": ['v-expansion-panel-text', props.class],\n            \"style\": props.style\n          }, [slots.default && hasContent.value && _createVNode(\"div\", {\n            \"class\": \"v-expansion-panel-text__wrapper\"\n          }, [(_slots$default = slots.default) === null || _slots$default === void 0 ? void 0 : _slots$default.call(slots)])]), [[_vShow, expansionPanel.isSelected.value]])];\n        }\n      });\n    });\n    return {};\n  }\n});","map":{"version":3,"mappings":";;uGAAA;;AAAA,SACSA,qBADT,QAC8B,aAD9B;AAC8B,SACrBC,iBADqB,QACJ,yBADI,C,CAG9B;;AAAA,SACSC,kBADT,QAC2B,gCAD3B;AAC2B,SAClBC,aADkB,EACHC,OADG,QACI,2BADJ,C,CAG3B;;AACA,SAASC,MAAT,QAAuB,KAAvB;AAA4B,SACnBC,gBADmB,EACDC,YADC,EACaC,SADb,QACsB,qBADtB;AAG5B,OAAO,IAAMC,4BAA4B,GAAGF,YAAY,iCACnDL,kBAAkB,EADiC,GAEnDC,aAAa,EAFsC,GAGrD,qBAHqD,CAAjD;AAKP,OAAO,IAAMO,mBAAmB,GAAGJ,gBAAgB,GAAG;AACpDK,MAAI,EAAE,qBAD8C;AAGpDC,OAAK,EAAEH,4BAA4B,EAHiB;AAKpDI,OALoD,iBAK7CD,KAL6C,EAKxCE,IALwC,EAK3B;AAAA,QAATC,KAAS,GAAFD,IAAE,CAATC,KAAS;AACvB,QAAMC,cAAc,GAAGX,MAAM,CAACL,qBAAD,CAA7B;AAEA,QAAI,CAACgB,cAAL,EAAqB,MAAM,IAAIC,KAAJ,CAAU,8EAAV,CAAN;;AAErB,mBAAqCb,OAAO,CAACQ,KAAD,EAAQI,cAAc,CAACE,UAAvB,CAA5C;AAAA,QAAQC,UAAR,YAAQA,UAAR;AAAA,QAAoBC,YAApB,YAAoBA,YAApB;;AAEAZ,aAAS,CAAC;AAAA;AAAA,wBAC0BY;AAD1B,SACsC;AAAAC;AAAAA;;AAAAA;AAAA,qBAEnC,CACL,wBADK,EAELT,KAAK,CAACU,KAFD,CAFmC;AAKzC,qBACOV,KAAK,CAACW;AAN4B,aAMvB,CAGjBR,KAAK,CAACM,OAANN,IAAiBI,UAAU,CAACK,KAA5BT,IAAiCU;AAAA;AAAA,gCAE7BV,KAAK,CAACM,OAFuB,mDAE7BN,yBAAK,CAFwB,EAHhB,CANuB,GAazC,UANQC,cAAc,CAACE,UAAfF,CAA0BQ,KAMlC,EAbyC;AAAAH;AAAA,OADtC;AAAA,KAAD,CAATb;AAmBA,WAAO,EAAP;AACF;AAhCoD,CAAH,CAA5C","names":["VExpansionPanelSymbol","VExpandTransition","makeComponentProps","makeLazyProps","useLazy","inject","genericComponent","propsFactory","useRender","makeVExpansionPanelTextProps","VExpansionPanelText","name","props","setup","_ref","slots","expansionPanel","Error","isSelected","hasContent","onAfterLeave","default","class","style","value","_createVNode"],"sources":["../../../src/components/VExpansionPanel/VExpansionPanelText.tsx"],"sourcesContent":["// Components\nimport { VExpansionPanelSymbol } from './shared'\nimport { VExpandTransition } from '@/components/transitions'\n\n// Composables\nimport { makeComponentProps } from '@/composables/component'\nimport { makeLazyProps, useLazy } from '@/composables/lazy'\n\n// Utilities\nimport { inject } from 'vue'\nimport { genericComponent, propsFactory, useRender } from '@/util'\n\nexport const makeVExpansionPanelTextProps = propsFactory({\n  ...makeComponentProps(),\n  ...makeLazyProps(),\n}, 'VExpansionPanelText')\n\nexport const VExpansionPanelText = genericComponent()({\n  name: 'VExpansionPanelText',\n\n  props: makeVExpansionPanelTextProps(),\n\n  setup (props, { slots }) {\n    const expansionPanel = inject(VExpansionPanelSymbol)\n\n    if (!expansionPanel) throw new Error('[Vuetify] v-expansion-panel-text needs to be placed inside v-expansion-panel')\n\n    const { hasContent, onAfterLeave } = useLazy(props, expansionPanel.isSelected)\n\n    useRender(() => (\n      <VExpandTransition onAfterLeave={ onAfterLeave }>\n        <div\n          class={[\n            'v-expansion-panel-text',\n            props.class,\n          ]}\n          style={ props.style }\n          v-show={ expansionPanel.isSelected.value }\n        >\n          { slots.default && hasContent.value && (\n            <div class=\"v-expansion-panel-text__wrapper\">\n              { slots.default?.() }\n            </div>\n          )}\n        </div>\n      </VExpandTransition>\n    ))\n\n    return {}\n  },\n})\n\nexport type VExpansionPanelText = InstanceType<typeof VExpansionPanelText>\n"]},"metadata":{},"sourceType":"module"}