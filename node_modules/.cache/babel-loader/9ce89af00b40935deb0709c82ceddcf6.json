{"ast":null,"code":"import _objectSpread from \"/Users/antoniotorres/Documents/tony/tonyweb/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.regexp.sticky.js\";\nimport { createVNode as _createVNode } from \"vue\"; // Composables\n\nimport { useTextColor } from \"../../composables/color.js\";\nimport { makeComponentProps } from \"../../composables/component.js\";\nimport { makeTagProps } from \"../../composables/tag.js\"; // Utilities\n\nimport { toRef } from 'vue';\nimport { genericComponent, propsFactory, useRender } from \"../../util/index.js\";\nexport var makeVListSubheaderProps = propsFactory(_objectSpread(_objectSpread({\n  color: String,\n  inset: Boolean,\n  sticky: Boolean,\n  title: String\n}, makeComponentProps()), makeTagProps()), 'VListSubheader');\nexport var VListSubheader = genericComponent()({\n  name: 'VListSubheader',\n  props: makeVListSubheaderProps(),\n  setup: function setup(props, _ref) {\n    var slots = _ref.slots;\n\n    var _useTextColor = useTextColor(toRef(props, 'color')),\n        textColorClasses = _useTextColor.textColorClasses,\n        textColorStyles = _useTextColor.textColorStyles;\n\n    useRender(function () {\n      var hasText = !!(slots.default || props.title);\n      return _createVNode(props.tag, {\n        \"class\": ['v-list-subheader', {\n          'v-list-subheader--inset': props.inset,\n          'v-list-subheader--sticky': props.sticky\n        }, textColorClasses.value, props.class],\n        \"style\": [{\n          textColorStyles: textColorStyles\n        }, props.style]\n      }, {\n        default: function _default() {\n          var _slots$default, _slots$default2;\n\n          return [hasText && _createVNode(\"div\", {\n            \"class\": \"v-list-subheader__text\"\n          }, [(_slots$default = (_slots$default2 = slots.default) === null || _slots$default2 === void 0 ? void 0 : _slots$default2.call(slots)) !== null && _slots$default !== void 0 ? _slots$default : props.title])];\n        }\n      });\n    });\n    return {};\n  }\n});","map":{"version":3,"mappings":";;mDAAA;;AAAA,SACSA,YADT,QACqB,4BADrB;AACqB,SACZC,kBADY,QACM,gCADN;AACM,SAClBC,YADkB,QACN,0BADM,C,CAG3B;;AACA,SAASC,KAAT,QAAsB,KAAtB;AAA2B,SAClBC,gBADkB,EACAC,YADA,EACcC,SADd,QACuB,qBADvB;AAG3B,OAAO,IAAMC,uBAAuB,GAAGF,YAAY;AACjDG,OAAK,EAAEC,MAD0C;AAEjDC,OAAK,EAAEC,OAF0C;AAGjDC,QAAM,EAAED,OAHyC;AAIjDE,OAAK,EAAEJ;AAJ0C,GAM9CR,kBAAkB,EAN4B,GAO9CC,YAAY,EAPkC,GAQhD,gBARgD,CAA5C;AAUP,OAAO,IAAMY,cAAc,GAAGV,gBAAgB,GAAG;AAC/CW,MAAI,EAAE,gBADyC;AAG/CC,OAAK,EAAET,uBAAuB,EAHiB;AAK/CU,OAL+C,iBAKxCD,KALwC,EAKnCE,IALmC,EAKtB;AAAA,QAATC,KAAS,GAAFD,IAAE,CAATC,KAAS;;AACvB,wBAA8CnB,YAAY,CAACG,KAAK,CAACa,KAAD,EAAQ,OAAR,CAAN,CAA1D;AAAA,QAAQI,gBAAR,iBAAQA,gBAAR;AAAA,QAA0BC,eAA1B,iBAA0BA,eAA1B;;AAEAf,aAAS,CAAC,YAAM;AACd,UAAMgB,OAAO,GAAG,CAAC,EAAEH,KAAK,CAACI,OAANJ,IAAiBH,KAAK,CAACH,KAAzB,CAAjB;AAEA;AAAA,iBAEW,CACL,kBADK,EAEL;AACE,qCAA2BG,KAAK,CAACN,KADnC;AAEE,sCAA4BM,KAAK,CAACJ;AAFpC,SAFK,EAMLQ,gBAAgB,CAACI,KANZ,EAOLR,KAAK,CAACS,KAPD,CAFX;AAUK,iBACM,CACL;AAAEJ;AAAF,SADK,EAELL,KAAK,CAACU,KAFD;AAXX,SAcK;AAAAH;AAAAA;;AAAAA,kBAECD,OAAO;AAAA;AAAA,mDAEHH,KAAK,CAACI,OAFH,oDAEHJ,0BAAK,CAFF,2DAEkBH,KAAK,CAACH,KAFxB,EAFR;AAAAU;AAAA,OAdL;AAuBD,KA1BQ,CAATjB;AA4BA,WAAO,EAAP;AACF;AArC+C,CAAH,CAAvC","names":["useTextColor","makeComponentProps","makeTagProps","toRef","genericComponent","propsFactory","useRender","makeVListSubheaderProps","color","String","inset","Boolean","sticky","title","VListSubheader","name","props","setup","_ref","slots","textColorClasses","textColorStyles","hasText","default","value","class","style"],"sources":["../../../src/components/VList/VListSubheader.tsx"],"sourcesContent":["// Composables\nimport { useTextColor } from '@/composables/color'\nimport { makeComponentProps } from '@/composables/component'\nimport { makeTagProps } from '@/composables/tag'\n\n// Utilities\nimport { toRef } from 'vue'\nimport { genericComponent, propsFactory, useRender } from '@/util'\n\nexport const makeVListSubheaderProps = propsFactory({\n  color: String,\n  inset: Boolean,\n  sticky: Boolean,\n  title: String,\n\n  ...makeComponentProps(),\n  ...makeTagProps(),\n}, 'VListSubheader')\n\nexport const VListSubheader = genericComponent()({\n  name: 'VListSubheader',\n\n  props: makeVListSubheaderProps(),\n\n  setup (props, { slots }) {\n    const { textColorClasses, textColorStyles } = useTextColor(toRef(props, 'color'))\n\n    useRender(() => {\n      const hasText = !!(slots.default || props.title)\n\n      return (\n        <props.tag\n          class={[\n            'v-list-subheader',\n            {\n              'v-list-subheader--inset': props.inset,\n              'v-list-subheader--sticky': props.sticky,\n            },\n            textColorClasses.value,\n            props.class,\n          ]}\n          style={[\n            { textColorStyles },\n            props.style,\n          ]}\n        >\n          { hasText && (\n            <div class=\"v-list-subheader__text\">\n              { slots.default?.() ?? props.title }\n            </div>\n          )}\n        </props.tag>\n      )\n    })\n\n    return {}\n  },\n})\n\nexport type VListSubheader = InstanceType<typeof VListSubheader>\n"]},"metadata":{},"sourceType":"module"}