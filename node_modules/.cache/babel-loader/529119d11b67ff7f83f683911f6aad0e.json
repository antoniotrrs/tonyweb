{"ast":null,"code":"import { Fragment as _Fragment, createVNode as _createVNode, mergeProps as _mergeProps } from \"vue\"; // Composables\n\nimport { makeComponentProps } from \"../../composables/component.js\";\nimport { useResizeObserver } from \"../../composables/resizeObserver.js\"; // Utilities\n\nimport { watch } from 'vue';\nimport { genericComponent, propsFactory, useRender } from \"../../util/index.js\"; // Types\n\nexport const makeVVirtualScrollItemProps = propsFactory({\n  renderless: Boolean,\n  ...makeComponentProps()\n}, 'VVirtualScrollItem');\nexport const VVirtualScrollItem = genericComponent()({\n  name: 'VVirtualScrollItem',\n  inheritAttrs: false,\n  props: makeVVirtualScrollItemProps(),\n  emits: {\n    'update:height': height => true\n  },\n\n  setup(props, _ref) {\n    let {\n      attrs,\n      emit,\n      slots\n    } = _ref;\n    const {\n      resizeRef,\n      contentRect\n    } = useResizeObserver(undefined, 'border');\n    watch(() => contentRect.value?.height, height => {\n      if (height != null) emit('update:height', height);\n    });\n    useRender(() => props.renderless ? _createVNode(_Fragment, null, [slots.default?.({\n      itemRef: resizeRef\n    })]) : _createVNode(\"div\", _mergeProps({\n      \"ref\": resizeRef,\n      \"class\": ['v-virtual-scroll__item', props.class],\n      \"style\": props.style\n    }, attrs), [slots.default?.()]));\n  }\n\n});","map":{"version":3,"mappings":"qGAAA;;AAAA,SACSA,kBADT,QAC2B,gCAD3B;AAC2B,SAClBC,iBADkB,QACD,qCADC,C,CAG3B;;AACA,SAASC,KAAT,QAAsB,KAAtB;AAA2B,SAClBC,gBADkB,EACAC,YADA,EACcC,SADd,QACuB,qBADvB,C,CAG3B;;AAGA,OAAO,MAAMC,2BAA2B,GAAGF,YAAY,CAAC;AACtDG,YAAU,EAAEC,OAD0C;AAGtD,KAAGR,kBAAkB;AAHiC,CAAD,EAIpD,oBAJoD,CAAhD;AAMP,OAAO,MAAMS,kBAAkB,GAAGN,gBAAgB,GASD;AAC/CO,MAAI,EAAE,oBADyC;AAG/CC,cAAY,EAAE,KAHiC;AAK/CC,OAAK,EAAEN,2BAA2B,EALa;AAO/CO,OAAK,EAAE;AACL,qBAAkBC,MAAc,IAAK;AADhC,GAPwC;;AAW/CC,OAAKA,CAAEH,KAAFG,EAAOC,IAAPD,EAAiC;AAAA,QAAxB;AAAEE,WAAF;AAASC,UAAT;AAAeC;AAAf,QAAsBH,IAAE;AACpC,UAAM;AAAEI,eAAF;AAAaC;AAAb,QAA6BpB,iBAAiB,CAACqB,SAAD,EAAY,QAAZ,CAApD;AAEApB,SAAK,CAAC,MAAMmB,WAAW,CAACE,KAAZF,EAAmBP,MAA1B,EAAkCA,MAAM,IAAI;AAC/C,UAAIA,MAAM,IAAI,IAAd,EAAoBI,IAAI,CAAC,eAAD,EAAkBJ,MAAlB,CAAJI;AACrB,KAFI,CAALhB;AAIAG,aAAS,CAAC,MAAMO,KAAK,CAACL,UAANK,GAAgBY,+BAE1BL,KAAK,CAACM,OAANN,GAAgB;AAAEO,aAAO,EAAEN;AAAX,KAAhBD,CAF0B,EAAhBP,GAE6BY;AAAA,aAInCJ,SAJmC;AAI1B,eACR,CACL,wBADK,EAELR,KAAK,CAACe,KAFD,CALkC;AAQxC,eACOf,KAAK,CAACgB;AAT2B,OAUpCX,KAVoC,GAU/B,CAEPE,KAAK,CAACM,OAANN,IAFO,CAV+B,CAFpC,CAATd;AAiBF;;AAnC+C,CATC,CAA3C","names":["makeComponentProps","useResizeObserver","watch","genericComponent","propsFactory","useRender","makeVVirtualScrollItemProps","renderless","Boolean","VVirtualScrollItem","name","inheritAttrs","props","emits","height","setup","_ref","attrs","emit","slots","resizeRef","contentRect","undefined","value","_createVNode","default","itemRef","class","style"],"sources":["../../../src/components/VVirtualScroll/VVirtualScrollItem.tsx"],"sourcesContent":["// Composables\nimport { makeComponentProps } from '@/composables/component'\nimport { useResizeObserver } from '@/composables/resizeObserver'\n\n// Utilities\nimport { watch } from 'vue'\nimport { genericComponent, propsFactory, useRender } from '@/util'\n\n// Types\nimport type { GenericProps, TemplateRef } from '@/util'\n\nexport const makeVVirtualScrollItemProps = propsFactory({\n  renderless: Boolean,\n\n  ...makeComponentProps(),\n}, 'VVirtualScrollItem')\n\nexport const VVirtualScrollItem = genericComponent<new <Renderless extends boolean = false>(\n  props: {\n    renderless?: Renderless\n  },\n  slots: {\n    default: Renderless extends true ? {\n      itemRef: TemplateRef\n    } : never\n  }\n) => GenericProps<typeof props, typeof slots>>()({\n  name: 'VVirtualScrollItem',\n\n  inheritAttrs: false,\n\n  props: makeVVirtualScrollItemProps(),\n\n  emits: {\n    'update:height': (height: number) => true,\n  },\n\n  setup (props, { attrs, emit, slots }) {\n    const { resizeRef, contentRect } = useResizeObserver(undefined, 'border')\n\n    watch(() => contentRect.value?.height, height => {\n      if (height != null) emit('update:height', height)\n    })\n\n    useRender(() => props.renderless ? (\n      <>\n        { slots.default?.({ itemRef: resizeRef }) }\n      </>\n    ) : (\n      <div\n        ref={ resizeRef }\n        class={[\n          'v-virtual-scroll__item',\n          props.class,\n        ]}\n        style={ props.style }\n        { ...attrs }\n      >\n        { (slots.default as any)?.() }\n      </div>\n    ))\n  },\n})\n"]},"metadata":{},"sourceType":"module"}