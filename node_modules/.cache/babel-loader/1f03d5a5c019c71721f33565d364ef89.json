{"ast":null,"code":"import { createVNode as _createVNode, Fragment as _Fragment, mergeProps as _mergeProps } from \"vue\"; // Components\n\nimport { VDataTableGroupHeaderRow } from \"./VDataTableGroupHeaderRow.js\";\nimport { VDataTableRow } from \"./VDataTableRow.js\"; // Composables\n\nimport { useExpanded } from \"./composables/expand.js\";\nimport { useGroupBy } from \"./composables/group.js\";\nimport { useHeaders } from \"./composables/headers.js\";\nimport { useSelection } from \"./composables/select.js\";\nimport { makeDisplayProps, useDisplay } from \"../../composables/display.js\";\nimport { useLocale } from \"../../composables/locale.js\"; // Utilities\n\nimport { Fragment, mergeProps } from 'vue';\nimport { genericComponent, getPrefixedEventHandlers, propsFactory, useRender } from \"../../util/index.js\"; // Types\n\nexport const makeVDataTableRowsProps = propsFactory({\n  loading: [Boolean, String],\n  loadingText: {\n    type: String,\n    default: '$vuetify.dataIterator.loadingText'\n  },\n  hideNoData: Boolean,\n  items: {\n    type: Array,\n    default: () => []\n  },\n  noDataText: {\n    type: String,\n    default: '$vuetify.noDataText'\n  },\n  rowProps: [Object, Function],\n  cellProps: [Object, Function],\n  ...makeDisplayProps()\n}, 'VDataTableRows');\nexport const VDataTableRows = genericComponent()({\n  name: 'VDataTableRows',\n  inheritAttrs: false,\n  props: makeVDataTableRowsProps(),\n\n  setup(props, _ref) {\n    let {\n      attrs,\n      slots\n    } = _ref;\n    const {\n      columns\n    } = useHeaders();\n    const {\n      expandOnClick,\n      toggleExpand,\n      isExpanded\n    } = useExpanded();\n    const {\n      isSelected,\n      toggleSelect\n    } = useSelection();\n    const {\n      toggleGroup,\n      isGroupOpen\n    } = useGroupBy();\n    const {\n      t\n    } = useLocale();\n    const {\n      mobile\n    } = useDisplay(props);\n    useRender(() => {\n      if (props.loading && (!props.items.length || slots.loading)) {\n        return _createVNode(\"tr\", {\n          \"class\": \"v-data-table-rows-loading\",\n          \"key\": \"loading\"\n        }, [_createVNode(\"td\", {\n          \"colspan\": columns.value.length\n        }, [slots.loading?.() ?? t(props.loadingText)])]);\n      }\n\n      if (!props.loading && !props.items.length && !props.hideNoData) {\n        return _createVNode(\"tr\", {\n          \"class\": \"v-data-table-rows-no-data\",\n          \"key\": \"no-data\"\n        }, [_createVNode(\"td\", {\n          \"colspan\": columns.value.length\n        }, [slots['no-data']?.() ?? t(props.noDataText)])]);\n      }\n\n      return _createVNode(_Fragment, null, [props.items.map((item, index) => {\n        if (item.type === 'group') {\n          const slotProps = {\n            index,\n            item,\n            columns: columns.value,\n            isExpanded,\n            toggleExpand,\n            isSelected,\n            toggleSelect,\n            toggleGroup,\n            isGroupOpen\n          };\n          return slots['group-header'] ? slots['group-header'](slotProps) : _createVNode(VDataTableGroupHeaderRow, _mergeProps({\n            \"key\": `group-header_${item.id}`,\n            \"item\": item\n          }, getPrefixedEventHandlers(attrs, ':group-header', () => slotProps)), slots);\n        }\n\n        const slotProps = {\n          index,\n          item: item.raw,\n          internalItem: item,\n          columns: columns.value,\n          isExpanded,\n          toggleExpand,\n          isSelected,\n          toggleSelect\n        };\n        const itemSlotProps = { ...slotProps,\n          props: mergeProps({\n            key: `item_${item.key ?? item.index}`,\n            onClick: expandOnClick.value ? () => {\n              toggleExpand(item);\n            } : undefined,\n            index,\n            item,\n            cellProps: props.cellProps,\n            mobile: mobile.value\n          }, getPrefixedEventHandlers(attrs, ':row', () => slotProps), typeof props.rowProps === 'function' ? props.rowProps({\n            item: slotProps.item,\n            index: slotProps.index,\n            internalItem: slotProps.internalItem\n          }) : props.rowProps)\n        };\n        return _createVNode(_Fragment, {\n          \"key\": itemSlotProps.props.key\n        }, [slots.item ? slots.item(itemSlotProps) : _createVNode(VDataTableRow, itemSlotProps.props, slots), isExpanded(item) && slots['expanded-row']?.(slotProps)]);\n      })]);\n    });\n    return {};\n  }\n\n});","map":{"version":3,"mappings":"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","names":["VDataTableGroupHeaderRow","VDataTableRow","useExpanded","useGroupBy","useHeaders","useSelection","makeDisplayProps","useDisplay","useLocale","Fragment","mergeProps","genericComponent","getPrefixedEventHandlers","propsFactory","useRender","makeVDataTableRowsProps","loading","Boolean","String","loadingText","type","default","hideNoData","items","Array","noDataText","rowProps","Object","Function","cellProps","VDataTableRows","name","inheritAttrs","props","setup","_ref","attrs","slots","columns","expandOnClick","toggleExpand","isExpanded","isSelected","toggleSelect","toggleGroup","isGroupOpen","t","mobile","length","value","map","item","index","slotProps","_createVNode","id","raw","internalItem","itemSlotProps","key","onClick","undefined"],"sources":["../../../src/components/VDataTable/VDataTableRows.tsx"],"sourcesContent":["// Components\nimport { VDataTableGroupHeaderRow } from './VDataTableGroupHeaderRow'\nimport { VDataTableRow } from './VDataTableRow'\n\n// Composables\nimport { useExpanded } from './composables/expand'\nimport { useGroupBy } from './composables/group'\nimport { useHeaders } from './composables/headers'\nimport { useSelection } from './composables/select'\nimport { makeDisplayProps, useDisplay } from '@/composables/display'\nimport { useLocale } from '@/composables/locale'\n\n// Utilities\nimport { Fragment, mergeProps } from 'vue'\nimport { genericComponent, getPrefixedEventHandlers, propsFactory, useRender } from '@/util'\n\n// Types\nimport type { PropType } from 'vue'\nimport type { Group } from './composables/group'\nimport type { CellProps, DataTableItem, GroupHeaderSlot, ItemSlot, RowProps } from './types'\nimport type { VDataTableGroupHeaderRowSlots } from './VDataTableGroupHeaderRow'\nimport type { VDataTableRowSlots } from './VDataTableRow'\nimport type { GenericProps } from '@/util'\n\nexport type VDataTableRowsSlots<T> = VDataTableGroupHeaderRowSlots & VDataTableRowSlots<T> & {\n  item: ItemSlot<T> & { props: Record<string, any> }\n  loading: never\n  'group-header': GroupHeaderSlot\n  'no-data': never\n  'expanded-row': ItemSlot<T>\n}\n\nexport const makeVDataTableRowsProps = propsFactory({\n  loading: [Boolean, String],\n  loadingText: {\n    type: String,\n    default: '$vuetify.dataIterator.loadingText',\n  },\n  hideNoData: Boolean,\n  items: {\n    type: Array as PropType<readonly (DataTableItem | Group)[]>,\n    default: () => ([]),\n  },\n  noDataText: {\n    type: String,\n    default: '$vuetify.noDataText',\n  },\n  rowProps: [Object, Function] as PropType<RowProps<any>>,\n  cellProps: [Object, Function] as PropType<CellProps<any>>,\n\n  ...makeDisplayProps(),\n}, 'VDataTableRows')\n\nexport const VDataTableRows = genericComponent<new <T>(\n  props: {\n    items?: readonly (DataTableItem<T> | Group<T>)[]\n  },\n  slots: VDataTableRowsSlots<T>,\n) => GenericProps<typeof props, typeof slots>>()({\n  name: 'VDataTableRows',\n\n  inheritAttrs: false,\n\n  props: makeVDataTableRowsProps(),\n\n  setup (props, { attrs, slots }) {\n    const { columns } = useHeaders()\n    const { expandOnClick, toggleExpand, isExpanded } = useExpanded()\n    const { isSelected, toggleSelect } = useSelection()\n    const { toggleGroup, isGroupOpen } = useGroupBy()\n    const { t } = useLocale()\n    const { mobile } = useDisplay(props)\n\n    useRender(() => {\n      if (props.loading && (!props.items.length || slots.loading)) {\n        return (\n          <tr\n            class=\"v-data-table-rows-loading\"\n            key=\"loading\"\n          >\n            <td colspan={ columns.value.length }>\n              { slots.loading?.() ?? t(props.loadingText) }\n            </td>\n          </tr>\n        )\n      }\n\n      if (!props.loading && !props.items.length && !props.hideNoData) {\n        return (\n          <tr\n            class=\"v-data-table-rows-no-data\"\n            key=\"no-data\"\n          >\n            <td colspan={ columns.value.length }>\n              { slots['no-data']?.() ?? t(props.noDataText) }\n            </td>\n          </tr>\n        )\n      }\n\n      return (\n        <>\n          { props.items.map((item, index) => {\n            if (item.type === 'group') {\n              const slotProps = {\n                index,\n                item,\n                columns: columns.value,\n                isExpanded,\n                toggleExpand,\n                isSelected,\n                toggleSelect,\n                toggleGroup,\n                isGroupOpen,\n              } satisfies GroupHeaderSlot\n\n              return slots['group-header'] ? slots['group-header'](slotProps) : (\n                <VDataTableGroupHeaderRow\n                  key={ `group-header_${item.id}` }\n                  item={ item }\n                  { ...getPrefixedEventHandlers(attrs, ':group-header', () => slotProps) }\n                  v-slots={ slots }\n                />\n              )\n            }\n\n            const slotProps = {\n              index,\n              item: item.raw,\n              internalItem: item,\n              columns: columns.value,\n              isExpanded,\n              toggleExpand,\n              isSelected,\n              toggleSelect,\n            } satisfies ItemSlot<any>\n\n            const itemSlotProps = {\n              ...slotProps,\n              props: mergeProps(\n                {\n                  key: `item_${item.key ?? item.index}`,\n                  onClick: expandOnClick.value ? () => {\n                    toggleExpand(item)\n                  } : undefined,\n                  index,\n                  item,\n                  cellProps: props.cellProps,\n                  mobile: mobile.value,\n                },\n                getPrefixedEventHandlers(attrs, ':row', () => slotProps),\n                typeof props.rowProps === 'function'\n                  ? props.rowProps({\n                    item: slotProps.item,\n                    index: slotProps.index,\n                    internalItem: slotProps.internalItem,\n                  })\n                  : props.rowProps,\n              ),\n            }\n\n            return (\n              <Fragment key={ itemSlotProps.props.key as string }>\n                { slots.item ? slots.item(itemSlotProps) : (\n                  <VDataTableRow\n                    { ...itemSlotProps.props }\n                    v-slots={ slots }\n                  />\n                )}\n\n                { isExpanded(item) && slots['expanded-row']?.(slotProps) }\n              </Fragment>\n            )\n          })}\n        </>\n      )\n    })\n\n    return {}\n  },\n})\n\nexport type VDataTableRows = InstanceType<typeof VDataTableRows>\n"]},"metadata":{},"sourceType":"module"}