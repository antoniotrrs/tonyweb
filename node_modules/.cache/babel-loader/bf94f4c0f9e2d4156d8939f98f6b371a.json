{"ast":null,"code":"import _objectSpread from \"/Users/antoniotorres/Documents/tony/tonyweb/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.ends-with.js\";\nimport { Fragment as _Fragment, createVNode as _createVNode, mergeProps as _mergeProps } from \"vue\"; // Styles\n\nimport \"./VColorPicker.css\"; // Components\n\nimport { VColorPickerCanvas } from \"./VColorPickerCanvas.js\";\nimport { VColorPickerEdit } from \"./VColorPickerEdit.js\";\nimport { VColorPickerPreview } from \"./VColorPickerPreview.js\";\nimport { VColorPickerSwatches } from \"./VColorPickerSwatches.js\";\nimport { makeVPickerProps, VPicker } from \"../../labs/VPicker/VPicker.js\"; // Composables\n\nimport { useRtl } from \"../../composables/index.js\";\nimport { provideDefaults } from \"../../composables/defaults.js\";\nimport { useProxiedModel } from \"../../composables/proxiedModel.js\"; // Utilities\n\nimport { computed, onBeforeMount, ref, watch } from 'vue';\nimport { extractColor, modes, nullColor } from \"./util/index.js\";\nimport { consoleWarn, defineComponent, HSVtoCSS, parseColor, propsFactory, RGBtoHSV, useRender } from \"../../util/index.js\"; // Types\n\nexport var makeVColorPickerProps = propsFactory(_objectSpread({\n  canvasHeight: {\n    type: [String, Number],\n    default: 150\n  },\n  disabled: Boolean,\n  dotSize: {\n    type: [Number, String],\n    default: 10\n  },\n  hideCanvas: Boolean,\n  hideSliders: Boolean,\n  hideInputs: Boolean,\n  mode: {\n    type: String,\n    default: 'rgba',\n    validator: function validator(v) {\n      return Object.keys(modes).includes(v);\n    }\n  },\n  modes: {\n    type: Array,\n    default: function _default() {\n      return Object.keys(modes);\n    },\n    validator: function validator(v) {\n      return Array.isArray(v) && v.every(function (m) {\n        return Object.keys(modes).includes(m);\n      });\n    }\n  },\n  showSwatches: Boolean,\n  swatches: Array,\n  swatchesMaxHeight: {\n    type: [Number, String],\n    default: 150\n  },\n  modelValue: {\n    type: [Object, String]\n  }\n}, makeVPickerProps({\n  hideHeader: true\n})), 'VColorPicker');\nexport var VColorPicker = defineComponent({\n  name: 'VColorPicker',\n  props: makeVColorPickerProps(),\n  emits: {\n    'update:modelValue': function updateModelValue(color) {\n      return true;\n    },\n    'update:mode': function updateMode(mode) {\n      return true;\n    }\n  },\n  setup: function setup(props, _ref) {\n    var slots = _ref.slots;\n    var mode = useProxiedModel(props, 'mode');\n    var hue = ref(null);\n    var model = useProxiedModel(props, 'modelValue', undefined, function (v) {\n      if (v == null || v === '') return null;\n      var c;\n\n      try {\n        c = RGBtoHSV(parseColor(v));\n      } catch (err) {\n        consoleWarn(err);\n        return null;\n      }\n\n      return c;\n    }, function (v) {\n      if (!v) return null;\n      return extractColor(v, props.modelValue);\n    });\n    var currentColor = computed(function () {\n      var _hue$value;\n\n      return model.value ? _objectSpread(_objectSpread({}, model.value), {}, {\n        h: (_hue$value = hue.value) !== null && _hue$value !== void 0 ? _hue$value : model.value.h\n      }) : null;\n    });\n\n    var _useRtl = useRtl(),\n        rtlClasses = _useRtl.rtlClasses;\n\n    var externalChange = true;\n    watch(model, function (v) {\n      if (!externalChange) {\n        // prevent hue shift from rgb conversion inaccuracy\n        externalChange = true;\n        return;\n      }\n\n      if (!v) return;\n      hue.value = v.h;\n    }, {\n      immediate: true\n    });\n\n    var updateColor = function updateColor(hsva) {\n      externalChange = false;\n      hue.value = hsva.h;\n      model.value = hsva;\n    };\n\n    onBeforeMount(function () {\n      if (!props.modes.includes(mode.value)) mode.value = props.modes[0];\n    });\n    provideDefaults({\n      VSlider: {\n        color: undefined,\n        trackColor: undefined,\n        trackFillColor: undefined\n      }\n    });\n    useRender(function () {\n      var _currentColor$value;\n\n      var pickerProps = VPicker.filterProps(props);\n      return _createVNode(VPicker, _mergeProps(pickerProps, {\n        \"class\": ['v-color-picker', rtlClasses.value, props.class],\n        \"style\": [{\n          '--v-color-picker-color-hsv': HSVtoCSS(_objectSpread(_objectSpread({}, (_currentColor$value = currentColor.value) !== null && _currentColor$value !== void 0 ? _currentColor$value : nullColor), {}, {\n            a: 1\n          }))\n        }, props.style]\n      }), _objectSpread(_objectSpread({}, slots), {}, {\n        default: function _default() {\n          return _createVNode(_Fragment, null, [!props.hideCanvas && _createVNode(VColorPickerCanvas, {\n            \"key\": \"canvas\",\n            \"color\": currentColor.value,\n            \"onUpdate:color\": updateColor,\n            \"disabled\": props.disabled,\n            \"dotSize\": props.dotSize,\n            \"width\": props.width,\n            \"height\": props.canvasHeight\n          }, null), (!props.hideSliders || !props.hideInputs) && _createVNode(\"div\", {\n            \"key\": \"controls\",\n            \"class\": \"v-color-picker__controls\"\n          }, [!props.hideSliders && _createVNode(VColorPickerPreview, {\n            \"key\": \"preview\",\n            \"color\": currentColor.value,\n            \"onUpdate:color\": updateColor,\n            \"hideAlpha\": !mode.value.endsWith('a'),\n            \"disabled\": props.disabled\n          }, null), !props.hideInputs && _createVNode(VColorPickerEdit, {\n            \"key\": \"edit\",\n            \"modes\": props.modes,\n            \"mode\": mode.value,\n            \"onUpdate:mode\": function onUpdateMode(m) {\n              return mode.value = m;\n            },\n            \"color\": currentColor.value,\n            \"onUpdate:color\": updateColor,\n            \"disabled\": props.disabled\n          }, null)]), props.showSwatches && _createVNode(VColorPickerSwatches, {\n            \"key\": \"swatches\",\n            \"color\": currentColor.value,\n            \"onUpdate:color\": updateColor,\n            \"maxHeight\": props.swatchesMaxHeight,\n            \"swatches\": props.swatches,\n            \"disabled\": props.disabled\n          }, null)]);\n        }\n      }));\n    });\n    return {};\n  }\n});","map":{"version":3,"mappings":"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","names":["VColorPickerCanvas","VColorPickerEdit","VColorPickerPreview","VColorPickerSwatches","makeVPickerProps","VPicker","useRtl","provideDefaults","useProxiedModel","computed","onBeforeMount","ref","watch","extractColor","modes","nullColor","consoleWarn","defineComponent","HSVtoCSS","parseColor","propsFactory","RGBtoHSV","useRender","makeVColorPickerProps","canvasHeight","type","String","Number","default","disabled","Boolean","dotSize","hideCanvas","hideSliders","hideInputs","mode","validator","v","Object","keys","includes","Array","isArray","every","m","showSwatches","swatches","swatchesMaxHeight","modelValue","hideHeader","VColorPicker","name","props","emits","color","setup","_ref","slots","hue","model","undefined","c","err","currentColor","value","h","rtlClasses","externalChange","immediate","updateColor","hsva","VSlider","trackColor","trackFillColor","pickerProps","filterProps","class","a","style","_createVNode","width","endsWith"],"sources":["../../../src/components/VColorPicker/VColorPicker.tsx"],"sourcesContent":["// Styles\nimport './VColorPicker.sass'\n\n// Components\nimport { VColorPickerCanvas } from './VColorPickerCanvas'\nimport { VColorPickerEdit } from './VColorPickerEdit'\nimport { VColorPickerPreview } from './VColorPickerPreview'\nimport { VColorPickerSwatches } from './VColorPickerSwatches'\nimport { makeVPickerProps, VPicker } from '@/labs/VPicker/VPicker'\n\n// Composables\nimport { useRtl } from '@/composables'\nimport { provideDefaults } from '@/composables/defaults'\nimport { useProxiedModel } from '@/composables/proxiedModel'\n\n// Utilities\nimport { computed, onBeforeMount, ref, watch } from 'vue'\nimport { extractColor, modes, nullColor } from './util'\nimport { consoleWarn, defineComponent, HSVtoCSS, parseColor, propsFactory, RGBtoHSV, useRender } from '@/util'\n\n// Types\nimport type { DeepReadonly, PropType } from 'vue'\nimport type { Color, HSV } from '@/util'\n\nexport const makeVColorPickerProps = propsFactory({\n  canvasHeight: {\n    type: [String, Number],\n    default: 150,\n  },\n  disabled: Boolean,\n  dotSize: {\n    type: [Number, String],\n    default: 10,\n  },\n  hideCanvas: Boolean,\n  hideSliders: Boolean,\n  hideInputs: Boolean,\n  mode: {\n    type: String as PropType<keyof typeof modes>,\n    default: 'rgba',\n    validator: (v: string) => Object.keys(modes).includes(v),\n  },\n  modes: {\n    type: Array as PropType<readonly (keyof typeof modes)[]>,\n    default: () => Object.keys(modes),\n    validator: (v: any) => Array.isArray(v) && v.every(m => Object.keys(modes).includes(m)),\n  },\n  showSwatches: Boolean,\n  swatches: Array as PropType<DeepReadonly<Color[][]>>,\n  swatchesMaxHeight: {\n    type: [Number, String],\n    default: 150,\n  },\n  modelValue: {\n    type: [Object, String] as PropType<Record<string, unknown> | string | undefined | null>,\n  },\n\n  ...makeVPickerProps({ hideHeader: true }),\n}, 'VColorPicker')\n\nexport const VColorPicker = defineComponent({\n  name: 'VColorPicker',\n\n  props: makeVColorPickerProps(),\n\n  emits: {\n    'update:modelValue': (color: any) => true,\n    'update:mode': (mode: keyof typeof modes) => true,\n  },\n\n  setup (props, { slots }) {\n    const mode = useProxiedModel(props, 'mode')\n    const hue = ref<number | null>(null)\n    const model = useProxiedModel(\n      props,\n      'modelValue',\n      undefined,\n      v => {\n        if (v == null || v === '') return null\n\n        let c: HSV\n        try {\n          c = RGBtoHSV(parseColor(v as any))\n        } catch (err) {\n          consoleWarn(err as any)\n          return null\n        }\n\n        return c\n      },\n      v => {\n        if (!v) return null\n\n        return extractColor(v, props.modelValue)\n      }\n    )\n    const currentColor = computed(() => {\n      return model.value\n        ? { ...model.value, h: hue.value ?? model.value.h }\n        : null\n    })\n    const { rtlClasses } = useRtl()\n\n    let externalChange = true\n    watch(model, v => {\n      if (!externalChange) {\n        // prevent hue shift from rgb conversion inaccuracy\n        externalChange = true\n        return\n      }\n      if (!v) return\n      hue.value = v.h\n    }, { immediate: true })\n\n    const updateColor = (hsva: HSV) => {\n      externalChange = false\n      hue.value = hsva.h\n      model.value = hsva\n    }\n\n    onBeforeMount(() => {\n      if (!props.modes.includes(mode.value)) mode.value = props.modes[0]\n    })\n\n    provideDefaults({\n      VSlider: {\n        color: undefined,\n        trackColor: undefined,\n        trackFillColor: undefined,\n      },\n    })\n\n    useRender(() => {\n      const pickerProps = VPicker.filterProps(props)\n\n      return (\n        <VPicker\n          { ...pickerProps }\n          class={[\n            'v-color-picker',\n            rtlClasses.value,\n            props.class,\n          ]}\n          style={[\n            {\n              '--v-color-picker-color-hsv': HSVtoCSS({ ...(currentColor.value ?? nullColor), a: 1 }),\n            },\n            props.style,\n          ]}\n          v-slots={{\n            ...slots,\n            default: () => (\n              <>\n                { !props.hideCanvas && (\n                  <VColorPickerCanvas\n                    key=\"canvas\"\n                    color={ currentColor.value }\n                    onUpdate:color={ updateColor }\n                    disabled={ props.disabled }\n                    dotSize={ props.dotSize }\n                    width={ props.width }\n                    height={ props.canvasHeight }\n                  />\n                )}\n\n                { (!props.hideSliders || !props.hideInputs) && (\n                  <div key=\"controls\" class=\"v-color-picker__controls\">\n                    { !props.hideSliders && (\n                      <VColorPickerPreview\n                        key=\"preview\"\n                        color={ currentColor.value }\n                        onUpdate:color={ updateColor }\n                        hideAlpha={ !mode.value.endsWith('a') }\n                        disabled={ props.disabled }\n                      />\n                    )}\n\n                    { !props.hideInputs && (\n                      <VColorPickerEdit\n                        key=\"edit\"\n                        modes={ props.modes }\n                        mode={ mode.value }\n                        onUpdate:mode={ m => mode.value = m }\n                        color={ currentColor.value }\n                        onUpdate:color={ updateColor }\n                        disabled={ props.disabled }\n                      />\n                    )}\n                  </div>\n                )}\n\n                { props.showSwatches && (\n                  <VColorPickerSwatches\n                    key=\"swatches\"\n                    color={ currentColor.value }\n                    onUpdate:color={ updateColor }\n                    maxHeight={ props.swatchesMaxHeight }\n                    swatches={ props.swatches }\n                    disabled={ props.disabled }\n                  />\n                )}\n              </>\n            ),\n          }}\n        />\n      )\n    })\n\n    return {}\n  },\n})\n\nexport type VColorPicker = InstanceType<typeof VColorPicker>\n"]},"metadata":{},"sourceType":"module"}