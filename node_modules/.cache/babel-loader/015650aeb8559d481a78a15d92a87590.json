{"ast":null,"code":"// Utilities\nimport { computed, isRef } from 'vue';\nimport { destructComputed, getForeground, isCssColor, isParsableColor, parseColor } from \"../util/index.js\"; // Types\n// Composables\n\nexport function useColor(colors) {\n  return destructComputed(function () {\n    var classes = [];\n    var styles = {};\n\n    if (colors.value.background) {\n      if (isCssColor(colors.value.background)) {\n        styles.backgroundColor = colors.value.background;\n\n        if (!colors.value.text && isParsableColor(colors.value.background)) {\n          var backgroundColor = parseColor(colors.value.background);\n\n          if (backgroundColor.a == null || backgroundColor.a === 1) {\n            var textColor = getForeground(backgroundColor);\n            styles.color = textColor;\n            styles.caretColor = textColor;\n          }\n        }\n      } else {\n        classes.push(\"bg-\".concat(colors.value.background));\n      }\n    }\n\n    if (colors.value.text) {\n      if (isCssColor(colors.value.text)) {\n        styles.color = colors.value.text;\n        styles.caretColor = colors.value.text;\n      } else {\n        classes.push(\"text-\".concat(colors.value.text));\n      }\n    }\n\n    return {\n      colorClasses: classes,\n      colorStyles: styles\n    };\n  });\n}\nexport function useTextColor(props, name) {\n  var colors = computed(function () {\n    return {\n      text: isRef(props) ? props.value : name ? props[name] : null\n    };\n  });\n\n  var _useColor = useColor(colors),\n      textColorClasses = _useColor.colorClasses,\n      textColorStyles = _useColor.colorStyles;\n\n  return {\n    textColorClasses: textColorClasses,\n    textColorStyles: textColorStyles\n  };\n}\nexport function useBackgroundColor(props, name) {\n  var colors = computed(function () {\n    return {\n      background: isRef(props) ? props.value : name ? props[name] : null\n    };\n  });\n\n  var _useColor2 = useColor(colors),\n      backgroundColorClasses = _useColor2.colorClasses,\n      backgroundColorStyles = _useColor2.colorStyles;\n\n  return {\n    backgroundColorClasses: backgroundColorClasses,\n    backgroundColorStyles: backgroundColorStyles\n  };\n}","map":{"version":3,"mappings":"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","names":["computed","isRef","destructComputed","getForeground","isCssColor","isParsableColor","parseColor","useColor","colors","classes","styles","value","background","backgroundColor","text","a","textColor","color","caretColor","push","colorClasses","colorStyles","useTextColor","props","name","textColorClasses","textColorStyles","useBackgroundColor","backgroundColorClasses","backgroundColorStyles"],"sources":["../../src/composables/color.ts"],"sourcesContent":["// Utilities\nimport { computed, isRef } from 'vue'\nimport { destructComputed, getForeground, isCssColor, isParsableColor, parseColor } from '@/util'\n\n// Types\nimport type { CSSProperties, Ref } from 'vue'\n\ntype ColorValue = string | false | null | undefined\n\nexport interface TextColorData {\n  textColorClasses: Ref<string[]>\n  textColorStyles: Ref<CSSProperties>\n}\n\nexport interface BackgroundColorData {\n  backgroundColorClasses: Ref<string[]>\n  backgroundColorStyles: Ref<CSSProperties>\n}\n\n// Composables\nexport function useColor (colors: Ref<{ background?: ColorValue, text?: ColorValue }>) {\n  return destructComputed(() => {\n    const classes: string[] = []\n    const styles: CSSProperties = {}\n\n    if (colors.value.background) {\n      if (isCssColor(colors.value.background)) {\n        styles.backgroundColor = colors.value.background\n\n        if (!colors.value.text && isParsableColor(colors.value.background)) {\n          const backgroundColor = parseColor(colors.value.background)\n          if (backgroundColor.a == null || backgroundColor.a === 1) {\n            const textColor = getForeground(backgroundColor)\n\n            styles.color = textColor\n            styles.caretColor = textColor\n          }\n        }\n      } else {\n        classes.push(`bg-${colors.value.background}`)\n      }\n    }\n\n    if (colors.value.text) {\n      if (isCssColor(colors.value.text)) {\n        styles.color = colors.value.text\n        styles.caretColor = colors.value.text\n      } else {\n        classes.push(`text-${colors.value.text}`)\n      }\n    }\n\n    return { colorClasses: classes, colorStyles: styles }\n  })\n}\n\nexport function useTextColor (color: Ref<ColorValue>): TextColorData\nexport function useTextColor <T extends Record<K, ColorValue>, K extends string> (props: T, name: K): TextColorData\nexport function useTextColor <T extends Record<K, ColorValue>, K extends string> (\n  props: T | Ref<ColorValue>,\n  name?: K\n): TextColorData {\n  const colors = computed(() => ({\n    text: isRef(props) ? props.value : (name ? props[name] : null),\n  }))\n\n  const {\n    colorClasses: textColorClasses,\n    colorStyles: textColorStyles,\n  } = useColor(colors)\n\n  return { textColorClasses, textColorStyles }\n}\n\nexport function useBackgroundColor (color: Ref<ColorValue>): BackgroundColorData\nexport function useBackgroundColor <T extends Record<K, ColorValue>, K extends string> (props: T, name: K): BackgroundColorData\nexport function useBackgroundColor <T extends Record<K, ColorValue>, K extends string> (\n  props: T | Ref<ColorValue>,\n  name?: K\n): BackgroundColorData {\n  const colors = computed(() => ({\n    background: isRef(props) ? props.value : (name ? props[name] : null),\n  }))\n\n  const {\n    colorClasses: backgroundColorClasses,\n    colorStyles: backgroundColorStyles,\n  } = useColor(colors)\n\n  return { backgroundColorClasses, backgroundColorStyles }\n}\n"]},"metadata":{},"sourceType":"module"}