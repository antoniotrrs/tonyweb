{"ast":null,"code":"import _slicedToArray from \"/Users/antoniotorres/Documents/tony/tonyweb/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectSpread from \"/Users/antoniotorres/Documents/tony/tonyweb/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.array.flat.js\";\nimport \"core-js/modules/es.array.unscopables.flat.js\";\nimport { createVNode as _createVNode, Fragment as _Fragment, mergeProps as _mergeProps } from \"vue\"; // Styles\n\nimport \"./VSwitch.css\"; // Components\n\nimport { VScaleTransition } from \"../transitions/index.js\";\nimport { VDefaultsProvider } from \"../VDefaultsProvider/VDefaultsProvider.js\";\nimport { VIcon } from \"../VIcon/index.js\";\nimport { makeVInputProps, VInput } from \"../VInput/VInput.js\";\nimport { VProgressCircular } from \"../VProgressCircular/index.js\";\nimport { makeVSelectionControlProps, VSelectionControl } from \"../VSelectionControl/VSelectionControl.js\"; // Composables\n\nimport { useFocus } from \"../../composables/focus.js\";\nimport { LoaderSlot, useLoader } from \"../../composables/loader.js\";\nimport { useProxiedModel } from \"../../composables/proxiedModel.js\"; // Utilities\n\nimport { computed, ref, useId } from 'vue';\nimport { filterInputAttrs, genericComponent, IN_BROWSER, propsFactory, useRender } from \"../../util/index.js\"; // Types\n\nexport var makeVSwitchProps = propsFactory(_objectSpread(_objectSpread({\n  indeterminate: Boolean,\n  inset: Boolean,\n  flat: Boolean,\n  loading: {\n    type: [Boolean, String],\n    default: false\n  }\n}, makeVInputProps()), makeVSelectionControlProps()), 'VSwitch');\nexport var VSwitch = genericComponent()({\n  name: 'VSwitch',\n  inheritAttrs: false,\n  props: makeVSwitchProps(),\n  emits: {\n    'update:focused': function updateFocused(focused) {\n      return true;\n    },\n    'update:modelValue': function updateModelValue(value) {\n      return true;\n    },\n    'update:indeterminate': function updateIndeterminate(value) {\n      return true;\n    }\n  },\n  setup: function setup(props, _ref) {\n    var attrs = _ref.attrs,\n        slots = _ref.slots;\n    var indeterminate = useProxiedModel(props, 'indeterminate');\n    var model = useProxiedModel(props, 'modelValue');\n\n    var _useLoader = useLoader(props),\n        loaderClasses = _useLoader.loaderClasses;\n\n    var _useFocus = useFocus(props),\n        isFocused = _useFocus.isFocused,\n        focus = _useFocus.focus,\n        blur = _useFocus.blur;\n\n    var control = ref();\n    var isForcedColorsModeActive = IN_BROWSER && window.matchMedia('(forced-colors: active)').matches;\n    var loaderColor = computed(function () {\n      return typeof props.loading === 'string' && props.loading !== '' ? props.loading : props.color;\n    });\n    var uid = useId();\n    var id = computed(function () {\n      return props.id || \"switch-\".concat(uid);\n    });\n\n    function onChange() {\n      if (indeterminate.value) {\n        indeterminate.value = false;\n      }\n    }\n\n    function onTrackClick(e) {\n      var _control$value, _control$value$input;\n\n      e.stopPropagation();\n      e.preventDefault();\n      (_control$value = control.value) === null || _control$value === void 0 ? void 0 : (_control$value$input = _control$value.input) === null || _control$value$input === void 0 ? void 0 : _control$value$input.click();\n    }\n\n    useRender(function () {\n      var _filterInputAttrs = filterInputAttrs(attrs),\n          _filterInputAttrs2 = _slicedToArray(_filterInputAttrs, 2),\n          rootAttrs = _filterInputAttrs2[0],\n          controlAttrs = _filterInputAttrs2[1];\n\n      var inputProps = VInput.filterProps(props);\n      var controlProps = VSelectionControl.filterProps(props);\n      return _createVNode(VInput, _mergeProps({\n        \"class\": ['v-switch', {\n          'v-switch--flat': props.flat\n        }, {\n          'v-switch--inset': props.inset\n        }, {\n          'v-switch--indeterminate': indeterminate.value\n        }, loaderClasses.value, props.class]\n      }, rootAttrs, inputProps, {\n        \"modelValue\": model.value,\n        \"onUpdate:modelValue\": function onUpdateModelValue($event) {\n          return model.value = $event;\n        },\n        \"id\": id.value,\n        \"focused\": isFocused.value,\n        \"style\": props.style\n      }), _objectSpread(_objectSpread({}, slots), {}, {\n        default: function _default(_ref2) {\n          var id = _ref2.id,\n              messagesId = _ref2.messagesId,\n              isDisabled = _ref2.isDisabled,\n              isReadonly = _ref2.isReadonly,\n              isValid = _ref2.isValid;\n          var slotProps = {\n            model: model,\n            isValid: isValid\n          };\n          return _createVNode(VSelectionControl, _mergeProps({\n            \"ref\": control\n          }, controlProps, {\n            \"modelValue\": model.value,\n            \"onUpdate:modelValue\": [function ($event) {\n              return model.value = $event;\n            }, onChange],\n            \"id\": id.value,\n            \"aria-describedby\": messagesId.value,\n            \"type\": \"checkbox\",\n            \"aria-checked\": indeterminate.value ? 'mixed' : undefined,\n            \"disabled\": isDisabled.value,\n            \"readonly\": isReadonly.value,\n            \"onFocus\": focus,\n            \"onBlur\": blur\n          }, controlAttrs), _objectSpread(_objectSpread({}, slots), {}, {\n            default: function _default(_ref3) {\n              var backgroundColorClasses = _ref3.backgroundColorClasses,\n                  backgroundColorStyles = _ref3.backgroundColorStyles;\n              return _createVNode(\"div\", {\n                \"class\": ['v-switch__track', !isForcedColorsModeActive ? backgroundColorClasses.value : undefined],\n                \"style\": backgroundColorStyles.value,\n                \"onClick\": onTrackClick\n              }, [slots['track-true'] && _createVNode(\"div\", {\n                \"key\": \"prepend\",\n                \"class\": \"v-switch__track-true\"\n              }, [slots['track-true'](slotProps)]), slots['track-false'] && _createVNode(\"div\", {\n                \"key\": \"append\",\n                \"class\": \"v-switch__track-false\"\n              }, [slots['track-false'](slotProps)])]);\n            },\n            input: function input(_ref4) {\n              var inputNode = _ref4.inputNode,\n                  icon = _ref4.icon,\n                  backgroundColorClasses = _ref4.backgroundColorClasses,\n                  backgroundColorStyles = _ref4.backgroundColorStyles;\n              return _createVNode(_Fragment, null, [inputNode, _createVNode(\"div\", {\n                \"class\": ['v-switch__thumb', {\n                  'v-switch__thumb--filled': icon || props.loading\n                }, props.inset || isForcedColorsModeActive ? undefined : backgroundColorClasses.value],\n                \"style\": props.inset ? undefined : backgroundColorStyles.value\n              }, [slots.thumb ? _createVNode(VDefaultsProvider, {\n                \"defaults\": {\n                  VIcon: {\n                    icon: icon,\n                    size: 'x-small'\n                  }\n                }\n              }, {\n                default: function _default() {\n                  return [slots.thumb(_objectSpread(_objectSpread({}, slotProps), {}, {\n                    icon: icon\n                  }))];\n                }\n              }) : _createVNode(VScaleTransition, null, {\n                default: function _default() {\n                  return [!props.loading ? icon && _createVNode(VIcon, {\n                    \"key\": String(icon),\n                    \"icon\": icon,\n                    \"size\": \"x-small\"\n                  }, null) : _createVNode(LoaderSlot, {\n                    \"name\": \"v-switch\",\n                    \"active\": true,\n                    \"color\": isValid.value === false ? undefined : loaderColor.value\n                  }, {\n                    default: function _default(slotProps) {\n                      return slots.loader ? slots.loader(slotProps) : _createVNode(VProgressCircular, {\n                        \"active\": slotProps.isActive,\n                        \"color\": slotProps.color,\n                        \"indeterminate\": true,\n                        \"size\": \"16\",\n                        \"width\": \"2\"\n                      }, null);\n                    }\n                  })];\n                }\n              })])]);\n            }\n          }));\n        }\n      }));\n    });\n    return {};\n  }\n});","map":{"version":3,"mappings":"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","names":["VScaleTransition","VDefaultsProvider","VIcon","makeVInputProps","VInput","VProgressCircular","makeVSelectionControlProps","VSelectionControl","useFocus","LoaderSlot","useLoader","useProxiedModel","computed","ref","useId","filterInputAttrs","genericComponent","IN_BROWSER","propsFactory","useRender","makeVSwitchProps","indeterminate","Boolean","inset","flat","loading","type","String","default","VSwitch","name","inheritAttrs","props","emits","focused","value","setup","_ref","attrs","slots","model","loaderClasses","isFocused","focus","blur","control","isForcedColorsModeActive","window","matchMedia","matches","loaderColor","color","uid","id","onChange","onTrackClick","e","stopPropagation","preventDefault","input","click","rootAttrs","controlAttrs","inputProps","filterProps","controlProps","class","$event","style","_ref2","messagesId","isDisabled","isReadonly","isValid","slotProps","undefined","_ref3","backgroundColorClasses","backgroundColorStyles","_createVNode","_ref4","inputNode","icon","thumb","size","loader","isActive"],"sources":["../../../src/components/VSwitch/VSwitch.tsx"],"sourcesContent":["// Styles\nimport './VSwitch.sass'\n\n// Components\nimport { VScaleTransition } from '@/components/transitions'\nimport { VDefaultsProvider } from '@/components/VDefaultsProvider/VDefaultsProvider'\nimport { VIcon } from '@/components/VIcon'\nimport { makeVInputProps, VInput } from '@/components/VInput/VInput'\nimport { VProgressCircular } from '@/components/VProgressCircular'\nimport { makeVSelectionControlProps, VSelectionControl } from '@/components/VSelectionControl/VSelectionControl'\n\n// Composables\nimport { useFocus } from '@/composables/focus'\nimport { LoaderSlot, useLoader } from '@/composables/loader'\nimport { useProxiedModel } from '@/composables/proxiedModel'\n\n// Utilities\nimport { computed, ref, useId } from 'vue'\nimport { filterInputAttrs, genericComponent, IN_BROWSER, propsFactory, useRender } from '@/util'\n\n// Types\nimport type { ComputedRef, Ref } from 'vue'\nimport type { VInputSlots } from '@/components/VInput/VInput'\nimport type { VSelectionControlSlots } from '@/components/VSelectionControl/VSelectionControl'\nimport type { IconValue } from '@/composables/icons'\nimport type { LoaderSlotProps } from '@/composables/loader'\nimport type { GenericProps } from '@/util'\n\nexport type VSwitchSlot = {\n  model: Ref<boolean>\n  isValid: ComputedRef<boolean | null>\n}\n\nexport type VSwitchSlots =\n  & VInputSlots\n  & VSelectionControlSlots\n  & {\n    loader: LoaderSlotProps\n    thumb: { icon: IconValue | undefined } & VSwitchSlot\n    'track-false': VSwitchSlot\n    'track-true': VSwitchSlot\n  }\n\nexport const makeVSwitchProps = propsFactory({\n  indeterminate: Boolean,\n  inset: Boolean,\n  flat: Boolean,\n  loading: {\n    type: [Boolean, String],\n    default: false,\n  },\n\n  ...makeVInputProps(),\n  ...makeVSelectionControlProps(),\n}, 'VSwitch')\n\nexport const VSwitch = genericComponent<new <T>(\n  props: {\n    modelValue?: T | null\n    'onUpdate:modelValue'?: (value: T | null) => void\n  },\n  slots: VSwitchSlots,\n) => GenericProps<typeof props, typeof slots>>()({\n  name: 'VSwitch',\n\n  inheritAttrs: false,\n\n  props: makeVSwitchProps(),\n\n  emits: {\n    'update:focused': (focused: boolean) => true,\n    'update:modelValue': (value: any) => true,\n    'update:indeterminate': (value: boolean) => true,\n  },\n\n  setup (props, { attrs, slots }) {\n    const indeterminate = useProxiedModel(props, 'indeterminate')\n    const model = useProxiedModel(props, 'modelValue')\n    const { loaderClasses } = useLoader(props)\n    const { isFocused, focus, blur } = useFocus(props)\n    const control = ref<VSelectionControl>()\n    const isForcedColorsModeActive = IN_BROWSER && window.matchMedia('(forced-colors: active)').matches\n\n    const loaderColor = computed(() => {\n      return typeof props.loading === 'string' && props.loading !== ''\n        ? props.loading\n        : props.color\n    })\n\n    const uid = useId()\n    const id = computed(() => props.id || `switch-${uid}`)\n\n    function onChange () {\n      if (indeterminate.value) {\n        indeterminate.value = false\n      }\n    }\n    function onTrackClick (e: Event) {\n      e.stopPropagation()\n      e.preventDefault()\n      control.value?.input?.click()\n    }\n\n    useRender(() => {\n      const [rootAttrs, controlAttrs] = filterInputAttrs(attrs)\n      const inputProps = VInput.filterProps(props)\n      const controlProps = VSelectionControl.filterProps(props)\n\n      return (\n        <VInput\n          class={[\n            'v-switch',\n            { 'v-switch--flat': props.flat },\n            { 'v-switch--inset': props.inset },\n            { 'v-switch--indeterminate': indeterminate.value },\n            loaderClasses.value,\n            props.class,\n          ]}\n          { ...rootAttrs }\n          { ...inputProps }\n          v-model={ model.value }\n          id={ id.value }\n          focused={ isFocused.value }\n          style={ props.style }\n        >\n          {{\n            ...slots,\n            default: ({\n              id,\n              messagesId,\n              isDisabled,\n              isReadonly,\n              isValid,\n            }) => {\n              const slotProps = {\n                model,\n                isValid,\n              }\n\n              return (\n                <VSelectionControl\n                  ref={ control }\n                  { ...controlProps }\n                  v-model={ model.value }\n                  id={ id.value }\n                  aria-describedby={ messagesId.value }\n                  type=\"checkbox\"\n                  onUpdate:modelValue={ onChange }\n                  aria-checked={ indeterminate.value ? 'mixed' : undefined }\n                  disabled={ isDisabled.value }\n                  readonly={ isReadonly.value }\n                  onFocus={ focus }\n                  onBlur={ blur }\n                  { ...controlAttrs }\n                >\n                  {{\n                    ...slots,\n                    default: ({ backgroundColorClasses, backgroundColorStyles }) => (\n                      <div\n                        class={[\n                          'v-switch__track',\n                          !isForcedColorsModeActive ? backgroundColorClasses.value : undefined,\n                        ]}\n                        style={ backgroundColorStyles.value }\n                        onClick={ onTrackClick }\n                      >\n                        { slots['track-true'] && (\n                          <div key=\"prepend\" class=\"v-switch__track-true\">\n                            { slots['track-true'](slotProps) }\n                          </div>\n                        )}\n\n                        { slots['track-false'] && (\n                          <div key=\"append\" class=\"v-switch__track-false\">\n                            { slots['track-false'](slotProps) }\n                          </div>\n                        )}\n                      </div>\n                    ),\n                    input: ({ inputNode, icon, backgroundColorClasses, backgroundColorStyles }) => (\n                      <>\n                        { inputNode }\n                        <div\n                          class={[\n                            'v-switch__thumb',\n                            { 'v-switch__thumb--filled': icon || props.loading },\n                            props.inset || isForcedColorsModeActive ? undefined : backgroundColorClasses.value,\n                          ]}\n                          style={ props.inset ? undefined : backgroundColorStyles.value }\n                        >\n                          { slots.thumb ? (\n                            <VDefaultsProvider\n                              defaults={{\n                                VIcon: {\n                                  icon,\n                                  size: 'x-small',\n                                },\n                              }}\n                            >\n                              { slots.thumb({ ...slotProps, icon }) }\n                            </VDefaultsProvider>\n                          ) : (\n                            <VScaleTransition>\n                              { !props.loading ? (\n                                (icon && (\n                                  <VIcon\n                                    key={ String(icon) }\n                                    icon={ icon }\n                                    size=\"x-small\"\n                                  />\n                                ))) : (\n                                <LoaderSlot\n                                  name=\"v-switch\"\n                                  active\n                                  color={ isValid.value === false ? undefined : loaderColor.value }\n                                >\n                                  { slotProps => (\n                                    slots.loader\n                                      ? slots.loader(slotProps)\n                                      : (\n                                        <VProgressCircular\n                                          active={ slotProps.isActive }\n                                          color={ slotProps.color }\n                                          indeterminate\n                                          size=\"16\"\n                                          width=\"2\"\n                                        />\n                                      )\n                                  )}\n                                </LoaderSlot>\n                              )}\n                            </VScaleTransition>\n                          )}\n                        </div>\n                      </>\n                    ),\n                  }}\n                </VSelectionControl>\n              )\n            },\n          }}\n        </VInput>\n      )\n    })\n\n    return {}\n  },\n})\n\nexport type VSwitch = InstanceType<typeof VSwitch>\n"]},"metadata":{},"sourceType":"module"}