{"ast":null,"code":"import _slicedToArray from \"/Users/antoniotorres/Documents/tony/tonyweb/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _typeof from \"/Users/antoniotorres/Documents/tony/tonyweb/node_modules/@babel/runtime/helpers/esm/typeof.js\";\nimport _toConsumableArray from \"/Users/antoniotorres/Documents/tony/tonyweb/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _wrapRegExp from \"/Users/antoniotorres/Documents/tony/tonyweb/node_modules/@babel/runtime/helpers/esm/wrapRegExp.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.regexp.test.js\";\nimport \"core-js/modules/es.string.match.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.string.split.js\";\nimport \"core-js/modules/es.string.ends-with.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.string.starts-with.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.string.trim.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.object.values.js\";\n// Utilities\nimport { APCAcontrast } from \"./color/APCA.js\";\nimport { consoleWarn } from \"./console.js\";\nimport { chunk, has, padEnd } from \"./helpers.js\";\nimport * as CIELAB from \"./color/transformCIELAB.js\";\nimport * as sRGB from \"./color/transformSRGB.js\"; // Types\n\nexport function isCssColor(color) {\n  return !!color && /^(#|var\\(--|(rgb|hsl)a?\\()/.test(color);\n}\nexport function isParsableColor(color) {\n  return isCssColor(color) && !/^((rgb|hsl)a?\\()?var\\(--/.test(color);\n}\n\nvar cssColorRe = /*#__PURE__*/_wrapRegExp(/^((?:rgb|hsl)a?)\\((.+)\\)/, {\n  fn: 1,\n  values: 2\n});\n\nvar mappers = {\n  rgb: function rgb(r, g, b, a) {\n    return {\n      r: r,\n      g: g,\n      b: b,\n      a: a\n    };\n  },\n  rgba: function rgba(r, g, b, a) {\n    return {\n      r: r,\n      g: g,\n      b: b,\n      a: a\n    };\n  },\n  hsl: function hsl(h, s, l, a) {\n    return HSLtoRGB({\n      h: h,\n      s: s,\n      l: l,\n      a: a\n    });\n  },\n  hsla: function hsla(h, s, l, a) {\n    return HSLtoRGB({\n      h: h,\n      s: s,\n      l: l,\n      a: a\n    });\n  },\n  hsv: function hsv(h, s, v, a) {\n    return HSVtoRGB({\n      h: h,\n      s: s,\n      v: v,\n      a: a\n    });\n  },\n  hsva: function hsva(h, s, v, a) {\n    return HSVtoRGB({\n      h: h,\n      s: s,\n      v: v,\n      a: a\n    });\n  }\n};\nexport function parseColor(color) {\n  if (typeof color === 'number') {\n    if (isNaN(color) || color < 0 || color > 0xFFFFFF) {\n      // int can't have opacity\n      consoleWarn(\"'\".concat(color, \"' is not a valid hex color\"));\n    }\n\n    return {\n      r: (color & 0xFF0000) >> 16,\n      g: (color & 0xFF00) >> 8,\n      b: color & 0xFF\n    };\n  } else if (typeof color === 'string' && cssColorRe.test(color)) {\n    var _color$match = color.match(cssColorRe),\n        groups = _color$match.groups;\n\n    var fn = groups.fn,\n        values = groups.values;\n    var realValues = values.split(/,\\s*|\\s*\\/\\s*|\\s+/).map(function (v, i) {\n      if (v.endsWith('%') || // unitless slv are %\n      i > 0 && i < 3 && ['hsl', 'hsla', 'hsv', 'hsva'].includes(fn)) {\n        return parseFloat(v) / 100;\n      } else {\n        return parseFloat(v);\n      }\n    });\n    return mappers[fn].apply(mappers, _toConsumableArray(realValues));\n  } else if (typeof color === 'string') {\n    var hex = color.startsWith('#') ? color.slice(1) : color;\n\n    if ([3, 4].includes(hex.length)) {\n      hex = hex.split('').map(function (char) {\n        return char + char;\n      }).join('');\n    } else if (![6, 8].includes(hex.length)) {\n      consoleWarn(\"'\".concat(color, \"' is not a valid hex(a) color\"));\n    }\n\n    var int = parseInt(hex, 16);\n\n    if (isNaN(int) || int < 0 || int > 0xFFFFFFFF) {\n      consoleWarn(\"'\".concat(color, \"' is not a valid hex(a) color\"));\n    }\n\n    return HexToRGB(hex);\n  } else if (_typeof(color) === 'object') {\n    if (has(color, ['r', 'g', 'b'])) {\n      return color;\n    } else if (has(color, ['h', 's', 'l'])) {\n      return HSVtoRGB(HSLtoHSV(color));\n    } else if (has(color, ['h', 's', 'v'])) {\n      return HSVtoRGB(color);\n    }\n  }\n\n  throw new TypeError(\"Invalid color: \".concat(color == null ? color : String(color) || color.constructor.name, \"\\nExpected #hex, #hexa, rgb(), rgba(), hsl(), hsla(), object or number\"));\n}\nexport function RGBToInt(color) {\n  return (color.r << 16) + (color.g << 8) + color.b;\n}\nexport function classToHex(color, colors, currentTheme) {\n  var _color$toString$trim$ = color.toString().trim().replace('-', '').split(' ', 2),\n      _color$toString$trim$2 = _slicedToArray(_color$toString$trim$, 2),\n      colorName = _color$toString$trim$2[0],\n      colorModifier = _color$toString$trim$2[1];\n\n  var hexColor = '';\n\n  if (colorName && colorName in colors) {\n    if (colorModifier && colorModifier in colors[colorName]) {\n      hexColor = colors[colorName][colorModifier];\n    } else if ('base' in colors[colorName]) {\n      hexColor = colors[colorName].base;\n    }\n  } else if (colorName && colorName in currentTheme) {\n    hexColor = currentTheme[colorName];\n  }\n\n  return hexColor;\n}\n/** Converts HSVA to RGBA. Based on formula from https://en.wikipedia.org/wiki/HSL_and_HSV */\n\nexport function HSVtoRGB(hsva) {\n  var h = hsva.h,\n      s = hsva.s,\n      v = hsva.v,\n      a = hsva.a;\n\n  var f = function f(n) {\n    var k = (n + h / 60) % 6;\n    return v - v * s * Math.max(Math.min(k, 4 - k, 1), 0);\n  };\n\n  var rgb = [f(5), f(3), f(1)].map(function (v) {\n    return Math.round(v * 255);\n  });\n  return {\n    r: rgb[0],\n    g: rgb[1],\n    b: rgb[2],\n    a: a\n  };\n}\nexport function HSLtoRGB(hsla) {\n  return HSVtoRGB(HSLtoHSV(hsla));\n}\n/** Converts RGBA to HSVA. Based on formula from https://en.wikipedia.org/wiki/HSL_and_HSV */\n\nexport function RGBtoHSV(rgba) {\n  if (!rgba) return {\n    h: 0,\n    s: 1,\n    v: 1,\n    a: 1\n  };\n  var r = rgba.r / 255;\n  var g = rgba.g / 255;\n  var b = rgba.b / 255;\n  var max = Math.max(r, g, b);\n  var min = Math.min(r, g, b);\n  var h = 0;\n\n  if (max !== min) {\n    if (max === r) {\n      h = 60 * (0 + (g - b) / (max - min));\n    } else if (max === g) {\n      h = 60 * (2 + (b - r) / (max - min));\n    } else if (max === b) {\n      h = 60 * (4 + (r - g) / (max - min));\n    }\n  }\n\n  if (h < 0) h = h + 360;\n  var s = max === 0 ? 0 : (max - min) / max;\n  var hsv = [h, s, max];\n  return {\n    h: hsv[0],\n    s: hsv[1],\n    v: hsv[2],\n    a: rgba.a\n  };\n}\nexport function HSVtoHSL(hsva) {\n  var h = hsva.h,\n      s = hsva.s,\n      v = hsva.v,\n      a = hsva.a;\n  var l = v - v * s / 2;\n  var sprime = l === 1 || l === 0 ? 0 : (v - l) / Math.min(l, 1 - l);\n  return {\n    h: h,\n    s: sprime,\n    l: l,\n    a: a\n  };\n}\nexport function HSLtoHSV(hsl) {\n  var h = hsl.h,\n      s = hsl.s,\n      l = hsl.l,\n      a = hsl.a;\n  var v = l + s * Math.min(l, 1 - l);\n  var sprime = v === 0 ? 0 : 2 - 2 * l / v;\n  return {\n    h: h,\n    s: sprime,\n    v: v,\n    a: a\n  };\n}\nexport function RGBtoCSS(_ref) {\n  var r = _ref.r,\n      g = _ref.g,\n      b = _ref.b,\n      a = _ref.a;\n  return a === undefined ? \"rgb(\".concat(r, \", \").concat(g, \", \").concat(b, \")\") : \"rgba(\".concat(r, \", \").concat(g, \", \").concat(b, \", \").concat(a, \")\");\n}\nexport function HSVtoCSS(hsva) {\n  return RGBtoCSS(HSVtoRGB(hsva));\n}\n\nfunction toHex(v) {\n  var h = Math.round(v).toString(16);\n  return ('00'.substr(0, 2 - h.length) + h).toUpperCase();\n}\n\nexport function RGBtoHex(_ref2) {\n  var r = _ref2.r,\n      g = _ref2.g,\n      b = _ref2.b,\n      a = _ref2.a;\n  return \"#\".concat([toHex(r), toHex(g), toHex(b), a !== undefined ? toHex(Math.round(a * 255)) : ''].join(''));\n}\nexport function HexToRGB(hex) {\n  hex = parseHex(hex);\n\n  var _chunk$map = chunk(hex, 2).map(function (c) {\n    return parseInt(c, 16);\n  }),\n      _chunk$map2 = _slicedToArray(_chunk$map, 4),\n      r = _chunk$map2[0],\n      g = _chunk$map2[1],\n      b = _chunk$map2[2],\n      a = _chunk$map2[3];\n\n  a = a === undefined ? a : a / 255;\n  return {\n    r: r,\n    g: g,\n    b: b,\n    a: a\n  };\n}\nexport function HexToHSV(hex) {\n  var rgb = HexToRGB(hex);\n  return RGBtoHSV(rgb);\n}\nexport function HSVtoHex(hsva) {\n  return RGBtoHex(HSVtoRGB(hsva));\n}\nexport function parseHex(hex) {\n  if (hex.startsWith('#')) {\n    hex = hex.slice(1);\n  }\n\n  hex = hex.replace(/([^0-9a-f])/gi, 'F');\n\n  if (hex.length === 3 || hex.length === 4) {\n    hex = hex.split('').map(function (x) {\n      return x + x;\n    }).join('');\n  }\n\n  if (hex.length !== 6) {\n    hex = padEnd(padEnd(hex, 6), 8, 'F');\n  }\n\n  return hex;\n}\nexport function parseGradient(gradient, colors, currentTheme) {\n  return gradient.replace(/([a-z]+(\\s[a-z]+-[1-5])?)(?=$|,)/gi, function (x) {\n    return classToHex(x, colors, currentTheme) || x;\n  }).replace(/(rgba\\()#[0-9a-f]+(?=,)/gi, function (x) {\n    return 'rgba(' + Object.values(HexToRGB(parseHex(x.replace(/rgba\\(/, '')))).slice(0, 3).join(',');\n  });\n}\nexport function lighten(value, amount) {\n  var lab = CIELAB.fromXYZ(sRGB.toXYZ(value));\n  lab[0] = lab[0] + amount * 10;\n  return sRGB.fromXYZ(CIELAB.toXYZ(lab));\n}\nexport function darken(value, amount) {\n  var lab = CIELAB.fromXYZ(sRGB.toXYZ(value));\n  lab[0] = lab[0] - amount * 10;\n  return sRGB.fromXYZ(CIELAB.toXYZ(lab));\n}\n/**\n * Calculate the relative luminance of a given color\n * @see https://www.w3.org/TR/WCAG20/#relativeluminancedef\n */\n\nexport function getLuma(color) {\n  var rgb = parseColor(color);\n  return sRGB.toXYZ(rgb)[1];\n}\n/**\n * Returns the contrast ratio (1-21) between two colors.\n * @see https://www.w3.org/TR/WCAG20/#contrast-ratiodef\n */\n\nexport function getContrast(first, second) {\n  var l1 = getLuma(first);\n  var l2 = getLuma(second);\n  var light = Math.max(l1, l2);\n  var dark = Math.min(l1, l2);\n  return (light + 0.05) / (dark + 0.05);\n}\nexport function getForeground(color) {\n  var blackContrast = Math.abs(APCAcontrast(parseColor(0), parseColor(color)));\n  var whiteContrast = Math.abs(APCAcontrast(parseColor(0xffffff), parseColor(color))); // TODO: warn about poor color selections\n  // const contrastAsText = Math.abs(APCAcontrast(colorVal, colorToInt(theme.colors.background)))\n  // const minContrast = Math.max(blackContrast, whiteContrast)\n  // if (minContrast < 60) {\n  //   consoleInfo(`${key} theme color ${color} has poor contrast (${minContrast.toFixed()}%)`)\n  // } else if (contrastAsText < 60 && !['background', 'surface'].includes(color)) {\n  //   consoleInfo(`${key} theme color ${color} has poor contrast as text (${contrastAsText.toFixed()}%)`)\n  // }\n  // Prefer white text if both have an acceptable contrast ratio\n\n  return whiteContrast > Math.min(blackContrast, 50) ? '#fff' : '#000';\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA,SACSA,YADT,QACqB,iBADrB;AACqB,SACZC,WADY,QACD,cADC;AACD,SACXC,KADW,EACJC,GADI,EACCC,MADD,QACO,cADP;AACO,OACpB,KAAKC,MADe,MACT,4BADS;AACT,OACX,KAAKC,IADM,MACF,0BADE,C,CAGlB;;AAWA,OAAO,SAASC,UAAT,CAAqBC,KAArB,EAA6D;AAClE,SAAO,CAAC,CAACA,KAAF,IAAW,6BAA6BC,IAA7B,CAAkCD,KAAlC,CAAlB;AACF;AAEA,OAAO,SAASE,eAAT,CAA0BF,KAA1B,EAAkD;AACvD,SAAOD,UAAU,CAACC,KAAD,CAAVD,IAAqB,CAAC,2BAA2BE,IAA3B,CAAgCD,KAAhC,CAA7B;AACF;;AAEA,IAAMG,UAAU,4BAAG,0BAAH;AAAA;AAAA;AAAA,EAAhB;;AACA,IAAMC,OAAO,GAAG;AACdC,KAAG,EAAEA,aAACC,CAADD,EAAYE,CAAZF,EAAuBG,CAAvBH,EAAkCI,CAAlCJ;AAAAA,WAAkD;AAAEC,OAAC,EAADA,CAAF;AAAKC,OAAC,EAADA,CAAL;AAAQC,OAAC,EAADA,CAAR;AAAWC;AAAX,KAAlDJ;AAAAA,GADS;AAEdK,MAAI,EAAEA,cAACJ,CAADI,EAAYH,CAAZG,EAAuBF,CAAvBE,EAAkCD,CAAlCC;AAAAA,WAAkD;AAAEJ,OAAC,EAADA,CAAF;AAAKC,OAAC,EAADA,CAAL;AAAQC,OAAC,EAADA,CAAR;AAAWC;AAAX,KAAlDC;AAAAA,GAFQ;AAGdC,KAAG,EAAEA,aAACC,CAADD,EAAYE,CAAZF,EAAuBG,CAAvBH,EAAkCF,CAAlCE;AAAAA,WAAiDI,QAAQ,CAAC;AAAEH,OAAC,EAADA,CAAF;AAAKC,OAAC,EAADA,CAAL;AAAQC,OAAC,EAADA,CAAR;AAAWL;AAAX,KAAD,CAAzDE;AAAAA,GAHS;AAIdK,MAAI,EAAEA,cAACJ,CAADI,EAAYH,CAAZG,EAAuBF,CAAvBE,EAAkCP,CAAlCO;AAAAA,WAAiDD,QAAQ,CAAC;AAAEH,OAAC,EAADA,CAAF;AAAKC,OAAC,EAADA,CAAL;AAAQC,OAAC,EAADA,CAAR;AAAWL;AAAX,KAAD,CAAzDO;AAAAA,GAJQ;AAKdC,KAAG,EAAEA,aAACL,CAADK,EAAYJ,CAAZI,EAAuBC,CAAvBD,EAAkCR,CAAlCQ;AAAAA,WAAiDE,QAAQ,CAAC;AAAEP,OAAC,EAADA,CAAF;AAAKC,OAAC,EAADA,CAAL;AAAQK,OAAC,EAADA,CAAR;AAAWT;AAAX,KAAD,CAAzDQ;AAAAA,GALS;AAMdG,MAAI,EAAEA,cAACR,CAADQ,EAAYP,CAAZO,EAAuBF,CAAvBE,EAAkCX,CAAlCW;AAAAA,WAAiDD,QAAQ,CAAC;AAAEP,OAAC,EAADA,CAAF;AAAKC,OAAC,EAADA,CAAL;AAAQK,OAAC,EAADA,CAAR;AAAWT;AAAX,KAAD,CAAzDW;AAAAA;AANQ,CAAhB;AASA,OAAO,SAASC,UAAT,CAAqBrB,KAArB,EAAwC;AAC7C,MAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7B,QAAIsB,KAAK,CAACtB,KAAD,CAALsB,IAAgBtB,KAAK,GAAG,CAAxBsB,IAA6BtB,KAAK,GAAG,QAAzC,EAAmD;AAAE;AACnDP,iBAAW,YAAKO,KAAL,gCAAXP;AACF;;AAEA,WAAO;AACLa,OAAC,EAAE,CAACN,KAAK,GAAG,QAAT,KAAsB,EADpB;AAELO,OAAC,EAAE,CAACP,KAAK,GAAG,MAAT,KAAoB,CAFlB;AAGLQ,OAAC,EAAGR,KAAK,GAAG;AAHP,KAAP;AAKD,GAVD,MAUO,IAAI,OAAOA,KAAP,KAAiB,QAAjB,IAA6BG,UAAU,CAACF,IAAXE,CAAgBH,KAAhBG,CAAjC,EAAyD;AAC9D,uBAAmBH,KAAK,CAACuB,KAANvB,CAAYG,UAAZH,CAAnB;AAAA,QAAQwB,MAAR,gBAAQA,MAAR;;AACA,QAAQC,EAAR,GAAuBD,MAAvB,CAAQC,EAAR;AAAA,QAAYC,MAAZ,GAAuBF,MAAvB,CAAYE,MAAZ;AACA,QAAMC,UAAU,GAAGD,MAAM,CAACE,KAAPF,CAAa,mBAAbA,EAChBG,GADgBH,CACZ,UAACR,CAAD,EAAIY,CAAJ,EAAU;AACb,UACEZ,CAAC,CAACa,QAAFb,CAAW,GAAXA,KACA;AACCY,OAAC,GAAG,CAAJA,IAASA,CAAC,GAAG,CAAbA,IAAkB,CAAC,KAAD,EAAQ,MAAR,EAAgB,KAAhB,EAAuB,MAAvB,EAA+BE,QAA/B,CAAwCP,EAAxC,CAHrB,EAIE;AACA,eAAOQ,UAAU,CAACf,CAAD,CAAVe,GAAgB,GAAvB;AACD,OAND,MAMO;AACL,eAAOA,UAAU,CAACf,CAAD,CAAjB;AACF;AACD,KAXgBQ,CAAnB;AAaA,WAAOtB,OAAO,CAACqB,EAAD,CAAPrB,cAAO,qBAAQuB,UAAR,EAAd;AACD,GAjBM,MAiBA,IAAI,OAAO3B,KAAP,KAAiB,QAArB,EAA+B;AACpC,QAAIkC,GAAG,GAAGlC,KAAK,CAACmC,UAANnC,CAAiB,GAAjBA,IAAwBA,KAAK,CAACoC,KAANpC,CAAY,CAAZA,CAAxBA,GAAyCA,KAAnD;;AAEA,QAAI,CAAC,CAAD,EAAI,CAAJ,EAAOgC,QAAP,CAAgBE,GAAG,CAACG,MAApB,CAAJ,EAAiC;AAC/BH,SAAG,GAAGA,GAAG,CAACN,KAAJM,CAAU,EAAVA,EAAcL,GAAdK,CAAkBI,cAAI;AAAA,eAAIA,IAAI,GAAGA,IAAX;AAAA,OAAtBJ,EAAuCK,IAAvCL,CAA4C,EAA5CA,CAANA;AACD,KAFD,MAEO,IAAI,CAAC,CAAC,CAAD,EAAI,CAAJ,EAAOF,QAAP,CAAgBE,GAAG,CAACG,MAApB,CAAL,EAAkC;AACvC5C,iBAAW,YAAKO,KAAL,mCAAXP;AACF;;AAEA,QAAM+C,GAAG,GAAGC,QAAQ,CAACP,GAAD,EAAM,EAAN,CAApB;;AACA,QAAIZ,KAAK,CAACkB,GAAD,CAALlB,IAAckB,GAAG,GAAG,CAApBlB,IAAyBkB,GAAG,GAAG,UAAnC,EAA+C;AAC7C/C,iBAAW,YAAKO,KAAL,mCAAXP;AACF;;AAEA,WAAOiD,QAAQ,CAACR,GAAD,CAAf;AACD,GAfM,MAeA,IAAI,QAAOlC,KAAP,MAAiB,QAArB,EAA+B;AACpC,QAAIL,GAAG,CAACK,KAAD,EAAQ,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAAR,CAAP,EAAiC;AAC/B,aAAOA,KAAP;AACD,KAFD,MAEO,IAAIL,GAAG,CAACK,KAAD,EAAQ,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAAR,CAAP,EAAiC;AACtC,aAAOmB,QAAQ,CAACwB,QAAQ,CAAC3C,KAAD,CAAT,CAAf;AACD,KAFM,MAEA,IAAIL,GAAG,CAACK,KAAD,EAAQ,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAAR,CAAP,EAAiC;AACtC,aAAOmB,QAAQ,CAACnB,KAAD,CAAf;AACF;AACF;;AAEA,QAAM,IAAI4C,SAAJ,0BAAgC5C,KAAK,IAAI,IAATA,GAAgBA,KAAhBA,GAAyB6C,MAAM,CAAC7C,KAAD,CAAN6C,IAAkB7C,KAAK,CAAS8C,WAAd9C,CAA0B+C,IAArG,4EAAN;AACF;AAEA,OAAO,SAASC,QAAT,CAAmBhD,KAAnB,EAA+B;AACpC,SAAO,CAACA,KAAK,CAACM,CAANN,IAAW,EAAZ,KAAmBA,KAAK,CAACO,CAANP,IAAW,CAA9B,IAAmCA,KAAK,CAACQ,CAAhD;AACF;AAEA,OAAO,SAASyC,UAAT,CACLjD,KADK,EAELkD,MAFK,EAGLC,YAHK,EAIG;AACR,8BAAmCnD,KAAK,CACrCoD,QADgCpD,GACrBqD,IADqBrD,GACdsD,OADctD,CACN,GADMA,EACD,EADCA,EACG4B,KADH5B,CACS,GADTA,EACc,CADdA,CAAnC;AAAA;AAAA,MAAOuD,SAAP;AAAA,MAAkBC,aAAlB;;AAGA,MAAIC,QAAQ,GAAG,EAAf;;AACA,MAAIF,SAAS,IAAIA,SAAS,IAAIL,MAA9B,EAAsC;AACpC,QAAIM,aAAa,IAAIA,aAAa,IAAIN,MAAM,CAACK,SAAD,CAA5C,EAAyD;AACvDE,cAAQ,GAAGP,MAAM,CAACK,SAAD,CAANL,CAAkBM,aAAlBN,CAAXO;AACD,KAFD,MAEO,IAAI,UAAUP,MAAM,CAACK,SAAD,CAApB,EAAiC;AACtCE,cAAQ,GAAGP,MAAM,CAACK,SAAD,CAANL,CAAkBQ,IAA7BD;AACF;AACD,GAND,MAMO,IAAIF,SAAS,IAAIA,SAAS,IAAIJ,YAA9B,EAA4C;AACjDM,YAAQ,GAAGN,YAAY,CAACI,SAAD,CAAvBE;AACF;;AAEA,SAAOA,QAAP;AACF;AAEA;;AACA,OAAO,SAAStC,QAAT,CAAmBC,IAAnB,EAAmC;AACxC,MAAQR,CAAR,GAAuBQ,IAAvB,CAAQR,CAAR;AAAA,MAAWC,CAAX,GAAuBO,IAAvB,CAAWP,CAAX;AAAA,MAAcK,CAAd,GAAuBE,IAAvB,CAAcF,CAAd;AAAA,MAAiBT,CAAjB,GAAuBW,IAAvB,CAAiBX,CAAjB;;AACA,MAAMkD,CAAC,GAAIC,SAALD,CAAKC,EAAS,EAAK;AACvB,QAAMC,CAAC,GAAG,CAACD,CAAC,GAAIhD,CAAC,GAAG,EAAV,IAAiB,CAA3B;AACA,WAAOM,CAAC,GAAGA,CAAC,GAAGL,CAAJK,GAAQ4C,IAAI,CAACC,GAALD,CAASA,IAAI,CAACE,GAALF,CAASD,CAATC,EAAY,IAAID,CAAhBC,EAAmB,CAAnBA,CAATA,EAAgC,CAAhCA,CAAnB;AACD,GAHD;;AAKA,MAAMzD,GAAG,GAAG,CAACsD,CAAC,CAAC,CAAD,CAAF,EAAOA,CAAC,CAAC,CAAD,CAAR,EAAaA,CAAC,CAAC,CAAD,CAAd,EAAmB9B,GAAnB,CAAuBX,WAAC;AAAA,WAAI4C,IAAI,CAACG,KAALH,CAAW5C,CAAC,GAAG,GAAf4C,CAAJ;AAAA,GAAxB,CAAZ;AAEA,SAAO;AAAExD,KAAC,EAAED,GAAG,CAAC,CAAD,CAAR;AAAaE,KAAC,EAAEF,GAAG,CAAC,CAAD,CAAnB;AAAwBG,KAAC,EAAEH,GAAG,CAAC,CAAD,CAA9B;AAAmCI;AAAnC,GAAP;AACF;AAEA,OAAO,SAASM,QAAT,CAAmBC,IAAnB,EAAmC;AACxC,SAAOG,QAAQ,CAACwB,QAAQ,CAAC3B,IAAD,CAAT,CAAf;AACF;AAEA;;AACA,OAAO,SAASkD,QAAT,CAAmBxD,IAAnB,EAAmC;AACxC,MAAI,CAACA,IAAL,EAAW,OAAO;AAAEE,KAAC,EAAE,CAAL;AAAQC,KAAC,EAAE,CAAX;AAAcK,KAAC,EAAE,CAAjB;AAAoBT,KAAC,EAAE;AAAvB,GAAP;AAEX,MAAMH,CAAC,GAAGI,IAAI,CAACJ,CAALI,GAAS,GAAnB;AACA,MAAMH,CAAC,GAAGG,IAAI,CAACH,CAALG,GAAS,GAAnB;AACA,MAAMF,CAAC,GAAGE,IAAI,CAACF,CAALE,GAAS,GAAnB;AACA,MAAMqD,GAAG,GAAGD,IAAI,CAACC,GAALD,CAASxD,CAATwD,EAAYvD,CAAZuD,EAAetD,CAAfsD,CAAZ;AACA,MAAME,GAAG,GAAGF,IAAI,CAACE,GAALF,CAASxD,CAATwD,EAAYvD,CAAZuD,EAAetD,CAAfsD,CAAZ;AAEA,MAAIlD,CAAC,GAAG,CAAR;;AAEA,MAAImD,GAAG,KAAKC,GAAZ,EAAiB;AACf,QAAID,GAAG,KAAKzD,CAAZ,EAAe;AACbM,OAAC,GAAG,MAAM,IAAK,CAACL,CAAC,GAAGC,CAAL,KAAWuD,GAAG,GAAGC,GAAjB,CAAX,CAAJpD;AACD,KAFD,MAEO,IAAImD,GAAG,KAAKxD,CAAZ,EAAe;AACpBK,OAAC,GAAG,MAAM,IAAK,CAACJ,CAAC,GAAGF,CAAL,KAAWyD,GAAG,GAAGC,GAAjB,CAAX,CAAJpD;AACD,KAFM,MAEA,IAAImD,GAAG,KAAKvD,CAAZ,EAAe;AACpBI,OAAC,GAAG,MAAM,IAAK,CAACN,CAAC,GAAGC,CAAL,KAAWwD,GAAG,GAAGC,GAAjB,CAAX,CAAJpD;AACF;AACF;;AAEA,MAAIA,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAGA,CAAC,GAAG,GAARA;AAEX,MAAMC,CAAC,GAAGkD,GAAG,KAAK,CAARA,GAAY,CAAZA,GAAgB,CAACA,GAAG,GAAGC,GAAP,IAAcD,GAAxC;AACA,MAAM9C,GAAG,GAAG,CAACL,CAAD,EAAIC,CAAJ,EAAOkD,GAAP,CAAZ;AAEA,SAAO;AAAEnD,KAAC,EAAEK,GAAG,CAAC,CAAD,CAAR;AAAaJ,KAAC,EAAEI,GAAG,CAAC,CAAD,CAAnB;AAAwBC,KAAC,EAAED,GAAG,CAAC,CAAD,CAA9B;AAAmCR,KAAC,EAAEC,IAAI,CAACD;AAA3C,GAAP;AACF;AAEA,OAAO,SAAS0D,QAAT,CAAmB/C,IAAnB,EAAmC;AACxC,MAAQR,CAAR,GAAuBQ,IAAvB,CAAQR,CAAR;AAAA,MAAWC,CAAX,GAAuBO,IAAvB,CAAWP,CAAX;AAAA,MAAcK,CAAd,GAAuBE,IAAvB,CAAcF,CAAd;AAAA,MAAiBT,CAAjB,GAAuBW,IAAvB,CAAiBX,CAAjB;AAEA,MAAMK,CAAC,GAAGI,CAAC,GAAIA,CAAC,GAAGL,CAAJK,GAAQ,CAAvB;AAEA,MAAMkD,MAAM,GAAGtD,CAAC,KAAK,CAANA,IAAWA,CAAC,KAAK,CAAjBA,GAAqB,CAArBA,GAAyB,CAACI,CAAC,GAAGJ,CAAL,IAAUgD,IAAI,CAACE,GAALF,CAAShD,CAATgD,EAAY,IAAIhD,CAAhBgD,CAAlD;AAEA,SAAO;AAAElD,KAAC,EAADA,CAAF;AAAKC,KAAC,EAAEuD,MAAR;AAAgBtD,KAAC,EAADA,CAAhB;AAAmBL;AAAnB,GAAP;AACF;AAEA,OAAO,SAASkC,QAAT,CAAmBhC,GAAnB,EAAkC;AACvC,MAAQC,CAAR,GAAuBD,GAAvB,CAAQC,CAAR;AAAA,MAAWC,CAAX,GAAuBF,GAAvB,CAAWE,CAAX;AAAA,MAAcC,CAAd,GAAuBH,GAAvB,CAAcG,CAAd;AAAA,MAAiBL,CAAjB,GAAuBE,GAAvB,CAAiBF,CAAjB;AAEA,MAAMS,CAAC,GAAGJ,CAAC,GAAGD,CAAC,GAAGiD,IAAI,CAACE,GAALF,CAAShD,CAATgD,EAAY,IAAIhD,CAAhBgD,CAAlB;AAEA,MAAMM,MAAM,GAAGlD,CAAC,KAAK,CAANA,GAAU,CAAVA,GAAc,IAAK,IAAIJ,CAAJ,GAAQI,CAA1C;AAEA,SAAO;AAAEN,KAAC,EAADA,CAAF;AAAKC,KAAC,EAAEuD,MAAR;AAAgBlD,KAAC,EAADA,CAAhB;AAAmBT;AAAnB,GAAP;AACF;AAEA,OAAO,SAAS4D,QAAT,CAAiBC,IAAjB,EAAgD;AAAA,MAA3BhE,CAA2B,GAAVgE,IAAU,CAA3BhE,CAA2B;AAAA,MAAxBC,CAAwB,GAAV+D,IAAU,CAAxB/D,CAAwB;AAAA,MAArBC,CAAqB,GAAV8D,IAAU,CAArB9D,CAAqB;AAAA,MAAlBC,CAAkB,GAAV6D,IAAU,CAAlB7D,CAAkB;AACrD,SAAOA,CAAC,KAAK8D,SAAN9D,iBAAyBH,CAAzBG,eAA+BF,CAA/BE,eAAqCD,CAArCC,wBAAoDH,CAApDG,eAA0DF,CAA1DE,eAAgED,CAAhEC,eAAsEA,CAAtEA,MAAP;AACF;AAEA,OAAO,SAAS+D,QAAT,CAAmBpD,IAAnB,EAAsC;AAC3C,SAAOiD,QAAQ,CAAClD,QAAQ,CAACC,IAAD,CAAT,CAAf;AACF;;AAEA,SAASqD,KAAT,CAAgBvD,CAAhB,EAA2B;AACzB,MAAMN,CAAC,GAAGkD,IAAI,CAACG,KAALH,CAAW5C,CAAX4C,EAAcV,QAAdU,CAAuB,EAAvBA,CAAV;AACA,SAAO,CAAC,KAAKY,MAAL,CAAY,CAAZ,EAAe,IAAI9D,CAAC,CAACyB,MAArB,IAA+BzB,CAAhC,EAAmC+D,WAAnC,EAAP;AACF;;AAEA,OAAO,SAASC,QAAT,CAAiBC,KAAjB,EAA6C;AAAA,MAAxBvE,CAAwB,GAAPuE,KAAO,CAAxBvE,CAAwB;AAAA,MAArBC,CAAqB,GAAPsE,KAAO,CAArBtE,CAAqB;AAAA,MAAlBC,CAAkB,GAAPqE,KAAO,CAAlBrE,CAAkB;AAAA,MAAfC,CAAe,GAAPoE,KAAO,CAAfpE,CAAe;AAClD,oBAAW,CACTgE,KAAK,CAACnE,CAAD,CADI,EAETmE,KAAK,CAAClE,CAAD,CAFI,EAGTkE,KAAK,CAACjE,CAAD,CAHI,EAITC,CAAC,KAAK8D,SAAN9D,GAAkBgE,KAAK,CAACX,IAAI,CAACG,KAALH,CAAWrD,CAAC,GAAG,GAAfqD,CAAD,CAAvBrD,GAA+C,EAJtC,EAKT8B,IALS,CAKJ,EALI,CAAX;AAMF;AAEA,OAAO,SAASG,QAAT,CAAmBR,GAAnB,EAAkC;AACvCA,KAAG,GAAG4C,QAAQ,CAAC5C,GAAD,CAAdA;;AACA,mBAAmBxC,KAAK,CAACwC,GAAD,EAAM,CAAN,CAALxC,CAAcmC,GAAdnC,CAAmBqF,WAAS;AAAA,WAAKtC,QAAQ,CAACsC,CAAD,EAAI,EAAJ,CAAb;AAAA,GAA5BrF,CAAnB;AAAA;AAAA,MAAKY,CAAL;AAAA,MAAQC,CAAR;AAAA,MAAWC,CAAX;AAAA,MAAcC,CAAd;;AACAA,GAAC,GAAGA,CAAC,KAAK8D,SAAN9D,GAAkBA,CAAlBA,GAAuBA,CAAC,GAAG,GAA/BA;AAEA,SAAO;AAAEH,KAAC,EAADA,CAAF;AAAKC,KAAC,EAADA,CAAL;AAAQC,KAAC,EAADA,CAAR;AAAWC;AAAX,GAAP;AACF;AAEA,OAAO,SAASuE,QAAT,CAAmB9C,GAAnB,EAAkC;AACvC,MAAM7B,GAAG,GAAGqC,QAAQ,CAACR,GAAD,CAApB;AACA,SAAOgC,QAAQ,CAAC7D,GAAD,CAAf;AACF;AAEA,OAAO,SAAS4E,QAAT,CAAmB7D,IAAnB,EAAmC;AACxC,SAAOwD,QAAQ,CAACzD,QAAQ,CAACC,IAAD,CAAT,CAAf;AACF;AAEA,OAAO,SAAS0D,QAAT,CAAmB5C,GAAnB,EAAqC;AAC1C,MAAIA,GAAG,CAACC,UAAJD,CAAe,GAAfA,CAAJ,EAAyB;AACvBA,OAAG,GAAGA,GAAG,CAACE,KAAJF,CAAU,CAAVA,CAANA;AACF;;AAEAA,KAAG,GAAGA,GAAG,CAACoB,OAAJpB,CAAY,eAAZA,EAA6B,GAA7BA,CAANA;;AAEA,MAAIA,GAAG,CAACG,MAAJH,KAAe,CAAfA,IAAoBA,GAAG,CAACG,MAAJH,KAAe,CAAvC,EAA0C;AACxCA,OAAG,GAAGA,GAAG,CAACN,KAAJM,CAAU,EAAVA,EAAcL,GAAdK,CAAkBgD,WAAC;AAAA,aAAIA,CAAC,GAAGA,CAAR;AAAA,KAAnBhD,EAA8BK,IAA9BL,CAAmC,EAAnCA,CAANA;AACF;;AAEA,MAAIA,GAAG,CAACG,MAAJH,KAAe,CAAnB,EAAsB;AACpBA,OAAG,GAAGtC,MAAM,CAACA,MAAM,CAACsC,GAAD,EAAM,CAAN,CAAP,EAAiB,CAAjB,EAAoB,GAApB,CAAZA;AACF;;AAEA,SAAOA,GAAP;AACF;AAEA,OAAO,SAASiD,aAAT,CACLC,QADK,EAELlC,MAFK,EAGLC,YAHK,EAIL;AACA,SAAOiC,QAAQ,CAAC9B,OAAT8B,CAAiB,oCAAjBA,EAAuDF,WAAC,EAAI;AACjE,WAAOjC,UAAU,CAACiC,CAAD,EAAIhC,MAAJ,EAAYC,YAAZ,CAAVF,IAAuCiC,CAA9C;AACD,GAFME,EAEJ9B,OAFI8B,CAEI,2BAFJA,EAEiCF,WAAC,EAAI;AAC3C,WAAO,UAAUG,MAAM,CAAC3D,MAAP2D,CAAc3C,QAAQ,CAACoC,QAAQ,CAACI,CAAC,CAAC5B,OAAF4B,CAAU,QAAVA,EAAoB,EAApBA,CAAD,CAAT,CAAtBG,EAA2DjD,KAA3DiD,CAAiE,CAAjEA,EAAoE,CAApEA,EAAuE9C,IAAvE8C,CAA4E,GAA5EA,CAAjB;AACD,GAJMD,CAAP;AAKF;AAEA,OAAO,SAASE,OAAT,CAAkBC,KAAlB,EAA8BC,MAA9B,EAAmD;AACxD,MAAMC,GAAG,GAAG5F,MAAM,CAAC6F,OAAP7F,CAAeC,IAAI,CAAC6F,KAAL7F,CAAWyF,KAAXzF,CAAfD,CAAZ;AACA4F,KAAG,CAAC,CAAD,CAAHA,GAASA,GAAG,CAAC,CAAD,CAAHA,GAASD,MAAM,GAAG,EAA3BC;AAEA,SAAO3F,IAAI,CAAC4F,OAAL5F,CAAaD,MAAM,CAAC8F,KAAP9F,CAAa4F,GAAb5F,CAAbC,CAAP;AACF;AAEA,OAAO,SAAS8F,MAAT,CAAiBL,KAAjB,EAA6BC,MAA7B,EAAkD;AACvD,MAAMC,GAAG,GAAG5F,MAAM,CAAC6F,OAAP7F,CAAeC,IAAI,CAAC6F,KAAL7F,CAAWyF,KAAXzF,CAAfD,CAAZ;AACA4F,KAAG,CAAC,CAAD,CAAHA,GAASA,GAAG,CAAC,CAAD,CAAHA,GAASD,MAAM,GAAG,EAA3BC;AAEA,SAAO3F,IAAI,CAAC4F,OAAL5F,CAAaD,MAAM,CAAC8F,KAAP9F,CAAa4F,GAAb5F,CAAbC,CAAP;AACF;AAEA;AACA;AACA;AACA;;AACA,OAAO,SAAS+F,OAAT,CAAkB7F,KAAlB,EAAgC;AACrC,MAAMK,GAAG,GAAGgB,UAAU,CAACrB,KAAD,CAAtB;AAEA,SAAOF,IAAI,CAAC6F,KAAL7F,CAAWO,GAAXP,EAAgB,CAAhBA,CAAP;AACF;AAEA;AACA;AACA;AACA;;AACA,OAAO,SAASgG,WAAT,CAAsBC,KAAtB,EAAoCC,MAApC,EAAmD;AACxD,MAAMC,EAAE,GAAGJ,OAAO,CAACE,KAAD,CAAlB;AACA,MAAMG,EAAE,GAAGL,OAAO,CAACG,MAAD,CAAlB;AAEA,MAAMG,KAAK,GAAGrC,IAAI,CAACC,GAALD,CAASmC,EAATnC,EAAaoC,EAAbpC,CAAd;AACA,MAAMsC,IAAI,GAAGtC,IAAI,CAACE,GAALF,CAASmC,EAATnC,EAAaoC,EAAbpC,CAAb;AAEA,SAAO,CAACqC,KAAK,GAAG,IAAT,KAAkBC,IAAI,GAAG,IAAzB,CAAP;AACF;AAEA,OAAO,SAASC,aAAT,CAAwBrG,KAAxB,EAAsC;AAC3C,MAAMsG,aAAa,GAAGxC,IAAI,CAACyC,GAALzC,CAAStE,YAAY,CAAC6B,UAAU,CAAC,CAAD,CAAX,EAAgBA,UAAU,CAACrB,KAAD,CAA1B,CAArB8D,CAAtB;AACA,MAAM0C,aAAa,GAAG1C,IAAI,CAACyC,GAALzC,CAAStE,YAAY,CAAC6B,UAAU,CAAC,QAAD,CAAX,EAAuBA,UAAU,CAACrB,KAAD,CAAjC,CAArB8D,CAAtB,CAF2C,CAI3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,SAAO0C,aAAa,GAAG1C,IAAI,CAACE,GAALF,CAASwC,aAATxC,EAAwB,EAAxBA,CAAhB0C,GAA8C,MAA9CA,GAAuD,MAA9D;AACF","names":["APCAcontrast","consoleWarn","chunk","has","padEnd","CIELAB","sRGB","isCssColor","color","test","isParsableColor","cssColorRe","mappers","rgb","r","g","b","a","rgba","hsl","h","s","l","HSLtoRGB","hsla","hsv","v","HSVtoRGB","hsva","parseColor","isNaN","match","groups","fn","values","realValues","split","map","i","endsWith","includes","parseFloat","hex","startsWith","slice","length","char","join","int","parseInt","HexToRGB","HSLtoHSV","TypeError","String","constructor","name","RGBToInt","classToHex","colors","currentTheme","toString","trim","replace","colorName","colorModifier","hexColor","base","f","n","k","Math","max","min","round","RGBtoHSV","HSVtoHSL","sprime","RGBtoCSS","_ref","undefined","HSVtoCSS","toHex","substr","toUpperCase","RGBtoHex","_ref2","parseHex","c","HexToHSV","HSVtoHex","x","parseGradient","gradient","Object","lighten","value","amount","lab","fromXYZ","toXYZ","darken","getLuma","getContrast","first","second","l1","l2","light","dark","getForeground","blackContrast","abs","whiteContrast"],"sources":["../../src/util/colorUtils.ts"],"sourcesContent":["// Utilities\nimport { APCAcontrast } from './color/APCA'\nimport { consoleWarn } from './console'\nimport { chunk, has, padEnd } from './helpers'\nimport * as CIELAB from '@/util/color/transformCIELAB'\nimport * as sRGB from '@/util/color/transformSRGB'\n\n// Types\nimport type { Colors } from '@/composables/theme'\n\nexport type XYZ = [number, number, number]\nexport type LAB = [number, number, number]\nexport type HSV = { h: number, s: number, v: number, a?: number }\nexport type RGB = { r: number, g: number, b: number, a?: number }\nexport type HSL = { h: number, s: number, l: number, a?: number }\nexport type Hex = string & { __hexBrand: never }\nexport type Color = string | number | HSV | RGB | HSL\n\nexport function isCssColor (color?: string | null | false): boolean {\n  return !!color && /^(#|var\\(--|(rgb|hsl)a?\\()/.test(color)\n}\n\nexport function isParsableColor (color: string): boolean {\n  return isCssColor(color) && !/^((rgb|hsl)a?\\()?var\\(--/.test(color)\n}\n\nconst cssColorRe = /^(?<fn>(?:rgb|hsl)a?)\\((?<values>.+)\\)/\nconst mappers = {\n  rgb: (r: number, g: number, b: number, a?: number) => ({ r, g, b, a }),\n  rgba: (r: number, g: number, b: number, a?: number) => ({ r, g, b, a }),\n  hsl: (h: number, s: number, l: number, a?: number) => HSLtoRGB({ h, s, l, a }),\n  hsla: (h: number, s: number, l: number, a?: number) => HSLtoRGB({ h, s, l, a }),\n  hsv: (h: number, s: number, v: number, a?: number) => HSVtoRGB({ h, s, v, a }),\n  hsva: (h: number, s: number, v: number, a?: number) => HSVtoRGB({ h, s, v, a }),\n}\n\nexport function parseColor (color: Color): RGB {\n  if (typeof color === 'number') {\n    if (isNaN(color) || color < 0 || color > 0xFFFFFF) { // int can't have opacity\n      consoleWarn(`'${color}' is not a valid hex color`)\n    }\n\n    return {\n      r: (color & 0xFF0000) >> 16,\n      g: (color & 0xFF00) >> 8,\n      b: (color & 0xFF),\n    }\n  } else if (typeof color === 'string' && cssColorRe.test(color)) {\n    const { groups } = color.match(cssColorRe)!\n    const { fn, values } = groups as { fn: keyof typeof mappers, values: string }\n    const realValues = values.split(/,\\s*|\\s*\\/\\s*|\\s+/)\n      .map((v, i) => {\n        if (\n          v.endsWith('%') ||\n          // unitless slv are %\n          (i > 0 && i < 3 && ['hsl', 'hsla', 'hsv', 'hsva'].includes(fn))\n        ) {\n          return parseFloat(v) / 100\n        } else {\n          return parseFloat(v)\n        }\n      }) as [number, number, number, number?]\n\n    return mappers[fn](...realValues)\n  } else if (typeof color === 'string') {\n    let hex = color.startsWith('#') ? color.slice(1) : color\n\n    if ([3, 4].includes(hex.length)) {\n      hex = hex.split('').map(char => char + char).join('')\n    } else if (![6, 8].includes(hex.length)) {\n      consoleWarn(`'${color}' is not a valid hex(a) color`)\n    }\n\n    const int = parseInt(hex, 16)\n    if (isNaN(int) || int < 0 || int > 0xFFFFFFFF) {\n      consoleWarn(`'${color}' is not a valid hex(a) color`)\n    }\n\n    return HexToRGB(hex as Hex)\n  } else if (typeof color === 'object') {\n    if (has(color, ['r', 'g', 'b'])) {\n      return color\n    } else if (has(color, ['h', 's', 'l'])) {\n      return HSVtoRGB(HSLtoHSV(color))\n    } else if (has(color, ['h', 's', 'v'])) {\n      return HSVtoRGB(color)\n    }\n  }\n\n  throw new TypeError(`Invalid color: ${color == null ? color : (String(color) || (color as any).constructor.name)}\\nExpected #hex, #hexa, rgb(), rgba(), hsl(), hsla(), object or number`)\n}\n\nexport function RGBToInt (color: RGB) {\n  return (color.r << 16) + (color.g << 8) + color.b\n}\n\nexport function classToHex (\n  color: string,\n  colors: Record<string, Record<string, string>>,\n  currentTheme: Partial<Colors>,\n): string {\n  const [colorName, colorModifier] = color\n    .toString().trim().replace('-', '').split(' ', 2) as (string | undefined)[]\n\n  let hexColor = ''\n  if (colorName && colorName in colors) {\n    if (colorModifier && colorModifier in colors[colorName]) {\n      hexColor = colors[colorName][colorModifier]\n    } else if ('base' in colors[colorName]) {\n      hexColor = colors[colorName].base\n    }\n  } else if (colorName && colorName in currentTheme) {\n    hexColor = currentTheme[colorName] as string\n  }\n\n  return hexColor\n}\n\n/** Converts HSVA to RGBA. Based on formula from https://en.wikipedia.org/wiki/HSL_and_HSV */\nexport function HSVtoRGB (hsva: HSV): RGB {\n  const { h, s, v, a } = hsva\n  const f = (n: number) => {\n    const k = (n + (h / 60)) % 6\n    return v - v * s * Math.max(Math.min(k, 4 - k, 1), 0)\n  }\n\n  const rgb = [f(5), f(3), f(1)].map(v => Math.round(v * 255))\n\n  return { r: rgb[0], g: rgb[1], b: rgb[2], a }\n}\n\nexport function HSLtoRGB (hsla: HSL): RGB {\n  return HSVtoRGB(HSLtoHSV(hsla))\n}\n\n/** Converts RGBA to HSVA. Based on formula from https://en.wikipedia.org/wiki/HSL_and_HSV */\nexport function RGBtoHSV (rgba: RGB): HSV {\n  if (!rgba) return { h: 0, s: 1, v: 1, a: 1 }\n\n  const r = rgba.r / 255\n  const g = rgba.g / 255\n  const b = rgba.b / 255\n  const max = Math.max(r, g, b)\n  const min = Math.min(r, g, b)\n\n  let h = 0\n\n  if (max !== min) {\n    if (max === r) {\n      h = 60 * (0 + ((g - b) / (max - min)))\n    } else if (max === g) {\n      h = 60 * (2 + ((b - r) / (max - min)))\n    } else if (max === b) {\n      h = 60 * (4 + ((r - g) / (max - min)))\n    }\n  }\n\n  if (h < 0) h = h + 360\n\n  const s = max === 0 ? 0 : (max - min) / max\n  const hsv = [h, s, max]\n\n  return { h: hsv[0], s: hsv[1], v: hsv[2], a: rgba.a }\n}\n\nexport function HSVtoHSL (hsva: HSV): HSL {\n  const { h, s, v, a } = hsva\n\n  const l = v - (v * s / 2)\n\n  const sprime = l === 1 || l === 0 ? 0 : (v - l) / Math.min(l, 1 - l)\n\n  return { h, s: sprime, l, a }\n}\n\nexport function HSLtoHSV (hsl: HSL): HSV {\n  const { h, s, l, a } = hsl\n\n  const v = l + s * Math.min(l, 1 - l)\n\n  const sprime = v === 0 ? 0 : 2 - (2 * l / v)\n\n  return { h, s: sprime, v, a }\n}\n\nexport function RGBtoCSS ({ r, g, b, a }: RGB): string {\n  return a === undefined ? `rgb(${r}, ${g}, ${b})` : `rgba(${r}, ${g}, ${b}, ${a})`\n}\n\nexport function HSVtoCSS (hsva: HSV): string {\n  return RGBtoCSS(HSVtoRGB(hsva))\n}\n\nfunction toHex (v: number) {\n  const h = Math.round(v).toString(16)\n  return ('00'.substr(0, 2 - h.length) + h).toUpperCase()\n}\n\nexport function RGBtoHex ({ r, g, b, a }: RGB): Hex {\n  return `#${[\n    toHex(r),\n    toHex(g),\n    toHex(b),\n    a !== undefined ? toHex(Math.round(a * 255)) : '',\n  ].join('')}` as Hex\n}\n\nexport function HexToRGB (hex: Hex): RGB {\n  hex = parseHex(hex)\n  let [r, g, b, a] = chunk(hex, 2).map((c: string) => parseInt(c, 16))\n  a = a === undefined ? a : (a / 255)\n\n  return { r, g, b, a }\n}\n\nexport function HexToHSV (hex: Hex): HSV {\n  const rgb = HexToRGB(hex)\n  return RGBtoHSV(rgb)\n}\n\nexport function HSVtoHex (hsva: HSV): Hex {\n  return RGBtoHex(HSVtoRGB(hsva))\n}\n\nexport function parseHex (hex: string): Hex {\n  if (hex.startsWith('#')) {\n    hex = hex.slice(1)\n  }\n\n  hex = hex.replace(/([^0-9a-f])/gi, 'F')\n\n  if (hex.length === 3 || hex.length === 4) {\n    hex = hex.split('').map(x => x + x).join('')\n  }\n\n  if (hex.length !== 6) {\n    hex = padEnd(padEnd(hex, 6), 8, 'F')\n  }\n\n  return hex as Hex\n}\n\nexport function parseGradient (\n  gradient: string,\n  colors: Record<string, Record<string, string>>,\n  currentTheme: Partial<Colors>,\n) {\n  return gradient.replace(/([a-z]+(\\s[a-z]+-[1-5])?)(?=$|,)/gi, x => {\n    return classToHex(x, colors, currentTheme) || x\n  }).replace(/(rgba\\()#[0-9a-f]+(?=,)/gi, x => {\n    return 'rgba(' + Object.values(HexToRGB(parseHex(x.replace(/rgba\\(/, '')))).slice(0, 3).join(',')\n  })\n}\n\nexport function lighten (value: RGB, amount: number): RGB {\n  const lab = CIELAB.fromXYZ(sRGB.toXYZ(value))\n  lab[0] = lab[0] + amount * 10\n\n  return sRGB.fromXYZ(CIELAB.toXYZ(lab))\n}\n\nexport function darken (value: RGB, amount: number): RGB {\n  const lab = CIELAB.fromXYZ(sRGB.toXYZ(value))\n  lab[0] = lab[0] - amount * 10\n\n  return sRGB.fromXYZ(CIELAB.toXYZ(lab))\n}\n\n/**\n * Calculate the relative luminance of a given color\n * @see https://www.w3.org/TR/WCAG20/#relativeluminancedef\n */\nexport function getLuma (color: Color) {\n  const rgb = parseColor(color)\n\n  return sRGB.toXYZ(rgb)[1]\n}\n\n/**\n * Returns the contrast ratio (1-21) between two colors.\n * @see https://www.w3.org/TR/WCAG20/#contrast-ratiodef\n */\nexport function getContrast (first: Color, second: Color) {\n  const l1 = getLuma(first)\n  const l2 = getLuma(second)\n\n  const light = Math.max(l1, l2)\n  const dark = Math.min(l1, l2)\n\n  return (light + 0.05) / (dark + 0.05)\n}\n\nexport function getForeground (color: Color) {\n  const blackContrast = Math.abs(APCAcontrast(parseColor(0), parseColor(color)))\n  const whiteContrast = Math.abs(APCAcontrast(parseColor(0xffffff), parseColor(color)))\n\n  // TODO: warn about poor color selections\n  // const contrastAsText = Math.abs(APCAcontrast(colorVal, colorToInt(theme.colors.background)))\n  // const minContrast = Math.max(blackContrast, whiteContrast)\n  // if (minContrast < 60) {\n  //   consoleInfo(`${key} theme color ${color} has poor contrast (${minContrast.toFixed()}%)`)\n  // } else if (contrastAsText < 60 && !['background', 'surface'].includes(color)) {\n  //   consoleInfo(`${key} theme color ${color} has poor contrast as text (${contrastAsText.toFixed()}%)`)\n  // }\n\n  // Prefer white text if both have an acceptable contrast ratio\n  return whiteContrast > Math.min(blackContrast, 50) ? '#fff' : '#000'\n}\n"]},"metadata":{},"sourceType":"module"}