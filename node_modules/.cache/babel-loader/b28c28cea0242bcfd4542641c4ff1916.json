{"ast":null,"code":"import { createVNode as _createVNode } from \"vue\"; // Styles\n\nimport \"./VExpansionPanel.css\"; // Components\n\nimport { VExpansionPanelSymbol } from \"./shared.js\";\nimport { makeVExpansionPanelProps } from \"./VExpansionPanel.js\"; // Composables\n\nimport { makeComponentProps } from \"../../composables/component.js\";\nimport { provideDefaults } from \"../../composables/defaults.js\";\nimport { makeGroupProps, useGroup } from \"../../composables/group.js\";\nimport { makeTagProps } from \"../../composables/tag.js\";\nimport { makeThemeProps, provideTheme } from \"../../composables/theme.js\"; // Utilities\n\nimport { computed, toRef } from 'vue';\nimport { genericComponent, pick, propsFactory, useRender } from \"../../util/index.js\"; // Types\n\nconst allowedVariants = ['default', 'accordion', 'inset', 'popout'];\nexport const makeVExpansionPanelsProps = propsFactory({\n  flat: Boolean,\n  ...makeGroupProps(),\n  ...pick(makeVExpansionPanelProps(), ['bgColor', 'collapseIcon', 'color', 'eager', 'elevation', 'expandIcon', 'focusable', 'hideActions', 'readonly', 'ripple', 'rounded', 'tile', 'static']),\n  ...makeThemeProps(),\n  ...makeComponentProps(),\n  ...makeTagProps(),\n  variant: {\n    type: String,\n    default: 'default',\n    validator: v => allowedVariants.includes(v)\n  }\n}, 'VExpansionPanels');\nexport const VExpansionPanels = genericComponent()({\n  name: 'VExpansionPanels',\n  props: makeVExpansionPanelsProps(),\n  emits: {\n    'update:modelValue': val => true\n  },\n\n  setup(props, _ref) {\n    let {\n      slots\n    } = _ref;\n    const {\n      next,\n      prev\n    } = useGroup(props, VExpansionPanelSymbol);\n    const {\n      themeClasses\n    } = provideTheme(props);\n    const variantClass = computed(() => props.variant && `v-expansion-panels--variant-${props.variant}`);\n    provideDefaults({\n      VExpansionPanel: {\n        bgColor: toRef(props, 'bgColor'),\n        collapseIcon: toRef(props, 'collapseIcon'),\n        color: toRef(props, 'color'),\n        eager: toRef(props, 'eager'),\n        elevation: toRef(props, 'elevation'),\n        expandIcon: toRef(props, 'expandIcon'),\n        focusable: toRef(props, 'focusable'),\n        hideActions: toRef(props, 'hideActions'),\n        readonly: toRef(props, 'readonly'),\n        ripple: toRef(props, 'ripple'),\n        rounded: toRef(props, 'rounded'),\n        static: toRef(props, 'static')\n      }\n    });\n    useRender(() => _createVNode(props.tag, {\n      \"class\": ['v-expansion-panels', {\n        'v-expansion-panels--flat': props.flat,\n        'v-expansion-panels--tile': props.tile\n      }, themeClasses.value, variantClass.value, props.class],\n      \"style\": props.style\n    }, {\n      default: () => [slots.default?.({\n        prev,\n        next\n      })]\n    }));\n    return {\n      next,\n      prev\n    };\n  }\n\n});","map":{"version":3,"mappings":"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","names":["VExpansionPanelSymbol","makeVExpansionPanelProps","makeComponentProps","provideDefaults","makeGroupProps","useGroup","makeTagProps","makeThemeProps","provideTheme","computed","toRef","genericComponent","pick","propsFactory","useRender","allowedVariants","makeVExpansionPanelsProps","flat","Boolean","variant","type","String","default","validator","v","includes","VExpansionPanels","name","props","emits","val","setup","_ref","slots","next","prev","themeClasses","variantClass","VExpansionPanel","bgColor","collapseIcon","color","eager","elevation","expandIcon","focusable","hideActions","readonly","ripple","rounded","static","tile","value","class","style"],"sources":["../../../src/components/VExpansionPanel/VExpansionPanels.tsx"],"sourcesContent":["// Styles\nimport './VExpansionPanel.sass'\n\n// Components\nimport { VExpansionPanelSymbol } from './shared'\nimport { makeVExpansionPanelProps } from './VExpansionPanel'\n\n// Composables\nimport { makeComponentProps } from '@/composables/component'\nimport { provideDefaults } from '@/composables/defaults'\nimport { makeGroupProps, useGroup } from '@/composables/group'\nimport { makeTagProps } from '@/composables/tag'\nimport { makeThemeProps, provideTheme } from '@/composables/theme'\n\n// Utilities\nimport { computed, toRef } from 'vue'\nimport { genericComponent, pick, propsFactory, useRender } from '@/util'\n\n// Types\nimport type { PropType } from 'vue'\n\nconst allowedVariants = ['default', 'accordion', 'inset', 'popout'] as const\n\ntype Variant = typeof allowedVariants[number]\n\nexport type VExpansionPanelSlot = {\n  prev: () => void\n  next: () => void\n}\n\nexport type VExpansionPanelSlots = {\n  default: VExpansionPanelSlot\n}\n\nexport const makeVExpansionPanelsProps = propsFactory({\n  flat: Boolean,\n\n  ...makeGroupProps(),\n  ...pick(makeVExpansionPanelProps(), [\n    'bgColor',\n    'collapseIcon',\n    'color',\n    'eager',\n    'elevation',\n    'expandIcon',\n    'focusable',\n    'hideActions',\n    'readonly',\n    'ripple',\n    'rounded',\n    'tile',\n    'static',\n  ]),\n  ...makeThemeProps(),\n  ...makeComponentProps(),\n  ...makeTagProps(),\n\n  variant: {\n    type: String as PropType<Variant>,\n    default: 'default',\n    validator: (v: any) => allowedVariants.includes(v),\n  },\n}, 'VExpansionPanels')\n\nexport const VExpansionPanels = genericComponent<VExpansionPanelSlots>()({\n  name: 'VExpansionPanels',\n\n  props: makeVExpansionPanelsProps(),\n\n  emits: {\n    'update:modelValue': (val: unknown) => true,\n  },\n\n  setup (props, { slots }) {\n    const { next, prev } = useGroup(props, VExpansionPanelSymbol)\n\n    const { themeClasses } = provideTheme(props)\n\n    const variantClass = computed(() => props.variant && `v-expansion-panels--variant-${props.variant}`)\n\n    provideDefaults({\n      VExpansionPanel: {\n        bgColor: toRef(props, 'bgColor'),\n        collapseIcon: toRef(props, 'collapseIcon'),\n        color: toRef(props, 'color'),\n        eager: toRef(props, 'eager'),\n        elevation: toRef(props, 'elevation'),\n        expandIcon: toRef(props, 'expandIcon'),\n        focusable: toRef(props, 'focusable'),\n        hideActions: toRef(props, 'hideActions'),\n        readonly: toRef(props, 'readonly'),\n        ripple: toRef(props, 'ripple'),\n        rounded: toRef(props, 'rounded'),\n        static: toRef(props, 'static'),\n      },\n    })\n\n    useRender(() => (\n      <props.tag\n        class={[\n          'v-expansion-panels',\n          {\n            'v-expansion-panels--flat': props.flat,\n            'v-expansion-panels--tile': props.tile,\n          },\n          themeClasses.value,\n          variantClass.value,\n          props.class,\n        ]}\n        style={ props.style }\n      >\n        { slots.default?.({ prev, next }) }\n      </props.tag>\n    ))\n\n    return {\n      next,\n      prev,\n    }\n  },\n})\n\nexport type VExpansionPanels = InstanceType<typeof VExpansionPanels>\n"]},"metadata":{},"sourceType":"module"}