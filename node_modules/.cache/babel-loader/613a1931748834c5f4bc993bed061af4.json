{"ast":null,"code":"import { createVNode as _createVNode } from \"vue\"; // Styles\n\nimport \"./VColorPickerEdit.css\"; // Components\n\nimport { VBtn } from \"../VBtn/index.js\"; // Composables\n\nimport { makeComponentProps } from \"../../composables/component.js\"; // Utilities\n\nimport { computed } from 'vue';\nimport { modes, nullColor } from \"./util/index.js\";\nimport { defineComponent, propsFactory, useRender } from \"../../util/index.js\"; // Types\n\nconst VColorPickerInput = _ref => {\n  let {\n    label,\n    ...rest\n  } = _ref;\n  return _createVNode(\"div\", {\n    \"class\": \"v-color-picker-edit__input\"\n  }, [_createVNode(\"input\", rest, null), _createVNode(\"span\", null, [label])]);\n};\n\nexport const makeVColorPickerEditProps = propsFactory({\n  color: Object,\n  disabled: Boolean,\n  mode: {\n    type: String,\n    default: 'rgba',\n    validator: v => Object.keys(modes).includes(v)\n  },\n  modes: {\n    type: Array,\n    default: () => Object.keys(modes),\n    validator: v => Array.isArray(v) && v.every(m => Object.keys(modes).includes(m))\n  },\n  ...makeComponentProps()\n}, 'VColorPickerEdit');\nexport const VColorPickerEdit = defineComponent({\n  name: 'VColorPickerEdit',\n  props: makeVColorPickerEditProps(),\n  emits: {\n    'update:color': color => true,\n    'update:mode': mode => true\n  },\n\n  setup(props, _ref2) {\n    let {\n      emit\n    } = _ref2;\n    const enabledModes = computed(() => {\n      return props.modes.map(key => ({ ...modes[key],\n        name: key\n      }));\n    });\n    const inputs = computed(() => {\n      const mode = enabledModes.value.find(m => m.name === props.mode);\n      if (!mode) return [];\n      const color = props.color ? mode.to(props.color) : null;\n      return mode.inputs?.map(_ref3 => {\n        let {\n          getValue,\n          getColor,\n          ...inputProps\n        } = _ref3;\n        return { ...mode.inputProps,\n          ...inputProps,\n          disabled: props.disabled,\n          value: color && getValue(color),\n          onChange: e => {\n            const target = e.target;\n            if (!target) return;\n            emit('update:color', mode.from(getColor(color ?? mode.to(nullColor), target.value)));\n          }\n        };\n      });\n    });\n    useRender(() => _createVNode(\"div\", {\n      \"class\": ['v-color-picker-edit', props.class],\n      \"style\": props.style\n    }, [inputs.value?.map(props => _createVNode(VColorPickerInput, props, null)), enabledModes.value.length > 1 && _createVNode(VBtn, {\n      \"icon\": \"$unfold\",\n      \"size\": \"x-small\",\n      \"variant\": \"plain\",\n      \"onClick\": () => {\n        const mi = enabledModes.value.findIndex(m => m.name === props.mode);\n        emit('update:mode', enabledModes.value[(mi + 1) % enabledModes.value.length].name);\n      }\n    }, null)]));\n    return {};\n  }\n\n});","map":{"version":3,"mappings":"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","names":["VBtn","makeComponentProps","computed","modes","nullColor","defineComponent","propsFactory","useRender","VColorPickerInput","_ref","label","rest","_createVNode","makeVColorPickerEditProps","color","Object","disabled","Boolean","mode","type","String","default","validator","v","keys","includes","Array","isArray","every","m","VColorPickerEdit","name","props","emits","setup","_ref2","emit","enabledModes","map","key","inputs","value","find","to","_ref3","getValue","getColor","inputProps","onChange","e","target","from","class","style","length","onClick","mi","findIndex"],"sources":["../../../src/components/VColorPicker/VColorPickerEdit.tsx"],"sourcesContent":["// Styles\nimport './VColorPickerEdit.sass'\n\n// Components\nimport { VBtn } from '@/components/VBtn'\n\n// Composables\nimport { makeComponentProps } from '@/composables/component'\n\n// Utilities\nimport { computed } from 'vue'\nimport { modes, nullColor } from './util'\nimport { defineComponent, propsFactory, useRender } from '@/util'\n\n// Types\nimport type { PropType } from 'vue'\nimport type { HSV } from '@/util/colorUtils'\n\nconst VColorPickerInput = ({ label, ...rest }: any) => {\n  return (\n    <div\n      class=\"v-color-picker-edit__input\"\n    >\n      <input { ...rest } />\n      <span>{ label }</span>\n    </div>\n  )\n}\n\nexport const makeVColorPickerEditProps = propsFactory({\n  color: Object as PropType<HSV | null>,\n  disabled: Boolean,\n  mode: {\n    type: String as PropType<keyof typeof modes>,\n    default: 'rgba',\n    validator: (v: string) => Object.keys(modes).includes(v),\n  },\n  modes: {\n    type: Array as PropType<readonly (keyof typeof modes)[]>,\n    default: () => Object.keys(modes),\n    validator: (v: any) => Array.isArray(v) && v.every(m => Object.keys(modes).includes(m)),\n  },\n\n  ...makeComponentProps(),\n}, 'VColorPickerEdit')\n\nexport const VColorPickerEdit = defineComponent({\n  name: 'VColorPickerEdit',\n\n  props: makeVColorPickerEditProps(),\n\n  emits: {\n    'update:color': (color: HSV) => true,\n    'update:mode': (mode: keyof typeof modes) => true,\n  },\n\n  setup (props, { emit }) {\n    const enabledModes = computed(() => {\n      return props.modes.map(key => ({ ...modes[key], name: key }))\n    })\n\n    const inputs = computed(() => {\n      const mode = enabledModes.value.find(m => m.name === props.mode)\n\n      if (!mode) return []\n\n      const color = props.color ? mode.to(props.color) : null\n\n      return mode.inputs?.map(({ getValue, getColor, ...inputProps }) => {\n        return {\n          ...mode.inputProps,\n          ...inputProps,\n          disabled: props.disabled,\n          value: color && getValue(color),\n          onChange: (e: InputEvent) => {\n            const target = e.target as HTMLInputElement | null\n\n            if (!target) return\n\n            emit('update:color', mode.from(getColor(color ?? mode.to(nullColor), target.value)))\n          },\n        }\n      })\n    })\n\n    useRender(() => (\n      <div\n        class={[\n          'v-color-picker-edit',\n          props.class,\n        ]}\n        style={ props.style }\n      >\n        { inputs.value?.map(props => (\n          <VColorPickerInput { ...props } />\n        ))}\n        { enabledModes.value.length > 1 && (\n          <VBtn\n            icon=\"$unfold\"\n            size=\"x-small\"\n            variant=\"plain\"\n            onClick={ () => {\n              const mi = enabledModes.value.findIndex(m => m.name === props.mode)\n\n              emit('update:mode', enabledModes.value[(mi + 1) % enabledModes.value.length].name)\n            }}\n          />\n        )}\n      </div>\n    ))\n\n    return {}\n  },\n})\n\nexport type VColorPickerEdit = InstanceType<typeof VColorPickerEdit>\n"]},"metadata":{},"sourceType":"module"}