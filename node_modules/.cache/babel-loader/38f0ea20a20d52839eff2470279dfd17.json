{"ast":null,"code":"// Utilities\nimport { keys } from \"../../util/index.js\"; // Types\n\nconst handleGesture = wrapper => {\n  const {\n    touchstartX,\n    touchendX,\n    touchstartY,\n    touchendY\n  } = wrapper;\n  const dirRatio = 0.5;\n  const minDistance = 16;\n  wrapper.offsetX = touchendX - touchstartX;\n  wrapper.offsetY = touchendY - touchstartY;\n\n  if (Math.abs(wrapper.offsetY) < dirRatio * Math.abs(wrapper.offsetX)) {\n    wrapper.left && touchendX < touchstartX - minDistance && wrapper.left(wrapper);\n    wrapper.right && touchendX > touchstartX + minDistance && wrapper.right(wrapper);\n  }\n\n  if (Math.abs(wrapper.offsetX) < dirRatio * Math.abs(wrapper.offsetY)) {\n    wrapper.up && touchendY < touchstartY - minDistance && wrapper.up(wrapper);\n    wrapper.down && touchendY > touchstartY + minDistance && wrapper.down(wrapper);\n  }\n};\n\nfunction touchstart(event, wrapper) {\n  const touch = event.changedTouches[0];\n  wrapper.touchstartX = touch.clientX;\n  wrapper.touchstartY = touch.clientY;\n  wrapper.start?.({\n    originalEvent: event,\n    ...wrapper\n  });\n}\n\nfunction touchend(event, wrapper) {\n  const touch = event.changedTouches[0];\n  wrapper.touchendX = touch.clientX;\n  wrapper.touchendY = touch.clientY;\n  wrapper.end?.({\n    originalEvent: event,\n    ...wrapper\n  });\n  handleGesture(wrapper);\n}\n\nfunction touchmove(event, wrapper) {\n  const touch = event.changedTouches[0];\n  wrapper.touchmoveX = touch.clientX;\n  wrapper.touchmoveY = touch.clientY;\n  wrapper.move?.({\n    originalEvent: event,\n    ...wrapper\n  });\n}\n\nfunction createHandlers() {\n  let value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const wrapper = {\n    touchstartX: 0,\n    touchstartY: 0,\n    touchendX: 0,\n    touchendY: 0,\n    touchmoveX: 0,\n    touchmoveY: 0,\n    offsetX: 0,\n    offsetY: 0,\n    left: value.left,\n    right: value.right,\n    up: value.up,\n    down: value.down,\n    start: value.start,\n    move: value.move,\n    end: value.end\n  };\n  return {\n    touchstart: e => touchstart(e, wrapper),\n    touchend: e => touchend(e, wrapper),\n    touchmove: e => touchmove(e, wrapper)\n  };\n}\n\nfunction mounted(el, binding) {\n  const value = binding.value;\n  const target = value?.parent ? el.parentElement : el;\n  const options = value?.options ?? {\n    passive: true\n  };\n  const uid = binding.instance?.$.uid; // TODO: use custom uid generator\n\n  if (!target || !uid) return;\n  const handlers = createHandlers(binding.value);\n  target._touchHandlers = target._touchHandlers ?? Object.create(null);\n  target._touchHandlers[uid] = handlers;\n  keys(handlers).forEach(eventName => {\n    target.addEventListener(eventName, handlers[eventName], options);\n  });\n}\n\nfunction unmounted(el, binding) {\n  const target = binding.value?.parent ? el.parentElement : el;\n  const uid = binding.instance?.$.uid;\n  if (!target?._touchHandlers || !uid) return;\n  const handlers = target._touchHandlers[uid];\n  keys(handlers).forEach(eventName => {\n    target.removeEventListener(eventName, handlers[eventName]);\n  });\n  delete target._touchHandlers[uid];\n}\n\nexport const Touch = {\n  mounted,\n  unmounted\n};\nexport default Touch;","map":{"version":3,"mappings":"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","names":["keys","handleGesture","wrapper","touchstartX","touchendX","touchstartY","touchendY","dirRatio","minDistance","offsetX","offsetY","Math","abs","left","right","up","down","touchstart","event","touch","changedTouches","clientX","clientY","start","originalEvent","touchend","end","touchmove","touchmoveX","touchmoveY","move","createHandlers","value","e","mounted","el","binding","target","parent","parentElement","options","passive","uid","instance","$","handlers","_touchHandlers","Object","create","forEach","eventName","addEventListener","unmounted","removeEventListener","Touch"],"sources":["../../../src/directives/touch/index.ts"],"sourcesContent":["// Utilities\nimport { keys } from '@/util'\n\n// Types\nimport type {\n  DirectiveBinding,\n} from 'vue'\n\nexport interface TouchHandlers {\n  start?: (wrapperEvent: { originalEvent: TouchEvent } & TouchData) => void\n  end?: (wrapperEvent: { originalEvent: TouchEvent } & TouchData) => void\n  move?: (wrapperEvent: { originalEvent: TouchEvent } & TouchData) => void\n  left?: (wrapper: TouchData) => void\n  right?: (wrapper: TouchData) => void\n  up?: (wrapper: TouchData) => void\n  down?: (wrapper: TouchData) => void\n}\n\nexport interface TouchData {\n  touchstartX: number\n  touchstartY: number\n  touchmoveX: number\n  touchmoveY: number\n  touchendX: number\n  touchendY: number\n  offsetX: number\n  offsetY: number\n}\n\nexport type TouchWrapper = TouchHandlers & TouchData\n\nexport interface TouchValue extends TouchHandlers {\n  parent?: boolean\n  options?: AddEventListenerOptions\n}\n\nexport interface TouchStoredHandlers {\n  touchstart: (e: TouchEvent) => void\n  touchend: (e: TouchEvent) => void\n  touchmove: (e: TouchEvent) => void\n}\n\nexport interface TouchDirectiveBinding extends Omit<DirectiveBinding, 'value'> {\n  value?: TouchValue\n}\n\nconst handleGesture = (wrapper: TouchWrapper) => {\n  const { touchstartX, touchendX, touchstartY, touchendY } = wrapper\n  const dirRatio = 0.5\n  const minDistance = 16\n  wrapper.offsetX = touchendX - touchstartX\n  wrapper.offsetY = touchendY - touchstartY\n\n  if (Math.abs(wrapper.offsetY) < dirRatio * Math.abs(wrapper.offsetX)) {\n    wrapper.left && (touchendX < touchstartX - minDistance) && wrapper.left(wrapper)\n    wrapper.right && (touchendX > touchstartX + minDistance) && wrapper.right(wrapper)\n  }\n\n  if (Math.abs(wrapper.offsetX) < dirRatio * Math.abs(wrapper.offsetY)) {\n    wrapper.up && (touchendY < touchstartY - minDistance) && wrapper.up(wrapper)\n    wrapper.down && (touchendY > touchstartY + minDistance) && wrapper.down(wrapper)\n  }\n}\n\nfunction touchstart (event: TouchEvent, wrapper: TouchWrapper) {\n  const touch = event.changedTouches[0]\n  wrapper.touchstartX = touch.clientX\n  wrapper.touchstartY = touch.clientY\n\n  wrapper.start?.({ originalEvent: event, ...wrapper })\n}\n\nfunction touchend (event: TouchEvent, wrapper: TouchWrapper) {\n  const touch = event.changedTouches[0]\n  wrapper.touchendX = touch.clientX\n  wrapper.touchendY = touch.clientY\n\n  wrapper.end?.({ originalEvent: event, ...wrapper })\n\n  handleGesture(wrapper)\n}\n\nfunction touchmove (event: TouchEvent, wrapper: TouchWrapper) {\n  const touch = event.changedTouches[0]\n  wrapper.touchmoveX = touch.clientX\n  wrapper.touchmoveY = touch.clientY\n\n  wrapper.move?.({ originalEvent: event, ...wrapper })\n}\n\nfunction createHandlers (value: TouchHandlers = {}): TouchStoredHandlers {\n  const wrapper = {\n    touchstartX: 0,\n    touchstartY: 0,\n    touchendX: 0,\n    touchendY: 0,\n    touchmoveX: 0,\n    touchmoveY: 0,\n    offsetX: 0,\n    offsetY: 0,\n    left: value.left,\n    right: value.right,\n    up: value.up,\n    down: value.down,\n    start: value.start,\n    move: value.move,\n    end: value.end,\n  }\n\n  return {\n    touchstart: (e: TouchEvent) => touchstart(e, wrapper),\n    touchend: (e: TouchEvent) => touchend(e, wrapper),\n    touchmove: (e: TouchEvent) => touchmove(e, wrapper),\n  }\n}\n\nfunction mounted (el: HTMLElement, binding: TouchDirectiveBinding) {\n  const value = binding.value\n  const target = value?.parent ? el.parentElement : el\n  const options = value?.options ?? { passive: true }\n  const uid = binding.instance?.$.uid // TODO: use custom uid generator\n\n  if (!target || !uid) return\n\n  const handlers = createHandlers(binding.value)\n\n  target._touchHandlers = target._touchHandlers ?? Object.create(null)\n  target._touchHandlers![uid] = handlers\n\n  keys(handlers).forEach(eventName => {\n    target.addEventListener(eventName, handlers[eventName], options)\n  })\n}\n\nfunction unmounted (el: HTMLElement, binding: TouchDirectiveBinding) {\n  const target = binding.value?.parent ? el.parentElement : el\n  const uid = binding.instance?.$.uid\n\n  if (!target?._touchHandlers || !uid) return\n\n  const handlers = target._touchHandlers[uid]\n\n  keys(handlers).forEach(eventName => {\n    target.removeEventListener(eventName, handlers[eventName])\n  })\n\n  delete target._touchHandlers[uid]\n}\n\nexport const Touch = {\n  mounted,\n  unmounted,\n}\n\nexport default Touch\n"]},"metadata":{},"sourceType":"module"}