{"ast":null,"code":"import { createVNode as _createVNode, mergeProps as _mergeProps } from \"vue\"; // Styles\n\nimport \"./VSkeletonLoader.css\"; // Composables\n\nimport { useBackgroundColor } from \"../../composables/color.js\";\nimport { makeDimensionProps, useDimension } from \"../../composables/dimensions.js\";\nimport { makeElevationProps, useElevation } from \"../../composables/elevation.js\";\nimport { useLocale } from \"../../composables/locale.js\";\nimport { makeThemeProps, provideTheme } from \"../../composables/theme.js\"; // Utilities\n\nimport { computed, toRef } from 'vue';\nimport { genericComponent, propsFactory, useRender, wrapInArray } from \"../../util/index.js\"; // Types\n\nexport const rootTypes = {\n  actions: 'button@2',\n  article: 'heading, paragraph',\n  avatar: 'avatar',\n  button: 'button',\n  card: 'image, heading',\n  'card-avatar': 'image, list-item-avatar',\n  chip: 'chip',\n  'date-picker': 'list-item, heading, divider, date-picker-options, date-picker-days, actions',\n  'date-picker-options': 'text, avatar@2',\n  'date-picker-days': 'avatar@28',\n  divider: 'divider',\n  heading: 'heading',\n  image: 'image',\n  'list-item': 'text',\n  'list-item-avatar': 'avatar, text',\n  'list-item-two-line': 'sentences',\n  'list-item-avatar-two-line': 'avatar, sentences',\n  'list-item-three-line': 'paragraph',\n  'list-item-avatar-three-line': 'avatar, paragraph',\n  ossein: 'ossein',\n  paragraph: 'text@3',\n  sentences: 'text@2',\n  subtitle: 'text',\n  table: 'table-heading, table-thead, table-tbody, table-tfoot',\n  'table-heading': 'chip, text',\n  'table-thead': 'heading@6',\n  'table-tbody': 'table-row-divider@6',\n  'table-row-divider': 'table-row, divider',\n  'table-row': 'text@6',\n  'table-tfoot': 'text@2, avatar@2',\n  text: 'text'\n};\n\nfunction genBone(type) {\n  let children = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  return _createVNode(\"div\", {\n    \"class\": ['v-skeleton-loader__bone', `v-skeleton-loader__${type}`]\n  }, [children]);\n}\n\nfunction genBones(bone) {\n  // e.g. 'text@3'\n  const [type, length] = bone.split('@'); // Generate a length array based upon\n  // value after @ in the bone string\n\n  return Array.from({\n    length\n  }).map(() => genStructure(type));\n}\n\nfunction genStructure(type) {\n  let children = [];\n  if (!type) return children; // TODO: figure out a better way to type this\n\n  const bone = rootTypes[type]; // End of recursion, do nothing\n\n  /* eslint-disable-next-line no-empty, brace-style */\n\n  if (type === bone) {} // Array of values - e.g. 'heading, paragraph, text@2'\n  else if (type.includes(',')) return mapBones(type); // Array of values - e.g. 'paragraph@4'\n  else if (type.includes('@')) return genBones(type); // Array of values - e.g. 'card@2'\n  else if (bone.includes(',')) children = mapBones(bone); // Array of values - e.g. 'list-item@2'\n  else if (bone.includes('@')) children = genBones(bone); // Single value - e.g. 'card-heading'\n  else if (bone) children.push(genStructure(bone));\n\n  return [genBone(type, children)];\n}\n\nfunction mapBones(bones) {\n  // Remove spaces and return array of structures\n  return bones.replace(/\\s/g, '').split(',').map(genStructure);\n}\n\nexport const makeVSkeletonLoaderProps = propsFactory({\n  boilerplate: Boolean,\n  color: String,\n  loading: Boolean,\n  loadingText: {\n    type: String,\n    default: '$vuetify.loading'\n  },\n  type: {\n    type: [String, Array],\n    default: 'ossein'\n  },\n  ...makeDimensionProps(),\n  ...makeElevationProps(),\n  ...makeThemeProps()\n}, 'VSkeletonLoader');\nexport const VSkeletonLoader = genericComponent()({\n  name: 'VSkeletonLoader',\n  props: makeVSkeletonLoaderProps(),\n\n  setup(props, _ref) {\n    let {\n      slots\n    } = _ref;\n    const {\n      backgroundColorClasses,\n      backgroundColorStyles\n    } = useBackgroundColor(toRef(props, 'color'));\n    const {\n      dimensionStyles\n    } = useDimension(props);\n    const {\n      elevationClasses\n    } = useElevation(props);\n    const {\n      themeClasses\n    } = provideTheme(props);\n    const {\n      t\n    } = useLocale();\n    const items = computed(() => genStructure(wrapInArray(props.type).join(',')));\n    useRender(() => {\n      const isLoading = !slots.default || props.loading;\n      const loadingProps = props.boilerplate || !isLoading ? {} : {\n        ariaLive: 'polite',\n        ariaLabel: t(props.loadingText),\n        role: 'alert'\n      };\n      return _createVNode(\"div\", _mergeProps({\n        \"class\": ['v-skeleton-loader', {\n          'v-skeleton-loader--boilerplate': props.boilerplate\n        }, themeClasses.value, backgroundColorClasses.value, elevationClasses.value],\n        \"style\": [backgroundColorStyles.value, isLoading ? dimensionStyles.value : {}]\n      }, loadingProps), [isLoading ? items.value : slots.default?.()]);\n    });\n    return {};\n  }\n\n});","map":{"version":3,"mappings":"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","names":["useBackgroundColor","makeDimensionProps","useDimension","makeElevationProps","useElevation","useLocale","makeThemeProps","provideTheme","computed","toRef","genericComponent","propsFactory","useRender","wrapInArray","rootTypes","actions","article","avatar","button","card","chip","divider","heading","image","ossein","paragraph","sentences","subtitle","table","text","genBone","type","children","genBones","bone","length","split","Array","from","map","genStructure","includes","mapBones","push","bones","replace","makeVSkeletonLoaderProps","boilerplate","Boolean","color","String","loading","loadingText","default","VSkeletonLoader","name","props","setup","_ref","slots","backgroundColorClasses","backgroundColorStyles","dimensionStyles","elevationClasses","themeClasses","t","items","join","isLoading","loadingProps","ariaLive","ariaLabel","role","value"],"sources":["../../../src/components/VSkeletonLoader/VSkeletonLoader.tsx"],"sourcesContent":["// Styles\nimport './VSkeletonLoader.sass'\n\n// Composables\nimport { useBackgroundColor } from '@/composables/color'\nimport { makeDimensionProps, useDimension } from '@/composables/dimensions'\nimport { makeElevationProps, useElevation } from '@/composables/elevation'\nimport { useLocale } from '@/composables/locale'\nimport { makeThemeProps, provideTheme } from '@/composables/theme'\n\n// Utilities\nimport { computed, toRef } from 'vue'\nimport { genericComponent, propsFactory, useRender, wrapInArray } from '@/util'\n\n// Types\nimport type { PropType, VNode } from 'vue'\n\ntype VSkeletonBone<T> = T | VSkeletonBone<T>[]\n\nexport type VSkeletonBones = VSkeletonBone<VNode>\nexport type VSkeletonLoaderType = keyof typeof rootTypes\n\nexport const rootTypes = {\n  actions: 'button@2',\n  article: 'heading, paragraph',\n  avatar: 'avatar',\n  button: 'button',\n  card: 'image, heading',\n  'card-avatar': 'image, list-item-avatar',\n  chip: 'chip',\n  'date-picker': 'list-item, heading, divider, date-picker-options, date-picker-days, actions',\n  'date-picker-options': 'text, avatar@2',\n  'date-picker-days': 'avatar@28',\n  divider: 'divider',\n  heading: 'heading',\n  image: 'image',\n  'list-item': 'text',\n  'list-item-avatar': 'avatar, text',\n  'list-item-two-line': 'sentences',\n  'list-item-avatar-two-line': 'avatar, sentences',\n  'list-item-three-line': 'paragraph',\n  'list-item-avatar-three-line': 'avatar, paragraph',\n  ossein: 'ossein',\n  paragraph: 'text@3',\n  sentences: 'text@2',\n  subtitle: 'text',\n  table: 'table-heading, table-thead, table-tbody, table-tfoot',\n  'table-heading': 'chip, text',\n  'table-thead': 'heading@6',\n  'table-tbody': 'table-row-divider@6',\n  'table-row-divider': 'table-row, divider',\n  'table-row': 'text@6',\n  'table-tfoot': 'text@2, avatar@2',\n  text: 'text',\n} as const\n\nfunction genBone (type: string, children: VSkeletonBones = []) {\n  return (\n    <div\n      class={[\n        'v-skeleton-loader__bone',\n        `v-skeleton-loader__${type}`,\n      ]}\n    >\n      { children }\n    </div>\n  )\n}\n\nfunction genBones (bone: string) {\n  // e.g. 'text@3'\n  const [type, length] = bone.split('@') as [VSkeletonLoaderType, number]\n\n  // Generate a length array based upon\n  // value after @ in the bone string\n  return Array.from({ length }).map(() => genStructure(type))\n}\n\nfunction genStructure (type?: string): VSkeletonBones {\n  let children: VSkeletonBones = []\n\n  if (!type) return children\n\n  // TODO: figure out a better way to type this\n  const bone = (rootTypes as Record<string, string>)[type]\n\n  // End of recursion, do nothing\n  /* eslint-disable-next-line no-empty, brace-style */\n  if (type === bone) {}\n  // Array of values - e.g. 'heading, paragraph, text@2'\n  else if (type.includes(',')) return mapBones(type)\n  // Array of values - e.g. 'paragraph@4'\n  else if (type.includes('@')) return genBones(type)\n  // Array of values - e.g. 'card@2'\n  else if (bone.includes(',')) children = mapBones(bone)\n  // Array of values - e.g. 'list-item@2'\n  else if (bone.includes('@')) children = genBones(bone)\n  // Single value - e.g. 'card-heading'\n  else if (bone) children.push(genStructure(bone))\n\n  return [genBone(type, children)]\n}\n\nfunction mapBones (bones: string) {\n  // Remove spaces and return array of structures\n  return bones.replace(/\\s/g, '').split(',').map(genStructure)\n}\n\nexport const makeVSkeletonLoaderProps = propsFactory({\n  boilerplate: Boolean,\n  color: String,\n  loading: Boolean,\n  loadingText: {\n    type: String,\n    default: '$vuetify.loading',\n  },\n  type: {\n    type: [String, Array] as PropType<\n      | VSkeletonLoaderType | (string & {})\n      | ReadonlyArray<VSkeletonLoaderType | (string & {})>\n    >,\n    default: 'ossein',\n  },\n\n  ...makeDimensionProps(),\n  ...makeElevationProps(),\n  ...makeThemeProps(),\n}, 'VSkeletonLoader')\n\nexport const VSkeletonLoader = genericComponent()({\n  name: 'VSkeletonLoader',\n\n  props: makeVSkeletonLoaderProps(),\n\n  setup (props, { slots }) {\n    const { backgroundColorClasses, backgroundColorStyles } = useBackgroundColor(toRef(props, 'color'))\n    const { dimensionStyles } = useDimension(props)\n    const { elevationClasses } = useElevation(props)\n    const { themeClasses } = provideTheme(props)\n    const { t } = useLocale()\n\n    const items = computed(() => genStructure(wrapInArray(props.type).join(',')))\n\n    useRender(() => {\n      const isLoading = !slots.default || props.loading\n      const loadingProps = (props.boilerplate || !isLoading) ? {} : {\n        ariaLive: 'polite',\n        ariaLabel: t(props.loadingText),\n        role: 'alert',\n      }\n\n      return (\n        <div\n          class={[\n            'v-skeleton-loader',\n            {\n              'v-skeleton-loader--boilerplate': props.boilerplate,\n            },\n            themeClasses.value,\n            backgroundColorClasses.value,\n            elevationClasses.value,\n          ]}\n          style={[\n            backgroundColorStyles.value,\n            isLoading ? dimensionStyles.value : {},\n          ]}\n          { ...loadingProps }\n        >\n          { isLoading ? items.value : slots.default?.() }\n        </div>\n      )\n    })\n\n    return {}\n  },\n})\n\nexport type VSkeletonLoader = InstanceType<typeof VSkeletonLoader>\n"]},"metadata":{},"sourceType":"module"}