{"ast":null,"code":"import { createVNode as _createVNode, Fragment as _Fragment, mergeProps as _mergeProps } from \"vue\"; // Components\n\nimport { VDataTableColumn } from \"./VDataTableColumn.js\";\nimport { VBtn } from \"../VBtn/index.js\";\nimport { VCheckboxBtn } from \"../VCheckbox/index.js\"; // Composables\n\nimport { useExpanded } from \"./composables/expand.js\";\nimport { useHeaders } from \"./composables/headers.js\";\nimport { useSelection } from \"./composables/select.js\";\nimport { useSort } from \"./composables/sort.js\";\nimport { makeDisplayProps, useDisplay } from \"../../composables/display.js\"; // Utilities\n\nimport { toDisplayString, withModifiers } from 'vue';\nimport { EventProp, genericComponent, getObjectValueByPath, propsFactory, useRender } from \"../../util/index.js\"; // Types\n\nexport const makeVDataTableRowProps = propsFactory({\n  index: Number,\n  item: Object,\n  cellProps: [Object, Function],\n  onClick: EventProp(),\n  onContextmenu: EventProp(),\n  onDblclick: EventProp(),\n  ...makeDisplayProps()\n}, 'VDataTableRow');\nexport const VDataTableRow = genericComponent()({\n  name: 'VDataTableRow',\n  props: makeVDataTableRowProps(),\n\n  setup(props, _ref) {\n    let {\n      slots\n    } = _ref;\n    const {\n      displayClasses,\n      mobile\n    } = useDisplay(props, 'v-data-table__tr');\n    const {\n      isSelected,\n      toggleSelect,\n      someSelected,\n      allSelected,\n      selectAll\n    } = useSelection();\n    const {\n      isExpanded,\n      toggleExpand\n    } = useExpanded();\n    const {\n      toggleSort,\n      sortBy,\n      isSorted\n    } = useSort();\n    const {\n      columns\n    } = useHeaders();\n    useRender(() => _createVNode(\"tr\", {\n      \"class\": ['v-data-table__tr', {\n        'v-data-table__tr--clickable': !!(props.onClick || props.onContextmenu || props.onDblclick)\n      }, displayClasses.value],\n      \"onClick\": props.onClick,\n      \"onContextmenu\": props.onContextmenu,\n      \"onDblclick\": props.onDblclick\n    }, [props.item && columns.value.map((column, i) => {\n      const item = props.item;\n      const slotName = `item.${column.key}`;\n      const headerSlotName = `header.${column.key}`;\n      const slotProps = {\n        index: props.index,\n        item: item.raw,\n        internalItem: item,\n        value: getObjectValueByPath(item.columns, column.key),\n        column,\n        isSelected,\n        toggleSelect,\n        isExpanded,\n        toggleExpand\n      };\n      const columnSlotProps = {\n        column,\n        selectAll,\n        isSorted,\n        toggleSort,\n        sortBy: sortBy.value,\n        someSelected: someSelected.value,\n        allSelected: allSelected.value,\n        getSortIcon: () => ''\n      };\n      const cellProps = typeof props.cellProps === 'function' ? props.cellProps({\n        index: slotProps.index,\n        item: slotProps.item,\n        internalItem: slotProps.internalItem,\n        value: slotProps.value,\n        column\n      }) : props.cellProps;\n      const columnCellProps = typeof column.cellProps === 'function' ? column.cellProps({\n        index: slotProps.index,\n        item: slotProps.item,\n        internalItem: slotProps.internalItem,\n        value: slotProps.value\n      }) : column.cellProps;\n      return _createVNode(VDataTableColumn, _mergeProps({\n        \"align\": column.align,\n        \"class\": {\n          'v-data-table__td--expanded-row': column.key === 'data-table-expand',\n          'v-data-table__td--select-row': column.key === 'data-table-select'\n        },\n        \"fixed\": column.fixed,\n        \"fixedOffset\": column.fixedOffset,\n        \"lastFixed\": column.lastFixed,\n        \"maxWidth\": !mobile.value ? column.maxWidth : undefined,\n        \"noPadding\": column.key === 'data-table-select' || column.key === 'data-table-expand',\n        \"nowrap\": column.nowrap,\n        \"width\": !mobile.value ? column.width : undefined\n      }, cellProps, columnCellProps), {\n        default: () => {\n          if (column.key === 'data-table-select') {\n            return slots['item.data-table-select']?.({ ...slotProps,\n              props: {\n                disabled: !item.selectable,\n                modelValue: isSelected([item]),\n                onClick: withModifiers(() => toggleSelect(item), ['stop'])\n              }\n            }) ?? _createVNode(VCheckboxBtn, {\n              \"disabled\": !item.selectable,\n              \"modelValue\": isSelected([item]),\n              \"onClick\": withModifiers(event => toggleSelect(item, props.index, event), ['stop'])\n            }, null);\n          }\n\n          if (column.key === 'data-table-expand') {\n            return slots['item.data-table-expand']?.({ ...slotProps,\n              props: {\n                icon: isExpanded(item) ? '$collapse' : '$expand',\n                size: 'small',\n                variant: 'text',\n                onClick: withModifiers(() => toggleExpand(item), ['stop'])\n              }\n            }) ?? _createVNode(VBtn, {\n              \"icon\": isExpanded(item) ? '$collapse' : '$expand',\n              \"size\": \"small\",\n              \"variant\": \"text\",\n              \"onClick\": withModifiers(() => toggleExpand(item), ['stop'])\n            }, null);\n          }\n\n          if (slots[slotName] && !mobile.value) return slots[slotName](slotProps);\n          const displayValue = toDisplayString(slotProps.value);\n          return !mobile.value ? displayValue : _createVNode(_Fragment, null, [_createVNode(\"div\", {\n            \"class\": \"v-data-table__td-title\"\n          }, [slots[headerSlotName]?.(columnSlotProps) ?? column.title]), _createVNode(\"div\", {\n            \"class\": \"v-data-table__td-value\"\n          }, [slots[slotName]?.(slotProps) ?? displayValue])]);\n        }\n      });\n    })]));\n  }\n\n});","map":{"version":3,"mappings":"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","names":["VDataTableColumn","VBtn","VCheckboxBtn","useExpanded","useHeaders","useSelection","useSort","makeDisplayProps","useDisplay","toDisplayString","withModifiers","EventProp","genericComponent","getObjectValueByPath","propsFactory","useRender","makeVDataTableRowProps","index","Number","item","Object","cellProps","Function","onClick","onContextmenu","onDblclick","VDataTableRow","name","props","setup","_ref","slots","displayClasses","mobile","isSelected","toggleSelect","someSelected","allSelected","selectAll","isExpanded","toggleExpand","toggleSort","sortBy","isSorted","columns","value","map","column","i","slotName","key","headerSlotName","slotProps","raw","internalItem","columnSlotProps","getSortIcon","columnCellProps","align","fixed","fixedOffset","lastFixed","maxWidth","undefined","nowrap","width","default","disabled","selectable","modelValue","_createVNode","event","icon","size","variant","displayValue","title"],"sources":["../../../src/components/VDataTable/VDataTableRow.tsx"],"sourcesContent":["// Components\nimport { VDataTableColumn } from './VDataTableColumn'\nimport { VBtn } from '@/components/VBtn'\nimport { VCheckboxBtn } from '@/components/VCheckbox'\n\n// Composables\nimport { useExpanded } from './composables/expand'\nimport { useHeaders } from './composables/headers'\nimport { useSelection } from './composables/select'\nimport { useSort } from './composables/sort'\nimport { makeDisplayProps, useDisplay } from '@/composables/display'\n\n// Utilities\nimport { toDisplayString, withModifiers } from 'vue'\nimport { EventProp, genericComponent, getObjectValueByPath, propsFactory, useRender } from '@/util'\n\n// Types\nimport type { PropType } from 'vue'\nimport type { CellProps, DataTableItem, ItemKeySlot } from './types'\nimport type { VDataTableHeaderCellColumnSlotProps } from './VDataTableHeaders'\nimport type { GenericProps } from '@/util'\n\nexport type VDataTableItemCellColumnSlotProps<T> = Omit<ItemKeySlot<T>, 'value'> & {\n  props: Record<string, unknown>\n}\n\nexport type VDataTableRowSlots<T> = {\n  'item.data-table-select': VDataTableItemCellColumnSlotProps<T>\n  'item.data-table-expand': VDataTableItemCellColumnSlotProps<T>\n  'header.data-table-select': VDataTableHeaderCellColumnSlotProps\n  'header.data-table-expand': VDataTableHeaderCellColumnSlotProps\n} & {\n  [key: `item.${string}`]: ItemKeySlot<T>\n  [key: `header.${string}`]: VDataTableHeaderCellColumnSlotProps\n}\n\nexport const makeVDataTableRowProps = propsFactory({\n  index: Number,\n  item: Object as PropType<DataTableItem>,\n  cellProps: [Object, Function] as PropType<CellProps<any>>,\n  onClick: EventProp<[MouseEvent]>(),\n  onContextmenu: EventProp<[MouseEvent]>(),\n  onDblclick: EventProp<[MouseEvent]>(),\n\n  ...makeDisplayProps(),\n}, 'VDataTableRow')\n\nexport const VDataTableRow = genericComponent<new <T>(\n  props: {\n    item?: DataTableItem<T>\n    cellProps?: CellProps<T>\n  },\n  slots: VDataTableRowSlots<T>,\n) => GenericProps<typeof props, typeof slots>>()({\n  name: 'VDataTableRow',\n\n  props: makeVDataTableRowProps(),\n\n  setup (props, { slots }) {\n    const { displayClasses, mobile } = useDisplay(props, 'v-data-table__tr')\n    const { isSelected, toggleSelect, someSelected, allSelected, selectAll } = useSelection()\n    const { isExpanded, toggleExpand } = useExpanded()\n    const { toggleSort, sortBy, isSorted } = useSort()\n    const { columns } = useHeaders()\n\n    useRender(() => (\n      <tr\n        class={[\n          'v-data-table__tr',\n          {\n            'v-data-table__tr--clickable': !!(props.onClick || props.onContextmenu || props.onDblclick),\n          },\n          displayClasses.value,\n        ]}\n        onClick={ props.onClick as any }\n        onContextmenu={ props.onContextmenu as any }\n        onDblclick={ props.onDblclick as any }\n      >\n        { props.item && columns.value.map((column, i) => {\n          const item = props.item!\n          const slotName = `item.${column.key}` as const\n          const headerSlotName = `header.${column.key}` as const\n          const slotProps = {\n            index: props.index!,\n            item: item.raw,\n            internalItem: item,\n            value: getObjectValueByPath(item.columns, column.key),\n            column,\n            isSelected,\n            toggleSelect,\n            isExpanded,\n            toggleExpand,\n          } satisfies ItemKeySlot<any>\n\n          const columnSlotProps: VDataTableHeaderCellColumnSlotProps = {\n            column,\n            selectAll,\n            isSorted,\n            toggleSort,\n            sortBy: sortBy.value,\n            someSelected: someSelected.value,\n            allSelected: allSelected.value,\n            getSortIcon: () => '',\n          }\n\n          const cellProps = typeof props.cellProps === 'function'\n            ? props.cellProps({\n              index: slotProps.index,\n              item: slotProps.item,\n              internalItem: slotProps.internalItem,\n              value: slotProps.value,\n              column,\n            })\n            : props.cellProps\n          const columnCellProps = typeof column.cellProps === 'function'\n            ? column.cellProps({\n              index: slotProps.index,\n              item: slotProps.item,\n              internalItem: slotProps.internalItem,\n              value: slotProps.value,\n            })\n            : column.cellProps\n\n          return (\n            <VDataTableColumn\n              align={ column.align }\n              class={{\n                'v-data-table__td--expanded-row': column.key === 'data-table-expand',\n                'v-data-table__td--select-row': column.key === 'data-table-select',\n              }}\n              fixed={ column.fixed }\n              fixedOffset={ column.fixedOffset }\n              lastFixed={ column.lastFixed }\n              maxWidth={ !mobile.value ? column.maxWidth : undefined }\n              noPadding={ column.key === 'data-table-select' || column.key === 'data-table-expand' }\n              nowrap={ column.nowrap }\n              width={ !mobile.value ? column.width : undefined }\n              { ...cellProps }\n              { ...columnCellProps }\n            >\n              {{\n                default: () => {\n                  if (column.key === 'data-table-select') {\n                    return slots['item.data-table-select']?.({\n                      ...slotProps,\n                      props: {\n                        disabled: !item.selectable,\n                        modelValue: isSelected([item]),\n                        onClick: withModifiers(() => toggleSelect(item), ['stop']),\n                      },\n                    }) ?? (\n                      <VCheckboxBtn\n                        disabled={ !item.selectable }\n                        modelValue={ isSelected([item]) }\n                        onClick={ withModifiers(\n                          (event: Event) => toggleSelect(item, props.index, event as PointerEvent),\n                          ['stop']\n                        )}\n                      />\n                    )\n                  }\n\n                  if (column.key === 'data-table-expand') {\n                    return slots['item.data-table-expand']?.({\n                      ...slotProps,\n                      props: {\n                        icon: isExpanded(item) ? '$collapse' : '$expand',\n                        size: 'small',\n                        variant: 'text',\n                        onClick: withModifiers(() => toggleExpand(item), ['stop']),\n                      },\n                    }) ?? (\n                      <VBtn\n                        icon={ isExpanded(item) ? '$collapse' : '$expand' }\n                        size=\"small\"\n                        variant=\"text\"\n                        onClick={ withModifiers(() => toggleExpand(item), ['stop']) }\n                      />\n                    )\n                  }\n\n                  if (slots[slotName] && !mobile.value) return slots[slotName](slotProps)\n\n                  const displayValue = toDisplayString(slotProps.value)\n\n                  return !mobile.value ? displayValue : (\n                    <>\n                      <div class=\"v-data-table__td-title\">\n                        { slots[headerSlotName]?.(columnSlotProps) ?? column.title }\n                      </div>\n\n                      <div class=\"v-data-table__td-value\">\n                        { slots[slotName]?.(slotProps) ?? displayValue }\n                      </div>\n                    </>\n                  )\n                },\n              }}\n            </VDataTableColumn>\n          )\n        })}\n      </tr>\n    ))\n  },\n})\n\nexport type VDataTableRow = InstanceType<typeof VDataTableRow>\n"]},"metadata":{},"sourceType":"module"}