{"ast":null,"code":"import { createVNode as _createVNode, vShow as _vShow, mergeProps as _mergeProps, withDirectives as _withDirectives } from \"vue\"; // Styles\n\nimport \"./VBadge.css\"; // Components\n\nimport { VIcon } from \"../VIcon/index.js\"; // Composables\n\nimport { useBackgroundColor, useTextColor } from \"../../composables/color.js\";\nimport { makeComponentProps } from \"../../composables/component.js\";\nimport { IconValue } from \"../../composables/icons.js\";\nimport { useLocale } from \"../../composables/locale.js\";\nimport { makeLocationProps, useLocation } from \"../../composables/location.js\";\nimport { makeRoundedProps, useRounded } from \"../../composables/rounded.js\";\nimport { makeTagProps } from \"../../composables/tag.js\";\nimport { makeThemeProps, useTheme } from \"../../composables/theme.js\";\nimport { makeTransitionProps, MaybeTransition } from \"../../composables/transition.js\"; // Utilities\n\nimport { toRef } from 'vue';\nimport { genericComponent, pickWithRest, propsFactory, useRender } from \"../../util/index.js\";\nexport const makeVBadgeProps = propsFactory({\n  bordered: Boolean,\n  color: String,\n  content: [Number, String],\n  dot: Boolean,\n  floating: Boolean,\n  icon: IconValue,\n  inline: Boolean,\n  label: {\n    type: String,\n    default: '$vuetify.badge'\n  },\n  max: [Number, String],\n  modelValue: {\n    type: Boolean,\n    default: true\n  },\n  offsetX: [Number, String],\n  offsetY: [Number, String],\n  textColor: String,\n  ...makeComponentProps(),\n  ...makeLocationProps({\n    location: 'top end'\n  }),\n  ...makeRoundedProps(),\n  ...makeTagProps(),\n  ...makeThemeProps(),\n  ...makeTransitionProps({\n    transition: 'scale-rotate-transition'\n  })\n}, 'VBadge');\nexport const VBadge = genericComponent()({\n  name: 'VBadge',\n  inheritAttrs: false,\n  props: makeVBadgeProps(),\n\n  setup(props, ctx) {\n    const {\n      backgroundColorClasses,\n      backgroundColorStyles\n    } = useBackgroundColor(toRef(props, 'color'));\n    const {\n      roundedClasses\n    } = useRounded(props);\n    const {\n      t\n    } = useLocale();\n    const {\n      textColorClasses,\n      textColorStyles\n    } = useTextColor(toRef(props, 'textColor'));\n    const {\n      themeClasses\n    } = useTheme();\n    const {\n      locationStyles\n    } = useLocation(props, true, side => {\n      const base = props.floating ? props.dot ? 2 : 4 : props.dot ? 8 : 12;\n      return base + (['top', 'bottom'].includes(side) ? Number(props.offsetY ?? 0) : ['left', 'right'].includes(side) ? Number(props.offsetX ?? 0) : 0);\n    });\n    useRender(() => {\n      const value = Number(props.content);\n      const content = !props.max || isNaN(value) ? props.content : value <= Number(props.max) ? value : `${props.max}+`;\n      const [badgeAttrs, attrs] = pickWithRest(ctx.attrs, ['aria-atomic', 'aria-label', 'aria-live', 'role', 'title']);\n      return _createVNode(props.tag, _mergeProps({\n        \"class\": ['v-badge', {\n          'v-badge--bordered': props.bordered,\n          'v-badge--dot': props.dot,\n          'v-badge--floating': props.floating,\n          'v-badge--inline': props.inline\n        }, props.class]\n      }, attrs, {\n        \"style\": props.style\n      }), {\n        default: () => [_createVNode(\"div\", {\n          \"class\": \"v-badge__wrapper\"\n        }, [ctx.slots.default?.(), _createVNode(MaybeTransition, {\n          \"transition\": props.transition\n        }, {\n          default: () => [_withDirectives(_createVNode(\"span\", _mergeProps({\n            \"class\": ['v-badge__badge', themeClasses.value, backgroundColorClasses.value, roundedClasses.value, textColorClasses.value],\n            \"style\": [backgroundColorStyles.value, textColorStyles.value, props.inline ? {} : locationStyles.value],\n            \"aria-atomic\": \"true\",\n            \"aria-label\": t(props.label, value),\n            \"aria-live\": \"polite\",\n            \"role\": \"status\"\n          }, badgeAttrs), [props.dot ? undefined : ctx.slots.badge ? ctx.slots.badge?.() : props.icon ? _createVNode(VIcon, {\n            \"icon\": props.icon\n          }, null) : content]), [[_vShow, props.modelValue]])]\n        })])]\n      });\n    });\n    return {};\n  }\n\n});","map":{"version":3,"mappings":"kIAAA;;AACA,sB,CAEA;;AAAA,SACSA,KADT,QACc,mBADd,C,CAGA;;AAAA,SACSC,kBADT,EAC6BC,YAD7B,QACyC,4BADzC;AACyC,SAChCC,kBADgC,QACd,gCADc;AACd,SAClBC,SADkB,QACT,4BADS;AACT,SACTC,SADS,QACA,6BADA;AACA,SACTC,iBADS,EACUC,WADV,QACqB,+BADrB;AACqB,SAC9BC,gBAD8B,EACZC,UADY,QACF,8BADE;AACF,SAC5BC,YAD4B,QAChB,0BADgB;AAChB,SACZC,cADY,EACIC,QADJ,QACY,4BADZ;AACY,SACxBC,mBADwB,EACHC,eADG,QACY,iCADZ,C,CAGjC;;AACA,SAASC,KAAT,QAAsB,KAAtB;AAA2B,SAClBC,gBADkB,EACAC,YADA,EACcC,YADd,EAC4BC,SAD5B,QACqC,qBADrC;AAQ3B,OAAO,MAAMC,eAAe,GAAGF,YAAY,CAAC;AAC1CG,UAAQ,EAAEC,OADgC;AAE1CC,OAAK,EAAEC,MAFmC;AAG1CC,SAAO,EAAE,CAACC,MAAD,EAASF,MAAT,CAHiC;AAI1CG,KAAG,EAAEL,OAJqC;AAK1CM,UAAQ,EAAEN,OALgC;AAM1CO,MAAI,EAAEzB,SANoC;AAO1C0B,QAAM,EAAER,OAPkC;AAQ1CS,OAAK,EAAE;AACLC,QAAI,EAAER,MADD;AAELS,WAAO,EAAE;AAFJ,GARmC;AAY1CC,KAAG,EAAE,CAACR,MAAD,EAASF,MAAT,CAZqC;AAa1CW,YAAU,EAAE;AACVH,QAAI,EAAEV,OADI;AAEVW,WAAO,EAAE;AAFC,GAb8B;AAiB1CG,SAAO,EAAE,CAACV,MAAD,EAASF,MAAT,CAjBiC;AAkB1Ca,SAAO,EAAE,CAACX,MAAD,EAASF,MAAT,CAlBiC;AAmB1Cc,WAAS,EAAEd,MAnB+B;AAqB1C,KAAGrB,kBAAkB,EArBqB;AAsB1C,KAAGG,iBAAiB,CAAC;AAAEiC,YAAQ,EAAE;AAAZ,GAAD,CAtBsB;AAuB1C,KAAG/B,gBAAgB,EAvBuB;AAwB1C,KAAGE,YAAY,EAxB2B;AAyB1C,KAAGC,cAAc,EAzByB;AA0B1C,KAAGE,mBAAmB,CAAC;AAAE2B,cAAU,EAAE;AAAd,GAAD;AA1BoB,CAAD,EA2BxC,QA3BwC,CAApC;AA6BP,OAAO,MAAMC,MAAM,GAAGzB,gBAAgB,GAAgB;AACpD0B,MAAI,EAAE,QAD8C;AAGpDC,cAAY,EAAE,KAHsC;AAKpDC,OAAK,EAAExB,eAAe,EAL8B;;AAOpDyB,OAAKA,CAAED,KAAFC,EAASC,GAATD,EAAc;AACjB,UAAM;AAAEE,4BAAF;AAA0BC;AAA1B,QAAoD/C,kBAAkB,CAACc,KAAK,CAAC6B,KAAD,EAAQ,OAAR,CAAN,CAA5E;AACA,UAAM;AAAEK;AAAF,QAAqBxC,UAAU,CAACmC,KAAD,CAArC;AACA,UAAM;AAAEM;AAAF,QAAQ7C,SAAS,EAAvB;AACA,UAAM;AAAE8C,sBAAF;AAAoBC;AAApB,QAAwClD,YAAY,CAACa,KAAK,CAAC6B,KAAD,EAAQ,WAAR,CAAN,CAA1D;AACA,UAAM;AAAES;AAAF,QAAmBzC,QAAQ,EAAjC;AAEA,UAAM;AAAE0C;AAAF,QAAqB/C,WAAW,CAACqC,KAAD,EAAQ,IAAR,EAAcW,IAAI,IAAI;AAC1D,YAAMC,IAAI,GAAGZ,KAAK,CAAChB,QAANgB,GACRA,KAAK,CAACjB,GAANiB,GAAY,CAAZA,GAAgB,CADRA,GAERA,KAAK,CAACjB,GAANiB,GAAY,CAAZA,GAAgB,EAFrB;AAIA,aAAOY,IAAI,IACT,CAAC,KAAD,EAAQ,QAAR,EAAkBC,QAAlB,CAA2BF,IAA3B,IAAmC7B,MAAM,CAACkB,KAAK,CAACP,OAANO,IAAiB,CAAlB,CAAzC,GACE,CAAC,MAAD,EAAS,OAAT,EAAkBa,QAAlB,CAA2BF,IAA3B,IAAmC7B,MAAM,CAACkB,KAAK,CAACR,OAANQ,IAAiB,CAAlB,CAAzC,GACA,CAHO,CAAX;AAKD,KAVqC,CAAtC;AAYAzB,aAAS,CAAC,MAAM;AACd,YAAMuC,KAAK,GAAGhC,MAAM,CAACkB,KAAK,CAACnB,OAAP,CAApB;AACA,YAAMA,OAAO,GAAI,CAACmB,KAAK,CAACV,GAAP,IAAcyB,KAAK,CAACD,KAAD,CAAnB,GAA8Bd,KAAK,CAACnB,OAApC,GACbiC,KAAK,IAAIhC,MAAM,CAACkB,KAAK,CAACV,GAAP,CAAfwB,GAA6BA,KAA7BA,GACA,GAAGd,KAAK,CAACV,GAAG,GAFhB;AAIA,YAAM,CAAC0B,UAAD,EAAaC,KAAb,IAAsB5C,YAAY,CAAC6B,GAAG,CAACe,KAAL,EAAmC,CACzE,aADyE,EAEzE,YAFyE,EAGzE,WAHyE,EAIzE,MAJyE,EAKzE,OALyE,CAAnC,CAAxC;AAQA;AAAA,iBAEW,CACL,SADK,EAEL;AACE,+BAAqBjB,KAAK,CAACvB,QAD7B;AAEE,0BAAgBuB,KAAK,CAACjB,GAFxB;AAGE,+BAAqBiB,KAAK,CAAChB,QAH7B;AAIE,6BAAmBgB,KAAK,CAACd;AAJ3B,SAFK,EAQLc,KAAK,CAACkB,KARD;AAFX,SAYSD,KAZT,EAYc;AAAA,iBACFjB,KAAK,CAACmB;AADJ,OAZd,GAauB;AAAA9B;AAAA;AAAA,YAGfa,GAAG,CAACkB,KAAJlB,CAAUb,OAAVa,IAHe,EAGMmB;AAAA,wBAEOrB,KAAK,CAACJ;AAFb,WAEuB;AAAAP;AAAA,qBAGnC,CACL,gBADK,EAELoB,YAAY,CAACK,KAFR,EAGLX,sBAAsB,CAACW,KAHlB,EAILT,cAAc,CAACS,KAJV,EAKLP,gBAAgB,CAACO,KALZ,CAHmC;AASzC,qBACM,CACLV,qBAAqB,CAACU,KADjB,EAELN,eAAe,CAACM,KAFX,EAGLd,KAAK,CAACd,MAANc,GAAe,EAAfA,GAAoBU,cAAc,CAACI,KAH9B,CAVmC;AAczC,iCAdyC;AAczC,0BAEYR,CAAC,CAACN,KAAK,CAACb,KAAP,EAAc2B,KAAd,CAhB4B;AAgBR,iCAhBQ;AAgBR;AAhBQ,aAmBrCE,UAnBqC,GAmB3B,CAGbhB,KAAK,CAACjB,GAANiB,GAAYsB,SAAZtB,GACEE,GAAG,CAACkB,KAAJlB,CAAUqB,KAAVrB,GAAkBA,GAAG,CAACkB,KAAJlB,CAAUqB,KAAVrB,IAAlBA,GACAF,KAAK,CAACf,IAANe,GAAUqB;AAAA,oBAAiBrB,KAAK,CAACf;AAAvB,aAA2B,IAA3B,CAAVe,GACAnB,OANW,CAnB2B,GAyB/B,UAvBFmB,KAAK,CAACT,UAuBJ,EAzB+B;AAAA,SAFvB,CAHN;AAAA,OAbvB;AAkDD,KAhEQ,CAAThB;AAkEA,WAAO,EAAP;AACF;;AA7FoD,CAAhB,CAA/B","names":["VIcon","useBackgroundColor","useTextColor","makeComponentProps","IconValue","useLocale","makeLocationProps","useLocation","makeRoundedProps","useRounded","makeTagProps","makeThemeProps","useTheme","makeTransitionProps","MaybeTransition","toRef","genericComponent","pickWithRest","propsFactory","useRender","makeVBadgeProps","bordered","Boolean","color","String","content","Number","dot","floating","icon","inline","label","type","default","max","modelValue","offsetX","offsetY","textColor","location","transition","VBadge","name","inheritAttrs","props","setup","ctx","backgroundColorClasses","backgroundColorStyles","roundedClasses","t","textColorClasses","textColorStyles","themeClasses","locationStyles","side","base","includes","value","isNaN","badgeAttrs","attrs","class","style","slots","_createVNode","undefined","badge"],"sources":["../../../src/components/VBadge/VBadge.tsx"],"sourcesContent":["// Styles\nimport './VBadge.sass'\n\n// Components\nimport { VIcon } from '@/components/VIcon'\n\n// Composables\nimport { useBackgroundColor, useTextColor } from '@/composables/color'\nimport { makeComponentProps } from '@/composables/component'\nimport { IconValue } from '@/composables/icons'\nimport { useLocale } from '@/composables/locale'\nimport { makeLocationProps, useLocation } from '@/composables/location'\nimport { makeRoundedProps, useRounded } from '@/composables/rounded'\nimport { makeTagProps } from '@/composables/tag'\nimport { makeThemeProps, useTheme } from '@/composables/theme'\nimport { makeTransitionProps, MaybeTransition } from '@/composables/transition'\n\n// Utilities\nimport { toRef } from 'vue'\nimport { genericComponent, pickWithRest, propsFactory, useRender } from '@/util'\n\nexport type VBadgeSlots = {\n  default: never\n  badge: never\n}\n\nexport const makeVBadgeProps = propsFactory({\n  bordered: Boolean,\n  color: String,\n  content: [Number, String],\n  dot: Boolean,\n  floating: Boolean,\n  icon: IconValue,\n  inline: Boolean,\n  label: {\n    type: String,\n    default: '$vuetify.badge',\n  },\n  max: [Number, String],\n  modelValue: {\n    type: Boolean,\n    default: true,\n  },\n  offsetX: [Number, String],\n  offsetY: [Number, String],\n  textColor: String,\n\n  ...makeComponentProps(),\n  ...makeLocationProps({ location: 'top end' } as const),\n  ...makeRoundedProps(),\n  ...makeTagProps(),\n  ...makeThemeProps(),\n  ...makeTransitionProps({ transition: 'scale-rotate-transition' }),\n}, 'VBadge')\n\nexport const VBadge = genericComponent<VBadgeSlots>()({\n  name: 'VBadge',\n\n  inheritAttrs: false,\n\n  props: makeVBadgeProps(),\n\n  setup (props, ctx) {\n    const { backgroundColorClasses, backgroundColorStyles } = useBackgroundColor(toRef(props, 'color'))\n    const { roundedClasses } = useRounded(props)\n    const { t } = useLocale()\n    const { textColorClasses, textColorStyles } = useTextColor(toRef(props, 'textColor'))\n    const { themeClasses } = useTheme()\n\n    const { locationStyles } = useLocation(props, true, side => {\n      const base = props.floating\n        ? (props.dot ? 2 : 4)\n        : (props.dot ? 8 : 12)\n\n      return base + (\n        ['top', 'bottom'].includes(side) ? Number(props.offsetY ?? 0)\n        : ['left', 'right'].includes(side) ? Number(props.offsetX ?? 0)\n        : 0\n      )\n    })\n\n    useRender(() => {\n      const value = Number(props.content)\n      const content = (!props.max || isNaN(value)) ? props.content\n        : value <= Number(props.max) ? value\n        : `${props.max}+`\n\n      const [badgeAttrs, attrs] = pickWithRest(ctx.attrs as Record<string, any>, [\n        'aria-atomic',\n        'aria-label',\n        'aria-live',\n        'role',\n        'title',\n      ])\n\n      return (\n        <props.tag\n          class={[\n            'v-badge',\n            {\n              'v-badge--bordered': props.bordered,\n              'v-badge--dot': props.dot,\n              'v-badge--floating': props.floating,\n              'v-badge--inline': props.inline,\n            },\n            props.class,\n          ]}\n          { ...attrs }\n          style={ props.style }\n        >\n          <div class=\"v-badge__wrapper\">\n            { ctx.slots.default?.() }\n\n            <MaybeTransition transition={ props.transition }>\n              <span\n                v-show={ props.modelValue }\n                class={[\n                  'v-badge__badge',\n                  themeClasses.value,\n                  backgroundColorClasses.value,\n                  roundedClasses.value,\n                  textColorClasses.value,\n                ]}\n                style={[\n                  backgroundColorStyles.value,\n                  textColorStyles.value,\n                  props.inline ? {} : locationStyles.value,\n                ]}\n                aria-atomic=\"true\"\n                aria-label={ t(props.label, value) }\n                aria-live=\"polite\"\n                role=\"status\"\n                { ...badgeAttrs }\n              >\n                {\n                  props.dot ? undefined\n                  : ctx.slots.badge ? ctx.slots.badge?.()\n                  : props.icon ? <VIcon icon={ props.icon } />\n                  : content\n                }\n              </span>\n            </MaybeTransition>\n          </div>\n        </props.tag>\n      )\n    })\n\n    return {}\n  },\n})\n\nexport type VBadge = InstanceType<typeof VBadge>\n"]},"metadata":{},"sourceType":"module"}