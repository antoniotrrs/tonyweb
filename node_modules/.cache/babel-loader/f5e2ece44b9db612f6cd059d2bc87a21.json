{"ast":null,"code":"import { mergeProps as _mergeProps, createVNode as _createVNode } from \"vue\"; // Components\n\nimport { makeVWindowProps, VWindow } from \"../VWindow/VWindow.js\"; // Composables\n\nimport { useProxiedModel } from \"../../composables/proxiedModel.js\"; // Utilities\n\nimport { computed, inject } from 'vue';\nimport { genericComponent, omit, propsFactory, useRender } from \"../../util/index.js\"; // Types\n\nimport { VTabsSymbol } from \"./shared.js\";\nexport const makeVTabsWindowProps = propsFactory({ ...omit(makeVWindowProps(), ['continuous', 'nextIcon', 'prevIcon', 'showArrows', 'touch', 'mandatory'])\n}, 'VTabsWindow');\nexport const VTabsWindow = genericComponent()({\n  name: 'VTabsWindow',\n  props: makeVTabsWindowProps(),\n  emits: {\n    'update:modelValue': v => true\n  },\n\n  setup(props, _ref) {\n    let {\n      slots\n    } = _ref;\n    const group = inject(VTabsSymbol, null);\n\n    const _model = useProxiedModel(props, 'modelValue');\n\n    const model = computed({\n      get() {\n        // Always return modelValue if defined\n        // or if not within a VTabs group\n        if (_model.value != null || !group) return _model.value; // If inside of a VTabs, find the currently selected\n        // item by id. Item value may be assigned by its index\n\n        return group.items.value.find(item => group.selected.value.includes(item.id))?.value;\n      },\n\n      set(val) {\n        _model.value = val;\n      }\n\n    });\n    useRender(() => {\n      const windowProps = VWindow.filterProps(props);\n      return _createVNode(VWindow, _mergeProps({\n        \"_as\": \"VTabsWindow\"\n      }, windowProps, {\n        \"modelValue\": model.value,\n        \"onUpdate:modelValue\": $event => model.value = $event,\n        \"class\": ['v-tabs-window', props.class],\n        \"style\": props.style,\n        \"mandatory\": false,\n        \"touch\": false\n      }), slots);\n    });\n    return {};\n  }\n\n});","map":{"version":3,"mappings":"8EAAA;;AAAA,SACSA,gBADT,EAC2BC,OAD3B,QACkC,uBADlC,C,CAGA;;AAAA,SACSC,eADT,QACwB,mCADxB,C,CAGA;;AACA,SAASC,QAAT,EAAmBC,MAAnB,QAAiC,KAAjC;AAAsC,SAC7BC,gBAD6B,EACXC,IADW,EACLC,YADK,EACSC,SADT,QACkB,qBADlB,C,CAGtC;;AAAA,SACSC,WADT,QACoB,aADpB;AAGA,OAAO,MAAMC,oBAAoB,GAAGH,YAAY,CAAC,EAC/C,GAAGD,IAAI,CAACN,gBAAgB,EAAjB,EAAqB,CAAC,YAAD,EAAe,UAAf,EAA2B,UAA3B,EAAuC,YAAvC,EAAqD,OAArD,EAA8D,WAA9D,CAArB;AADwC,CAAD,EAE7C,aAF6C,CAAzC;AAIP,OAAO,MAAMW,WAAW,GAAGN,gBAAgB,GAAG;AAC5CO,MAAI,EAAE,aADsC;AAG5CC,OAAK,EAAEH,oBAAoB,EAHiB;AAK5CI,OAAK,EAAE;AACL,yBAAsBC,CAAU,IAAK;AADhC,GALqC;;AAS5CC,OAAKA,CAAEH,KAAFG,EAAOC,IAAPD,EAAoB;AAAA,QAAX;AAAEE;AAAF,QAASD,IAAE;AACvB,UAAME,KAAK,GAAGf,MAAM,CAACK,WAAD,EAAc,IAAd,CAApB;;AACA,UAAMW,MAAM,GAAGlB,eAAe,CAACW,KAAD,EAAQ,YAAR,CAA9B;;AAEA,UAAMQ,KAAK,GAAGlB,QAAQ,CAAC;AACrBmB,SAAGA,GAAI;AACL;AACA;AACA,YAAIF,MAAM,CAACG,KAAPH,IAAgB,IAAhBA,IAAwB,CAACD,KAA7B,EAAoC,OAAOC,MAAM,CAACG,KAAd,CAH/B,CAKL;AACA;;AACA,eAAOJ,KAAK,CAACK,KAANL,CAAYI,KAAZJ,CAAkBM,IAAlBN,CAAuBO,IAAI,IAAIP,KAAK,CAACQ,QAANR,CAAeI,KAAfJ,CAAqBS,QAArBT,CAA8BO,IAAI,CAACG,EAAnCV,CAA/BA,GAAwEI,KAA/E;AACD,OAToB;;AAUrBO,SAAGA,CAAEC,GAAFD,EAAO;AACRV,cAAM,CAACG,KAAPH,GAAeW,GAAfX;AACF;;AAZqB,KAAD,CAAtB;AAeAZ,aAAS,CAAC,MAAM;AACd,YAAMwB,WAAW,GAAG/B,OAAO,CAACgC,WAARhC,CAAoBY,KAApBZ,CAApB;AAEA;AAAA;AAAA,SAGS+B,WAHT,EAGoB;AAAA,sBACNX,KAAK,CAACE,KADA;AACK,yCAAXF,KAAK,CAACE,KAANF,GAAWa,MADL;AACK,iBACd,CACL,eADK,EAELrB,KAAK,CAACsB,KAFD,CAFS;AAKf,iBACOtB,KAAK,CAACuB,KANE;AAMG,qBACP,KAPI;AAOC,iBACT;AARQ,OAHpB,GAYclB,KAZd;AAeD,KAlBQ,CAATV;AAoBA,WAAO,EAAP;AACF;;AAjD4C,CAAH,CAApC","names":["makeVWindowProps","VWindow","useProxiedModel","computed","inject","genericComponent","omit","propsFactory","useRender","VTabsSymbol","makeVTabsWindowProps","VTabsWindow","name","props","emits","v","setup","_ref","slots","group","_model","model","get","value","items","find","item","selected","includes","id","set","val","windowProps","filterProps","$event","class","style"],"sources":["../../../src/components/VTabs/VTabsWindow.tsx"],"sourcesContent":["// Components\nimport { makeVWindowProps, VWindow } from '@/components/VWindow/VWindow'\n\n// Composables\nimport { useProxiedModel } from '@/composables/proxiedModel'\n\n// Utilities\nimport { computed, inject } from 'vue'\nimport { genericComponent, omit, propsFactory, useRender } from '@/util'\n\n// Types\nimport { VTabsSymbol } from './shared'\n\nexport const makeVTabsWindowProps = propsFactory({\n  ...omit(makeVWindowProps(), ['continuous', 'nextIcon', 'prevIcon', 'showArrows', 'touch', 'mandatory']),\n}, 'VTabsWindow')\n\nexport const VTabsWindow = genericComponent()({\n  name: 'VTabsWindow',\n\n  props: makeVTabsWindowProps(),\n\n  emits: {\n    'update:modelValue': (v: unknown) => true,\n  },\n\n  setup (props, { slots }) {\n    const group = inject(VTabsSymbol, null)\n    const _model = useProxiedModel(props, 'modelValue')\n\n    const model = computed({\n      get () {\n        // Always return modelValue if defined\n        // or if not within a VTabs group\n        if (_model.value != null || !group) return _model.value\n\n        // If inside of a VTabs, find the currently selected\n        // item by id. Item value may be assigned by its index\n        return group.items.value.find(item => group.selected.value.includes(item.id))?.value\n      },\n      set (val) {\n        _model.value = val\n      },\n    })\n\n    useRender(() => {\n      const windowProps = VWindow.filterProps(props)\n\n      return (\n        <VWindow\n          _as=\"VTabsWindow\"\n          { ...windowProps }\n          v-model={ model.value }\n          class={[\n            'v-tabs-window',\n            props.class,\n          ]}\n          style={ props.style }\n          mandatory={ false }\n          touch={ false }\n          v-slots={ slots }\n        />\n      )\n    })\n\n    return {}\n  },\n})\n\nexport type VTabsWindow = InstanceType<typeof VTabsWindow>\n"]},"metadata":{},"sourceType":"module"}