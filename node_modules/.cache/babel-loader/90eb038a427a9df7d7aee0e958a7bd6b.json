{"ast":null,"code":"// Utilities\nimport { defer, propsFactory } from \"../util/index.js\"; // Types\n// Composables\n\nexport const makeDelayProps = propsFactory({\n  closeDelay: [Number, String],\n  openDelay: [Number, String]\n}, 'delay');\nexport function useDelay(props, cb) {\n  let clearDelay = () => {};\n\n  function runDelay(isOpening) {\n    clearDelay?.();\n    const delay = Number(isOpening ? props.openDelay : props.closeDelay);\n    return new Promise(resolve => {\n      clearDelay = defer(delay, () => {\n        cb?.(isOpening);\n        resolve(isOpening);\n      });\n    });\n  }\n\n  function runOpenDelay() {\n    return runDelay(true);\n  }\n\n  function runCloseDelay() {\n    return runDelay(false);\n  }\n\n  return {\n    clearDelay,\n    runOpenDelay,\n    runCloseDelay\n  };\n}","map":{"version":3,"mappings":"AAAA;AAAA,SACSA,KADT,EACgBC,YADhB,QAC4B,kBAD5B,C,CAGA;AAMA;;AACA,OAAO,MAAMC,cAAc,GAAGD,YAAY,CAAC;AACzCE,YAAU,EAAE,CAACC,MAAD,EAASC,MAAT,CAD6B;AAEzCC,WAAS,EAAE,CAACF,MAAD,EAASC,MAAT;AAF8B,CAAD,EAGvC,OAHuC,CAAnC;AAKP,OAAO,SAASE,QAAT,CAAmBC,KAAnB,EAAsCC,EAAtC,EAAqE;AAC1E,MAAIC,UAAwB,GAAGA,MAAM,CAAE,CAAvC;;AAEA,WAASC,QAAT,CAAmBC,SAAnB,EAAuC;AACrCF,cAAU;AAEV,UAAMG,KAAK,GAAGT,MAAM,CAACQ,SAAS,GAAGJ,KAAK,CAACF,SAAT,GAAqBE,KAAK,CAACL,UAArC,CAApB;AAEA,WAAO,IAAIW,OAAJ,CAAYC,OAAO,IAAI;AAC5BL,gBAAU,GAAGV,KAAK,CAACa,KAAD,EAAQ,MAAM;AAC9BJ,UAAE,GAAGG,SAAH,CAAFH;AACAM,eAAO,CAACH,SAAD,CAAPG;AACD,OAHiB,CAAlBL;AAID,KALM,CAAP;AAMF;;AAEA,WAASM,YAAT,GAAyB;AACvB,WAAOL,QAAQ,CAAC,IAAD,CAAf;AACF;;AAEA,WAASM,aAAT,GAA0B;AACxB,WAAON,QAAQ,CAAC,KAAD,CAAf;AACF;;AAEA,SAAO;AACLD,cADK;AAELM,gBAFK;AAGLC;AAHK,GAAP;AAKF","names":["defer","propsFactory","makeDelayProps","closeDelay","Number","String","openDelay","useDelay","props","cb","clearDelay","runDelay","isOpening","delay","Promise","resolve","runOpenDelay","runCloseDelay"],"sources":["../../src/composables/delay.ts"],"sourcesContent":["// Utilities\nimport { defer, propsFactory } from '@/util'\n\n// Types\nexport interface DelayProps {\n  closeDelay?: number | string\n  openDelay?: number | string\n}\n\n// Composables\nexport const makeDelayProps = propsFactory({\n  closeDelay: [Number, String],\n  openDelay: [Number, String],\n}, 'delay')\n\nexport function useDelay (props: DelayProps, cb?: (value: boolean) => void) {\n  let clearDelay: (() => void) = () => {}\n\n  function runDelay (isOpening: boolean) {\n    clearDelay?.()\n\n    const delay = Number(isOpening ? props.openDelay : props.closeDelay)\n\n    return new Promise(resolve => {\n      clearDelay = defer(delay, () => {\n        cb?.(isOpening)\n        resolve(isOpening)\n      })\n    })\n  }\n\n  function runOpenDelay () {\n    return runDelay(true)\n  }\n\n  function runCloseDelay () {\n    return runDelay(false)\n  }\n\n  return {\n    clearDelay,\n    runOpenDelay,\n    runCloseDelay,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}