{"ast":null,"code":"import _objectSpread from \"/Users/antoniotorres/Documents/tony/tonyweb/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport { createVNode as _createVNode, Fragment as _Fragment, mergeProps as _mergeProps } from \"vue\"; // Components\n\nimport { VDataTableGroupHeaderRow } from \"./VDataTableGroupHeaderRow.js\";\nimport { VDataTableRow } from \"./VDataTableRow.js\"; // Composables\n\nimport { useExpanded } from \"./composables/expand.js\";\nimport { useGroupBy } from \"./composables/group.js\";\nimport { useHeaders } from \"./composables/headers.js\";\nimport { useSelection } from \"./composables/select.js\";\nimport { makeDisplayProps, useDisplay } from \"../../composables/display.js\";\nimport { useLocale } from \"../../composables/locale.js\"; // Utilities\n\nimport { Fragment, mergeProps } from 'vue';\nimport { genericComponent, getPrefixedEventHandlers, propsFactory, useRender } from \"../../util/index.js\"; // Types\n\nexport var makeVDataTableRowsProps = propsFactory(_objectSpread({\n  loading: [Boolean, String],\n  loadingText: {\n    type: String,\n    default: '$vuetify.dataIterator.loadingText'\n  },\n  hideNoData: Boolean,\n  items: {\n    type: Array,\n    default: function _default() {\n      return [];\n    }\n  },\n  noDataText: {\n    type: String,\n    default: '$vuetify.noDataText'\n  },\n  rowProps: [Object, Function],\n  cellProps: [Object, Function]\n}, makeDisplayProps()), 'VDataTableRows');\nexport var VDataTableRows = genericComponent()({\n  name: 'VDataTableRows',\n  inheritAttrs: false,\n  props: makeVDataTableRowsProps(),\n  setup: function setup(props, _ref) {\n    var attrs = _ref.attrs,\n        slots = _ref.slots;\n\n    var _useHeaders = useHeaders(),\n        columns = _useHeaders.columns;\n\n    var _useExpanded = useExpanded(),\n        expandOnClick = _useExpanded.expandOnClick,\n        toggleExpand = _useExpanded.toggleExpand,\n        isExpanded = _useExpanded.isExpanded;\n\n    var _useSelection = useSelection(),\n        isSelected = _useSelection.isSelected,\n        toggleSelect = _useSelection.toggleSelect;\n\n    var _useGroupBy = useGroupBy(),\n        toggleGroup = _useGroupBy.toggleGroup,\n        isGroupOpen = _useGroupBy.isGroupOpen;\n\n    var _useLocale = useLocale(),\n        t = _useLocale.t;\n\n    var _useDisplay = useDisplay(props),\n        mobile = _useDisplay.mobile;\n\n    useRender(function () {\n      if (props.loading && (!props.items.length || slots.loading)) {\n        var _slots$loading, _slots$loading2;\n\n        return _createVNode(\"tr\", {\n          \"class\": \"v-data-table-rows-loading\",\n          \"key\": \"loading\"\n        }, [_createVNode(\"td\", {\n          \"colspan\": columns.value.length\n        }, [(_slots$loading = (_slots$loading2 = slots.loading) === null || _slots$loading2 === void 0 ? void 0 : _slots$loading2.call(slots)) !== null && _slots$loading !== void 0 ? _slots$loading : t(props.loadingText)])]);\n      }\n\n      if (!props.loading && !props.items.length && !props.hideNoData) {\n        var _slots$noData, _slots$noData2;\n\n        return _createVNode(\"tr\", {\n          \"class\": \"v-data-table-rows-no-data\",\n          \"key\": \"no-data\"\n        }, [_createVNode(\"td\", {\n          \"colspan\": columns.value.length\n        }, [(_slots$noData = (_slots$noData2 = slots['no-data']) === null || _slots$noData2 === void 0 ? void 0 : _slots$noData2.call(slots)) !== null && _slots$noData !== void 0 ? _slots$noData : t(props.noDataText)])]);\n      }\n\n      return _createVNode(_Fragment, null, [props.items.map(function (item, index) {\n        var _item$key, _slots$expandedRow;\n\n        if (item.type === 'group') {\n          var _slotProps = {\n            index: index,\n            item: item,\n            columns: columns.value,\n            isExpanded: isExpanded,\n            toggleExpand: toggleExpand,\n            isSelected: isSelected,\n            toggleSelect: toggleSelect,\n            toggleGroup: toggleGroup,\n            isGroupOpen: isGroupOpen\n          };\n          return slots['group-header'] ? slots['group-header'](_slotProps) : _createVNode(VDataTableGroupHeaderRow, _mergeProps({\n            \"key\": \"group-header_\".concat(item.id),\n            \"item\": item\n          }, getPrefixedEventHandlers(attrs, ':group-header', function () {\n            return _slotProps;\n          })), slots);\n        }\n\n        var slotProps = {\n          index: index,\n          item: item.raw,\n          internalItem: item,\n          columns: columns.value,\n          isExpanded: isExpanded,\n          toggleExpand: toggleExpand,\n          isSelected: isSelected,\n          toggleSelect: toggleSelect\n        };\n\n        var itemSlotProps = _objectSpread(_objectSpread({}, slotProps), {}, {\n          props: mergeProps({\n            key: \"item_\".concat((_item$key = item.key) !== null && _item$key !== void 0 ? _item$key : item.index),\n            onClick: expandOnClick.value ? function () {\n              toggleExpand(item);\n            } : undefined,\n            index: index,\n            item: item,\n            cellProps: props.cellProps,\n            mobile: mobile.value\n          }, getPrefixedEventHandlers(attrs, ':row', function () {\n            return slotProps;\n          }), typeof props.rowProps === 'function' ? props.rowProps({\n            item: slotProps.item,\n            index: slotProps.index,\n            internalItem: slotProps.internalItem\n          }) : props.rowProps)\n        });\n\n        return _createVNode(_Fragment, {\n          \"key\": itemSlotProps.props.key\n        }, [slots.item ? slots.item(itemSlotProps) : _createVNode(VDataTableRow, itemSlotProps.props, slots), isExpanded(item) && ((_slots$expandedRow = slots['expanded-row']) === null || _slots$expandedRow === void 0 ? void 0 : _slots$expandedRow.call(slots, slotProps))]);\n      })]);\n    });\n    return {};\n  }\n});","map":{"version":3,"mappings":"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","names":["VDataTableGroupHeaderRow","VDataTableRow","useExpanded","useGroupBy","useHeaders","useSelection","makeDisplayProps","useDisplay","useLocale","Fragment","mergeProps","genericComponent","getPrefixedEventHandlers","propsFactory","useRender","makeVDataTableRowsProps","loading","Boolean","String","loadingText","type","default","hideNoData","items","Array","noDataText","rowProps","Object","Function","cellProps","VDataTableRows","name","inheritAttrs","props","setup","_ref","attrs","slots","columns","expandOnClick","toggleExpand","isExpanded","isSelected","toggleSelect","toggleGroup","isGroupOpen","t","mobile","length","value","map","item","index","slotProps","_createVNode","id","raw","internalItem","itemSlotProps","key","onClick","undefined"],"sources":["../../../src/components/VDataTable/VDataTableRows.tsx"],"sourcesContent":["// Components\nimport { VDataTableGroupHeaderRow } from './VDataTableGroupHeaderRow'\nimport { VDataTableRow } from './VDataTableRow'\n\n// Composables\nimport { useExpanded } from './composables/expand'\nimport { useGroupBy } from './composables/group'\nimport { useHeaders } from './composables/headers'\nimport { useSelection } from './composables/select'\nimport { makeDisplayProps, useDisplay } from '@/composables/display'\nimport { useLocale } from '@/composables/locale'\n\n// Utilities\nimport { Fragment, mergeProps } from 'vue'\nimport { genericComponent, getPrefixedEventHandlers, propsFactory, useRender } from '@/util'\n\n// Types\nimport type { PropType } from 'vue'\nimport type { Group } from './composables/group'\nimport type { CellProps, DataTableItem, GroupHeaderSlot, ItemSlot, RowProps } from './types'\nimport type { VDataTableGroupHeaderRowSlots } from './VDataTableGroupHeaderRow'\nimport type { VDataTableRowSlots } from './VDataTableRow'\nimport type { GenericProps } from '@/util'\n\nexport type VDataTableRowsSlots<T> = VDataTableGroupHeaderRowSlots & VDataTableRowSlots<T> & {\n  item: ItemSlot<T> & { props: Record<string, any> }\n  loading: never\n  'group-header': GroupHeaderSlot\n  'no-data': never\n  'expanded-row': ItemSlot<T>\n}\n\nexport const makeVDataTableRowsProps = propsFactory({\n  loading: [Boolean, String],\n  loadingText: {\n    type: String,\n    default: '$vuetify.dataIterator.loadingText',\n  },\n  hideNoData: Boolean,\n  items: {\n    type: Array as PropType<readonly (DataTableItem | Group)[]>,\n    default: () => ([]),\n  },\n  noDataText: {\n    type: String,\n    default: '$vuetify.noDataText',\n  },\n  rowProps: [Object, Function] as PropType<RowProps<any>>,\n  cellProps: [Object, Function] as PropType<CellProps<any>>,\n\n  ...makeDisplayProps(),\n}, 'VDataTableRows')\n\nexport const VDataTableRows = genericComponent<new <T>(\n  props: {\n    items?: readonly (DataTableItem<T> | Group<T>)[]\n  },\n  slots: VDataTableRowsSlots<T>,\n) => GenericProps<typeof props, typeof slots>>()({\n  name: 'VDataTableRows',\n\n  inheritAttrs: false,\n\n  props: makeVDataTableRowsProps(),\n\n  setup (props, { attrs, slots }) {\n    const { columns } = useHeaders()\n    const { expandOnClick, toggleExpand, isExpanded } = useExpanded()\n    const { isSelected, toggleSelect } = useSelection()\n    const { toggleGroup, isGroupOpen } = useGroupBy()\n    const { t } = useLocale()\n    const { mobile } = useDisplay(props)\n\n    useRender(() => {\n      if (props.loading && (!props.items.length || slots.loading)) {\n        return (\n          <tr\n            class=\"v-data-table-rows-loading\"\n            key=\"loading\"\n          >\n            <td colspan={ columns.value.length }>\n              { slots.loading?.() ?? t(props.loadingText) }\n            </td>\n          </tr>\n        )\n      }\n\n      if (!props.loading && !props.items.length && !props.hideNoData) {\n        return (\n          <tr\n            class=\"v-data-table-rows-no-data\"\n            key=\"no-data\"\n          >\n            <td colspan={ columns.value.length }>\n              { slots['no-data']?.() ?? t(props.noDataText) }\n            </td>\n          </tr>\n        )\n      }\n\n      return (\n        <>\n          { props.items.map((item, index) => {\n            if (item.type === 'group') {\n              const slotProps = {\n                index,\n                item,\n                columns: columns.value,\n                isExpanded,\n                toggleExpand,\n                isSelected,\n                toggleSelect,\n                toggleGroup,\n                isGroupOpen,\n              } satisfies GroupHeaderSlot\n\n              return slots['group-header'] ? slots['group-header'](slotProps) : (\n                <VDataTableGroupHeaderRow\n                  key={ `group-header_${item.id}` }\n                  item={ item }\n                  { ...getPrefixedEventHandlers(attrs, ':group-header', () => slotProps) }\n                  v-slots={ slots }\n                />\n              )\n            }\n\n            const slotProps = {\n              index,\n              item: item.raw,\n              internalItem: item,\n              columns: columns.value,\n              isExpanded,\n              toggleExpand,\n              isSelected,\n              toggleSelect,\n            } satisfies ItemSlot<any>\n\n            const itemSlotProps = {\n              ...slotProps,\n              props: mergeProps(\n                {\n                  key: `item_${item.key ?? item.index}`,\n                  onClick: expandOnClick.value ? () => {\n                    toggleExpand(item)\n                  } : undefined,\n                  index,\n                  item,\n                  cellProps: props.cellProps,\n                  mobile: mobile.value,\n                },\n                getPrefixedEventHandlers(attrs, ':row', () => slotProps),\n                typeof props.rowProps === 'function'\n                  ? props.rowProps({\n                    item: slotProps.item,\n                    index: slotProps.index,\n                    internalItem: slotProps.internalItem,\n                  })\n                  : props.rowProps,\n              ),\n            }\n\n            return (\n              <Fragment key={ itemSlotProps.props.key as string }>\n                { slots.item ? slots.item(itemSlotProps) : (\n                  <VDataTableRow\n                    { ...itemSlotProps.props }\n                    v-slots={ slots }\n                  />\n                )}\n\n                { isExpanded(item) && slots['expanded-row']?.(slotProps) }\n              </Fragment>\n            )\n          })}\n        </>\n      )\n    })\n\n    return {}\n  },\n})\n\nexport type VDataTableRows = InstanceType<typeof VDataTableRows>\n"]},"metadata":{},"sourceType":"module"}