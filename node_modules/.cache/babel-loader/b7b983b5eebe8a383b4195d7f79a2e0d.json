{"ast":null,"code":"import { createVNode as _createVNode, mergeProps as _mergeProps } from \"vue\"; // Styles\n\nimport \"./VSnackbar.css\"; // Components\n\nimport { VDefaultsProvider } from \"../VDefaultsProvider/index.js\";\nimport { VOverlay } from \"../VOverlay/index.js\";\nimport { makeVOverlayProps } from \"../VOverlay/VOverlay.js\";\nimport { VProgressLinear } from \"../VProgressLinear/index.js\"; // Composables\n\nimport { useLayout } from \"../../composables/index.js\";\nimport { forwardRefs } from \"../../composables/forwardRefs.js\";\nimport { VuetifyLayoutKey } from \"../../composables/layout.js\";\nimport { makeLocationProps } from \"../../composables/location.js\";\nimport { makePositionProps, usePosition } from \"../../composables/position.js\";\nimport { useProxiedModel } from \"../../composables/proxiedModel.js\";\nimport { makeRoundedProps, useRounded } from \"../../composables/rounded.js\";\nimport { useScopeId } from \"../../composables/scopeId.js\";\nimport { makeThemeProps, provideTheme } from \"../../composables/theme.js\";\nimport { useToggleScope } from \"../../composables/toggleScope.js\";\nimport { genOverlays, makeVariantProps, useVariant } from \"../../composables/variant.js\"; // Utilities\n\nimport { computed, inject, mergeProps, nextTick, onMounted, onScopeDispose, ref, shallowRef, watch, watchEffect } from 'vue';\nimport { genericComponent, omit, propsFactory, refElement, useRender } from \"../../util/index.js\"; // Types\n\nfunction useCountdown(milliseconds) {\n  const time = shallowRef(milliseconds());\n  let timer = -1;\n\n  function clear() {\n    clearInterval(timer);\n  }\n\n  function reset() {\n    clear();\n    nextTick(() => time.value = milliseconds());\n  }\n\n  function start(el) {\n    const style = el ? getComputedStyle(el) : {\n      transitionDuration: 0.2\n    };\n    const interval = parseFloat(style.transitionDuration) * 1000 || 200;\n    clear();\n    if (time.value <= 0) return;\n    const startTime = performance.now();\n    timer = window.setInterval(() => {\n      const elapsed = performance.now() - startTime + interval;\n      time.value = Math.max(milliseconds() - elapsed, 0);\n      if (time.value <= 0) clear();\n    }, interval);\n  }\n\n  onScopeDispose(clear);\n  return {\n    clear,\n    time,\n    start,\n    reset\n  };\n}\n\nexport const makeVSnackbarProps = propsFactory({\n  multiLine: Boolean,\n  text: String,\n  timer: [Boolean, String],\n  timeout: {\n    type: [Number, String],\n    default: 5000\n  },\n  vertical: Boolean,\n  ...makeLocationProps({\n    location: 'bottom'\n  }),\n  ...makePositionProps(),\n  ...makeRoundedProps(),\n  ...makeVariantProps(),\n  ...makeThemeProps(),\n  ...omit(makeVOverlayProps({\n    transition: 'v-snackbar-transition'\n  }), ['persistent', 'noClickAnimation', 'scrim', 'scrollStrategy'])\n}, 'VSnackbar');\nexport const VSnackbar = genericComponent()({\n  name: 'VSnackbar',\n  props: makeVSnackbarProps(),\n  emits: {\n    'update:modelValue': v => true\n  },\n\n  setup(props, _ref) {\n    let {\n      slots\n    } = _ref;\n    const isActive = useProxiedModel(props, 'modelValue');\n    const {\n      positionClasses\n    } = usePosition(props);\n    const {\n      scopeId\n    } = useScopeId();\n    const {\n      themeClasses\n    } = provideTheme(props);\n    const {\n      colorClasses,\n      colorStyles,\n      variantClasses\n    } = useVariant(props);\n    const {\n      roundedClasses\n    } = useRounded(props);\n    const countdown = useCountdown(() => Number(props.timeout));\n    const overlay = ref();\n    const timerRef = ref();\n    const isHovering = shallowRef(false);\n    const startY = shallowRef(0);\n    const mainStyles = ref();\n    const hasLayout = inject(VuetifyLayoutKey, undefined);\n    useToggleScope(() => !!hasLayout, () => {\n      const layout = useLayout();\n      watchEffect(() => {\n        mainStyles.value = layout.mainStyles.value;\n      });\n    });\n    watch(isActive, startTimeout);\n    watch(() => props.timeout, startTimeout);\n    onMounted(() => {\n      if (isActive.value) startTimeout();\n    });\n    let activeTimeout = -1;\n\n    function startTimeout() {\n      countdown.reset();\n      window.clearTimeout(activeTimeout);\n      const timeout = Number(props.timeout);\n      if (!isActive.value || timeout === -1) return;\n      const element = refElement(timerRef.value);\n      countdown.start(element);\n      activeTimeout = window.setTimeout(() => {\n        isActive.value = false;\n      }, timeout);\n    }\n\n    function clearTimeout() {\n      countdown.reset();\n      window.clearTimeout(activeTimeout);\n    }\n\n    function onPointerenter() {\n      isHovering.value = true;\n      clearTimeout();\n    }\n\n    function onPointerleave() {\n      isHovering.value = false;\n      startTimeout();\n    }\n\n    function onTouchstart(event) {\n      startY.value = event.touches[0].clientY;\n    }\n\n    function onTouchend(event) {\n      if (Math.abs(startY.value - event.changedTouches[0].clientY) > 50) {\n        isActive.value = false;\n      }\n    }\n\n    function onAfterLeave() {\n      if (isHovering.value) onPointerleave();\n    }\n\n    const locationClasses = computed(() => {\n      return props.location.split(' ').reduce((acc, loc) => {\n        acc[`v-snackbar--${loc}`] = true;\n        return acc;\n      }, {});\n    });\n    useRender(() => {\n      const overlayProps = VOverlay.filterProps(props);\n      const hasContent = !!(slots.default || slots.text || props.text);\n      return _createVNode(VOverlay, _mergeProps({\n        \"ref\": overlay,\n        \"class\": ['v-snackbar', {\n          'v-snackbar--active': isActive.value,\n          'v-snackbar--multi-line': props.multiLine && !props.vertical,\n          'v-snackbar--timer': !!props.timer,\n          'v-snackbar--vertical': props.vertical\n        }, locationClasses.value, positionClasses.value, props.class],\n        \"style\": [mainStyles.value, props.style]\n      }, overlayProps, {\n        \"modelValue\": isActive.value,\n        \"onUpdate:modelValue\": $event => isActive.value = $event,\n        \"contentProps\": mergeProps({\n          class: ['v-snackbar__wrapper', themeClasses.value, colorClasses.value, roundedClasses.value, variantClasses.value],\n          style: [colorStyles.value],\n          onPointerenter,\n          onPointerleave\n        }, overlayProps.contentProps),\n        \"persistent\": true,\n        \"noClickAnimation\": true,\n        \"scrim\": false,\n        \"scrollStrategy\": \"none\",\n        \"_disableGlobalStack\": true,\n        \"onTouchstartPassive\": onTouchstart,\n        \"onTouchend\": onTouchend,\n        \"onAfterLeave\": onAfterLeave\n      }, scopeId), {\n        default: () => [genOverlays(false, 'v-snackbar'), props.timer && !isHovering.value && _createVNode(\"div\", {\n          \"key\": \"timer\",\n          \"class\": \"v-snackbar__timer\"\n        }, [_createVNode(VProgressLinear, {\n          \"ref\": timerRef,\n          \"color\": typeof props.timer === 'string' ? props.timer : 'info',\n          \"max\": props.timeout,\n          \"model-value\": countdown.time.value\n        }, null)]), hasContent && _createVNode(\"div\", {\n          \"key\": \"content\",\n          \"class\": \"v-snackbar__content\",\n          \"role\": \"status\",\n          \"aria-live\": \"polite\"\n        }, [slots.text?.() ?? props.text, slots.default?.()]), slots.actions && _createVNode(VDefaultsProvider, {\n          \"defaults\": {\n            VBtn: {\n              variant: 'text',\n              ripple: false,\n              slim: true\n            }\n          }\n        }, {\n          default: () => [_createVNode(\"div\", {\n            \"class\": \"v-snackbar__actions\"\n          }, [slots.actions({\n            isActive\n          })])]\n        })],\n        activator: slots.activator\n      });\n    });\n    return forwardRefs({}, overlay);\n  }\n\n});","map":{"version":3,"mappings":"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","names":["VDefaultsProvider","VOverlay","makeVOverlayProps","VProgressLinear","useLayout","forwardRefs","VuetifyLayoutKey","makeLocationProps","makePositionProps","usePosition","useProxiedModel","makeRoundedProps","useRounded","useScopeId","makeThemeProps","provideTheme","useToggleScope","genOverlays","makeVariantProps","useVariant","computed","inject","mergeProps","nextTick","onMounted","onScopeDispose","ref","shallowRef","watch","watchEffect","genericComponent","omit","propsFactory","refElement","useRender","useCountdown","milliseconds","time","timer","clear","clearInterval","reset","value","start","el","style","getComputedStyle","transitionDuration","interval","parseFloat","startTime","performance","now","window","setInterval","elapsed","Math","max","makeVSnackbarProps","multiLine","Boolean","text","String","timeout","type","Number","default","vertical","location","transition","VSnackbar","name","props","emits","v","setup","_ref","slots","isActive","positionClasses","scopeId","themeClasses","colorClasses","colorStyles","variantClasses","roundedClasses","countdown","overlay","timerRef","isHovering","startY","mainStyles","hasLayout","undefined","layout","startTimeout","activeTimeout","clearTimeout","element","setTimeout","onPointerenter","onPointerleave","onTouchstart","event","touches","clientY","onTouchend","abs","changedTouches","onAfterLeave","locationClasses","split","reduce","acc","loc","overlayProps","filterProps","hasContent","class","$event","contentProps","_createVNode","actions","VBtn","variant","ripple","slim","activator"],"sources":["../../../src/components/VSnackbar/VSnackbar.tsx"],"sourcesContent":["// Styles\nimport './VSnackbar.sass'\n\n// Components\nimport { VDefaultsProvider } from '@/components/VDefaultsProvider'\nimport { VOverlay } from '@/components/VOverlay'\nimport { makeVOverlayProps } from '@/components/VOverlay/VOverlay'\nimport { VProgressLinear } from '@/components/VProgressLinear'\n\n// Composables\nimport { useLayout } from '@/composables'\nimport { forwardRefs } from '@/composables/forwardRefs'\nimport { VuetifyLayoutKey } from '@/composables/layout'\nimport { makeLocationProps } from '@/composables/location'\nimport { makePositionProps, usePosition } from '@/composables/position'\nimport { useProxiedModel } from '@/composables/proxiedModel'\nimport { makeRoundedProps, useRounded } from '@/composables/rounded'\nimport { useScopeId } from '@/composables/scopeId'\nimport { makeThemeProps, provideTheme } from '@/composables/theme'\nimport { useToggleScope } from '@/composables/toggleScope'\nimport { genOverlays, makeVariantProps, useVariant } from '@/composables/variant'\n\n// Utilities\nimport { computed, inject, mergeProps, nextTick, onMounted, onScopeDispose, ref, shallowRef, watch, watchEffect } from 'vue'\nimport { genericComponent, omit, propsFactory, refElement, useRender } from '@/util'\n\n// Types\nimport type { Ref } from 'vue'\n\ntype VSnackbarSlots = {\n  activator: { isActive: boolean, props: Record<string, any> }\n  default: never\n  actions: { isActive: Ref<boolean> }\n  text: never\n}\n\nfunction useCountdown (milliseconds: () => number) {\n  const time = shallowRef(milliseconds())\n  let timer = -1\n\n  function clear () {\n    clearInterval(timer)\n  }\n\n  function reset () {\n    clear()\n\n    nextTick(() => time.value = milliseconds())\n  }\n\n  function start (el?: HTMLElement) {\n    const style = el ? getComputedStyle(el) : { transitionDuration: 0.2 }\n    const interval = parseFloat(style.transitionDuration) * 1000 || 200\n\n    clear()\n\n    if (time.value <= 0) return\n\n    const startTime = performance.now()\n    timer = window.setInterval(() => {\n      const elapsed = performance.now() - startTime + interval\n      time.value = Math.max(milliseconds() - elapsed, 0)\n\n      if (time.value <= 0) clear()\n    }, interval)\n  }\n\n  onScopeDispose(clear)\n\n  return { clear, time, start, reset }\n}\n\nexport const makeVSnackbarProps = propsFactory({\n  multiLine: Boolean,\n  text: String,\n  timer: [Boolean, String],\n  timeout: {\n    type: [Number, String],\n    default: 5000,\n  },\n  vertical: Boolean,\n\n  ...makeLocationProps({ location: 'bottom' } as const),\n  ...makePositionProps(),\n  ...makeRoundedProps(),\n  ...makeVariantProps(),\n  ...makeThemeProps(),\n  ...omit(makeVOverlayProps({\n    transition: 'v-snackbar-transition',\n  }), ['persistent', 'noClickAnimation', 'scrim', 'scrollStrategy']),\n}, 'VSnackbar')\n\nexport const VSnackbar = genericComponent<VSnackbarSlots>()({\n  name: 'VSnackbar',\n\n  props: makeVSnackbarProps(),\n\n  emits: {\n    'update:modelValue': (v: boolean) => true,\n  },\n\n  setup (props, { slots }) {\n    const isActive = useProxiedModel(props, 'modelValue')\n    const { positionClasses } = usePosition(props)\n    const { scopeId } = useScopeId()\n    const { themeClasses } = provideTheme(props)\n    const { colorClasses, colorStyles, variantClasses } = useVariant(props)\n    const { roundedClasses } = useRounded(props)\n    const countdown = useCountdown(() => Number(props.timeout))\n\n    const overlay = ref<VOverlay>()\n    const timerRef = ref<VProgressLinear>()\n    const isHovering = shallowRef(false)\n    const startY = shallowRef(0)\n    const mainStyles = ref()\n    const hasLayout = inject(VuetifyLayoutKey, undefined)\n\n    useToggleScope(() => !!hasLayout, () => {\n      const layout = useLayout()\n\n      watchEffect(() => {\n        mainStyles.value = layout.mainStyles.value\n      })\n    })\n\n    watch(isActive, startTimeout)\n    watch(() => props.timeout, startTimeout)\n\n    onMounted(() => {\n      if (isActive.value) startTimeout()\n    })\n\n    let activeTimeout = -1\n    function startTimeout () {\n      countdown.reset()\n      window.clearTimeout(activeTimeout)\n      const timeout = Number(props.timeout)\n\n      if (!isActive.value || timeout === -1) return\n\n      const element = refElement(timerRef.value)\n\n      countdown.start(element)\n\n      activeTimeout = window.setTimeout(() => {\n        isActive.value = false\n      }, timeout)\n    }\n\n    function clearTimeout () {\n      countdown.reset()\n      window.clearTimeout(activeTimeout)\n    }\n\n    function onPointerenter () {\n      isHovering.value = true\n      clearTimeout()\n    }\n\n    function onPointerleave () {\n      isHovering.value = false\n      startTimeout()\n    }\n\n    function onTouchstart (event: TouchEvent) {\n      startY.value = event.touches[0].clientY\n    }\n\n    function onTouchend (event: TouchEvent) {\n      if (Math.abs(startY.value - event.changedTouches[0].clientY) > 50) {\n        isActive.value = false\n      }\n    }\n\n    function onAfterLeave () {\n      if (isHovering.value) onPointerleave()\n    }\n\n    const locationClasses = computed(() => {\n      return props.location.split(' ').reduce((acc, loc) => {\n        acc[`v-snackbar--${loc}`] = true\n\n        return acc\n      }, {} as Record<string, any>)\n    })\n\n    useRender(() => {\n      const overlayProps = VOverlay.filterProps(props)\n      const hasContent = !!(slots.default || slots.text || props.text)\n\n      return (\n        <VOverlay\n          ref={ overlay }\n          class={[\n            'v-snackbar',\n            {\n              'v-snackbar--active': isActive.value,\n              'v-snackbar--multi-line': props.multiLine && !props.vertical,\n              'v-snackbar--timer': !!props.timer,\n              'v-snackbar--vertical': props.vertical,\n            },\n            locationClasses.value,\n            positionClasses.value,\n            props.class,\n          ]}\n          style={[\n            mainStyles.value,\n            props.style,\n          ]}\n          { ...overlayProps }\n          v-model={ isActive.value }\n          contentProps={ mergeProps({\n            class: [\n              'v-snackbar__wrapper',\n              themeClasses.value,\n              colorClasses.value,\n              roundedClasses.value,\n              variantClasses.value,\n            ],\n            style: [\n              colorStyles.value,\n            ],\n            onPointerenter,\n            onPointerleave,\n          }, overlayProps.contentProps)}\n          persistent\n          noClickAnimation\n          scrim={ false }\n          scrollStrategy=\"none\"\n          _disableGlobalStack\n          onTouchstartPassive={ onTouchstart }\n          onTouchend={ onTouchend }\n          onAfterLeave={ onAfterLeave }\n          { ...scopeId }\n          v-slots={{ activator: slots.activator }}\n        >\n          { genOverlays(false, 'v-snackbar') }\n\n          { props.timer && !isHovering.value && (\n            <div key=\"timer\" class=\"v-snackbar__timer\">\n              <VProgressLinear\n                ref={ timerRef }\n                color={ typeof props.timer === 'string' ? props.timer : 'info' }\n                max={ props.timeout }\n                model-value={ countdown.time.value }\n              />\n            </div>\n          )}\n\n          { hasContent && (\n            <div\n              key=\"content\"\n              class=\"v-snackbar__content\"\n              role=\"status\"\n              aria-live=\"polite\"\n            >\n              { slots.text?.() ?? props.text }\n\n              { slots.default?.() }\n            </div>\n          )}\n\n          { slots.actions && (\n            <VDefaultsProvider\n              defaults={{\n                VBtn: {\n                  variant: 'text',\n                  ripple: false,\n                  slim: true,\n                },\n              }}\n            >\n              <div class=\"v-snackbar__actions\">\n                { slots.actions({ isActive }) }\n              </div>\n            </VDefaultsProvider>\n          )}\n        </VOverlay>\n      )\n    })\n\n    return forwardRefs({}, overlay)\n  },\n})\n\nexport type VSnackbar = InstanceType<typeof VSnackbar>\n"]},"metadata":{},"sourceType":"module"}