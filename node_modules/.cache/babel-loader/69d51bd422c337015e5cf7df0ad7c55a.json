{"ast":null,"code":"import { mergeProps as _mergeProps, createVNode as _createVNode } from \"vue\"; // Styles\n\nimport \"./VChipGroup.css\"; // Components\n\nimport { makeVSlideGroupProps, VSlideGroup } from \"../VSlideGroup/VSlideGroup.js\"; // Composables\n\nimport { makeComponentProps } from \"../../composables/component.js\";\nimport { provideDefaults } from \"../../composables/defaults.js\";\nimport { makeGroupProps, useGroup } from \"../../composables/group.js\";\nimport { makeTagProps } from \"../../composables/tag.js\";\nimport { makeThemeProps, provideTheme } from \"../../composables/theme.js\";\nimport { makeVariantProps } from \"../../composables/variant.js\"; // Utilities\n\nimport { toRef } from 'vue';\nimport { deepEqual, genericComponent, propsFactory, useRender } from \"../../util/index.js\"; // Types\n\nexport const VChipGroupSymbol = Symbol.for('vuetify:v-chip-group');\nexport const makeVChipGroupProps = propsFactory({\n  baseColor: String,\n  column: Boolean,\n  filter: Boolean,\n  valueComparator: {\n    type: Function,\n    default: deepEqual\n  },\n  ...makeVSlideGroupProps(),\n  ...makeComponentProps(),\n  ...makeGroupProps({\n    selectedClass: 'v-chip--selected'\n  }),\n  ...makeTagProps(),\n  ...makeThemeProps(),\n  ...makeVariantProps({\n    variant: 'tonal'\n  })\n}, 'VChipGroup');\nexport const VChipGroup = genericComponent()({\n  name: 'VChipGroup',\n  props: makeVChipGroupProps(),\n  emits: {\n    'update:modelValue': value => true\n  },\n\n  setup(props, _ref) {\n    let {\n      slots\n    } = _ref;\n    const {\n      themeClasses\n    } = provideTheme(props);\n    const {\n      isSelected,\n      select,\n      next,\n      prev,\n      selected\n    } = useGroup(props, VChipGroupSymbol);\n    provideDefaults({\n      VChip: {\n        baseColor: toRef(props, 'baseColor'),\n        color: toRef(props, 'color'),\n        disabled: toRef(props, 'disabled'),\n        filter: toRef(props, 'filter'),\n        variant: toRef(props, 'variant')\n      }\n    });\n    useRender(() => {\n      const slideGroupProps = VSlideGroup.filterProps(props);\n      return _createVNode(VSlideGroup, _mergeProps(slideGroupProps, {\n        \"class\": ['v-chip-group', {\n          'v-chip-group--column': props.column\n        }, themeClasses.value, props.class],\n        \"style\": props.style\n      }), {\n        default: () => [slots.default?.({\n          isSelected,\n          select,\n          next,\n          prev,\n          selected: selected.value\n        })]\n      });\n    });\n    return {};\n  }\n\n});","map":{"version":3,"mappings":"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","names":["makeVSlideGroupProps","VSlideGroup","makeComponentProps","provideDefaults","makeGroupProps","useGroup","makeTagProps","makeThemeProps","provideTheme","makeVariantProps","toRef","deepEqual","genericComponent","propsFactory","useRender","VChipGroupSymbol","Symbol","for","makeVChipGroupProps","baseColor","String","column","Boolean","filter","valueComparator","type","Function","default","selectedClass","variant","VChipGroup","name","props","emits","value","setup","_ref","slots","themeClasses","isSelected","select","next","prev","selected","VChip","color","disabled","slideGroupProps","filterProps","class","style"],"sources":["../../../src/components/VChipGroup/VChipGroup.tsx"],"sourcesContent":["// Styles\nimport './VChipGroup.sass'\n\n// Components\nimport { makeVSlideGroupProps, VSlideGroup } from '@/components/VSlideGroup/VSlideGroup'\n\n// Composables\nimport { makeComponentProps } from '@/composables/component'\nimport { provideDefaults } from '@/composables/defaults'\nimport { makeGroupProps, useGroup } from '@/composables/group'\nimport { makeTagProps } from '@/composables/tag'\nimport { makeThemeProps, provideTheme } from '@/composables/theme'\nimport { makeVariantProps } from '@/composables/variant'\n\n// Utilities\nimport { toRef } from 'vue'\nimport { deepEqual, genericComponent, propsFactory, useRender } from '@/util'\n\n// Types\nimport type { PropType } from 'vue'\nimport type { GenericProps } from '@/util'\n\nexport const VChipGroupSymbol = Symbol.for('vuetify:v-chip-group')\n\nexport const makeVChipGroupProps = propsFactory({\n  baseColor: String,\n  column: Boolean,\n  filter: Boolean,\n  valueComparator: {\n    type: Function as PropType<typeof deepEqual>,\n    default: deepEqual,\n  },\n\n  ...makeVSlideGroupProps(),\n  ...makeComponentProps(),\n  ...makeGroupProps({ selectedClass: 'v-chip--selected' }),\n  ...makeTagProps(),\n  ...makeThemeProps(),\n  ...makeVariantProps({ variant: 'tonal' } as const),\n}, 'VChipGroup')\n\ntype VChipGroupSlots = {\n  default: {\n    isSelected: (id: string) => boolean\n    select: (id: string, value: boolean) => void\n    next: () => void\n    prev: () => void\n    selected: readonly string[]\n  }\n}\n\nexport const VChipGroup = genericComponent<new <T>(\n  props: {\n    modelValue?: T\n    'onUpdate:modelValue'?: (value: T) => void\n  },\n  slots: VChipGroupSlots,\n) => GenericProps<typeof props, typeof slots>>()({\n  name: 'VChipGroup',\n\n  props: makeVChipGroupProps(),\n\n  emits: {\n    'update:modelValue': (value: any) => true,\n  },\n\n  setup (props, { slots }) {\n    const { themeClasses } = provideTheme(props)\n    const { isSelected, select, next, prev, selected } = useGroup(props, VChipGroupSymbol)\n\n    provideDefaults({\n      VChip: {\n        baseColor: toRef(props, 'baseColor'),\n        color: toRef(props, 'color'),\n        disabled: toRef(props, 'disabled'),\n        filter: toRef(props, 'filter'),\n        variant: toRef(props, 'variant'),\n      },\n    })\n\n    useRender(() => {\n      const slideGroupProps = VSlideGroup.filterProps(props)\n\n      return (\n        <VSlideGroup\n          { ...slideGroupProps }\n          class={[\n            'v-chip-group',\n            {\n              'v-chip-group--column': props.column,\n            },\n            themeClasses.value,\n            props.class,\n          ]}\n          style={ props.style }\n        >\n          { slots.default?.({\n            isSelected,\n            select,\n            next,\n            prev,\n            selected: selected.value,\n          })}\n        </VSlideGroup>\n      )\n    })\n\n    return {}\n  },\n})\n\nexport type VChipGroup = InstanceType<typeof VChipGroup>\n"]},"metadata":{},"sourceType":"module"}