{"ast":null,"code":"import { Fragment as _Fragment, createVNode as _createVNode, mergeProps as _mergeProps } from \"vue\"; // Styles\n\nimport \"./VOtpInput.css\"; // Components\n\nimport { makeVFieldProps, VField } from \"../VField/VField.js\";\nimport { VOverlay } from \"../VOverlay/VOverlay.js\";\nimport { VProgressCircular } from \"../VProgressCircular/VProgressCircular.js\"; // Composables\n\nimport { provideDefaults } from \"../../composables/defaults.js\";\nimport { makeDimensionProps, useDimension } from \"../../composables/dimensions.js\";\nimport { makeFocusProps, useFocus } from \"../../composables/focus.js\";\nimport { useLocale } from \"../../composables/locale.js\";\nimport { useProxiedModel } from \"../../composables/proxiedModel.js\"; // Utilities\n\nimport { computed, nextTick, ref, watch } from 'vue';\nimport { filterInputAttrs, focusChild, genericComponent, pick, propsFactory, useRender } from \"../../util/index.js\"; // Types\n// Types\n\nexport const makeVOtpInputProps = propsFactory({\n  autofocus: Boolean,\n  divider: String,\n  focusAll: Boolean,\n  label: {\n    type: String,\n    default: '$vuetify.input.otp'\n  },\n  length: {\n    type: [Number, String],\n    default: 6\n  },\n  modelValue: {\n    type: [Number, String],\n    default: undefined\n  },\n  placeholder: String,\n  type: {\n    type: String,\n    default: 'number'\n  },\n  ...makeDimensionProps(),\n  ...makeFocusProps(),\n  ...pick(makeVFieldProps({\n    variant: 'outlined'\n  }), ['baseColor', 'bgColor', 'class', 'color', 'disabled', 'error', 'loading', 'rounded', 'style', 'theme', 'variant'])\n}, 'VOtpInput');\nexport const VOtpInput = genericComponent()({\n  name: 'VOtpInput',\n  props: makeVOtpInputProps(),\n  emits: {\n    finish: val => true,\n    'update:focused': val => true,\n    'update:modelValue': val => true\n  },\n\n  setup(props, _ref) {\n    let {\n      attrs,\n      emit,\n      slots\n    } = _ref;\n    const {\n      dimensionStyles\n    } = useDimension(props);\n    const {\n      isFocused,\n      focus,\n      blur\n    } = useFocus(props);\n    const model = useProxiedModel(props, 'modelValue', '', val => val == null ? [] : String(val).split(''), val => val.join(''));\n    const {\n      t\n    } = useLocale();\n    const length = computed(() => Number(props.length));\n    const fields = computed(() => Array(length.value).fill(0));\n    const focusIndex = ref(-1);\n    const contentRef = ref();\n    const inputRef = ref([]);\n    const current = computed(() => inputRef.value[focusIndex.value]);\n\n    function onInput() {\n      // The maxlength attribute doesn't work for the number type input, so the text type is used.\n      // The following logic simulates the behavior of a number input.\n      if (isValidNumber(current.value.value)) {\n        current.value.value = '';\n        return;\n      }\n\n      const array = model.value.slice();\n      const value = current.value.value;\n      array[focusIndex.value] = value;\n      let target = null;\n\n      if (focusIndex.value > model.value.length) {\n        target = model.value.length + 1;\n      } else if (focusIndex.value + 1 !== length.value) {\n        target = 'next';\n      }\n\n      model.value = array;\n      if (target) focusChild(contentRef.value, target);\n    }\n\n    function onKeydown(e) {\n      const array = model.value.slice();\n      const index = focusIndex.value;\n      let target = null;\n      if (!['ArrowLeft', 'ArrowRight', 'Backspace', 'Delete'].includes(e.key)) return;\n      e.preventDefault();\n\n      if (e.key === 'ArrowLeft') {\n        target = 'prev';\n      } else if (e.key === 'ArrowRight') {\n        target = 'next';\n      } else if (['Backspace', 'Delete'].includes(e.key)) {\n        array[focusIndex.value] = '';\n        model.value = array;\n\n        if (focusIndex.value > 0 && e.key === 'Backspace') {\n          target = 'prev';\n        } else {\n          requestAnimationFrame(() => {\n            inputRef.value[index]?.select();\n          });\n        }\n      }\n\n      requestAnimationFrame(() => {\n        if (target != null) {\n          focusChild(contentRef.value, target);\n        }\n      });\n    }\n\n    function onPaste(index, e) {\n      e.preventDefault();\n      e.stopPropagation();\n      const clipboardText = e?.clipboardData?.getData('Text').slice(0, length.value) ?? '';\n      if (isValidNumber(clipboardText)) return;\n      model.value = clipboardText.split('');\n      inputRef.value?.[index].blur();\n    }\n\n    function reset() {\n      model.value = [];\n    }\n\n    function onFocus(e, index) {\n      focus();\n      focusIndex.value = index;\n    }\n\n    function onBlur() {\n      blur();\n      focusIndex.value = -1;\n    }\n\n    function isValidNumber(value) {\n      return props.type === 'number' && /[^0-9]/g.test(value);\n    }\n\n    provideDefaults({\n      VField: {\n        color: computed(() => props.color),\n        bgColor: computed(() => props.color),\n        baseColor: computed(() => props.baseColor),\n        disabled: computed(() => props.disabled),\n        error: computed(() => props.error),\n        variant: computed(() => props.variant)\n      }\n    }, {\n      scoped: true\n    });\n    watch(model, val => {\n      if (val.length === length.value) emit('finish', val.join(''));\n    }, {\n      deep: true\n    });\n    watch(focusIndex, val => {\n      if (val < 0) return;\n      nextTick(() => {\n        inputRef.value[val]?.select();\n      });\n    });\n    useRender(() => {\n      const [rootAttrs, inputAttrs] = filterInputAttrs(attrs);\n      return _createVNode(\"div\", _mergeProps({\n        \"class\": ['v-otp-input', {\n          'v-otp-input--divided': !!props.divider\n        }, props.class],\n        \"style\": [props.style]\n      }, rootAttrs), [_createVNode(\"div\", {\n        \"ref\": contentRef,\n        \"class\": \"v-otp-input__content\",\n        \"style\": [dimensionStyles.value]\n      }, [fields.value.map((_, i) => _createVNode(_Fragment, null, [props.divider && i !== 0 && _createVNode(\"span\", {\n        \"class\": \"v-otp-input__divider\"\n      }, [props.divider]), _createVNode(VField, {\n        \"focused\": isFocused.value && props.focusAll || focusIndex.value === i,\n        \"key\": i\n      }, { ...slots,\n        loader: undefined,\n        default: () => {\n          return _createVNode(\"input\", {\n            \"ref\": val => inputRef.value[i] = val,\n            \"aria-label\": t(props.label, i + 1),\n            \"autofocus\": i === 0 && props.autofocus,\n            \"autocomplete\": \"one-time-code\",\n            \"class\": ['v-otp-input__field'],\n            \"disabled\": props.disabled,\n            \"inputmode\": props.type === 'number' ? 'numeric' : 'text',\n            \"min\": props.type === 'number' ? 0 : undefined,\n            \"maxlength\": i === 0 ? length.value : '1',\n            \"placeholder\": props.placeholder,\n            \"type\": props.type === 'number' ? 'text' : props.type,\n            \"value\": model.value[i],\n            \"onInput\": onInput,\n            \"onFocus\": e => onFocus(e, i),\n            \"onBlur\": onBlur,\n            \"onKeydown\": onKeydown,\n            \"onPaste\": event => onPaste(i, event)\n          }, null);\n        }\n      })])), _createVNode(\"input\", _mergeProps({\n        \"class\": \"v-otp-input-input\",\n        \"type\": \"hidden\"\n      }, inputAttrs, {\n        \"value\": model.value.join('')\n      }), null), _createVNode(VOverlay, {\n        \"contained\": true,\n        \"content-class\": \"v-otp-input__loader\",\n        \"model-value\": !!props.loading,\n        \"persistent\": true\n      }, {\n        default: () => [slots.loader?.() ?? _createVNode(VProgressCircular, {\n          \"color\": typeof props.loading === 'boolean' ? undefined : props.loading,\n          \"indeterminate\": true,\n          \"size\": \"24\",\n          \"width\": \"2\"\n        }, null)]\n      }), slots.default?.()])]);\n    });\n    return {\n      blur: () => {\n        inputRef.value?.some(input => input.blur());\n      },\n      focus: () => {\n        inputRef.value?.[0].focus();\n      },\n      reset,\n      isFocused\n    };\n  }\n\n});","map":{"version":3,"mappings":"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","names":["makeVFieldProps","VField","VOverlay","VProgressCircular","provideDefaults","makeDimensionProps","useDimension","makeFocusProps","useFocus","useLocale","useProxiedModel","computed","nextTick","ref","watch","filterInputAttrs","focusChild","genericComponent","pick","propsFactory","useRender","makeVOtpInputProps","autofocus","Boolean","divider","String","focusAll","label","type","default","length","Number","modelValue","undefined","placeholder","variant","VOtpInput","name","props","emits","finish","val","setup","_ref","attrs","emit","slots","dimensionStyles","isFocused","focus","blur","model","split","join","t","fields","Array","value","fill","focusIndex","contentRef","inputRef","current","onInput","isValidNumber","array","slice","target","onKeydown","e","index","includes","key","preventDefault","requestAnimationFrame","select","onPaste","stopPropagation","clipboardText","clipboardData","getData","reset","onFocus","onBlur","test","color","bgColor","baseColor","disabled","error","scoped","deep","rootAttrs","inputAttrs","class","style","map","_","i","_createVNode","loader","event","loading","some","input"],"sources":["../../../src/components/VOtpInput/VOtpInput.tsx"],"sourcesContent":["// Styles\nimport './VOtpInput.sass'\n\n// Components\nimport { makeVFieldProps, VField } from '@/components/VField/VField'\nimport { VOverlay } from '@/components/VOverlay/VOverlay'\nimport { VProgressCircular } from '@/components/VProgressCircular/VProgressCircular'\n\n// Composables\nimport { provideDefaults } from '@/composables/defaults'\nimport { makeDimensionProps, useDimension } from '@/composables/dimensions'\nimport { makeFocusProps, useFocus } from '@/composables/focus'\nimport { useLocale } from '@/composables/locale'\nimport { useProxiedModel } from '@/composables/proxiedModel'\n\n// Utilities\nimport { computed, nextTick, ref, watch } from 'vue'\nimport { filterInputAttrs, focusChild, genericComponent, pick, propsFactory, useRender } from '@/util'\n\n// Types\nimport type { PropType } from 'vue'\n\n// Types\nexport type VOtpInputSlots = {\n  default: never\n  loader: never\n}\n\nexport const makeVOtpInputProps = propsFactory({\n  autofocus: Boolean,\n  divider: String,\n  focusAll: Boolean,\n  label: {\n    type: String,\n    default: '$vuetify.input.otp',\n  },\n  length: {\n    type: [Number, String],\n    default: 6,\n  },\n  modelValue: {\n    type: [Number, String],\n    default: undefined,\n  },\n  placeholder: String,\n  type: {\n    type: String as PropType<'text' | 'password' | 'number'>,\n    default: 'number',\n  },\n\n  ...makeDimensionProps(),\n  ...makeFocusProps(),\n  ...pick(makeVFieldProps({\n    variant: 'outlined' as const,\n  }), [\n    'baseColor',\n    'bgColor',\n    'class',\n    'color',\n    'disabled',\n    'error',\n    'loading',\n    'rounded',\n    'style',\n    'theme',\n    'variant',\n  ]),\n}, 'VOtpInput')\n\nexport const VOtpInput = genericComponent<VOtpInputSlots>()({\n  name: 'VOtpInput',\n\n  props: makeVOtpInputProps(),\n\n  emits: {\n    finish: (val: string) => true,\n    'update:focused': (val: boolean) => true,\n    'update:modelValue': (val: string) => true,\n  },\n\n  setup (props, { attrs, emit, slots }) {\n    const { dimensionStyles } = useDimension(props)\n    const { isFocused, focus, blur } = useFocus(props)\n    const model = useProxiedModel(\n      props,\n      'modelValue',\n      '',\n      val => val == null ? [] : String(val).split(''),\n      val => val.join('')\n    )\n    const { t } = useLocale()\n\n    const length = computed(() => Number(props.length))\n    const fields = computed(() => Array(length.value).fill(0))\n    const focusIndex = ref(-1)\n    const contentRef = ref<HTMLElement>()\n    const inputRef = ref<HTMLInputElement[]>([])\n    const current = computed(() => inputRef.value[focusIndex.value])\n\n    function onInput () {\n      // The maxlength attribute doesn't work for the number type input, so the text type is used.\n      // The following logic simulates the behavior of a number input.\n      if (isValidNumber(current.value.value)) {\n        current.value.value = ''\n        return\n      }\n\n      const array = model.value.slice()\n      const value = current.value.value\n\n      array[focusIndex.value] = value\n\n      let target: any = null\n\n      if (focusIndex.value > model.value.length) {\n        target = model.value.length + 1\n      } else if (focusIndex.value + 1 !== length.value) {\n        target = 'next'\n      }\n\n      model.value = array\n\n      if (target) focusChild(contentRef.value!, target)\n    }\n\n    function onKeydown (e: KeyboardEvent) {\n      const array = model.value.slice()\n      const index = focusIndex.value\n      let target: 'next' | 'prev' | 'first' | 'last' | number | null = null\n\n      if (![\n        'ArrowLeft',\n        'ArrowRight',\n        'Backspace',\n        'Delete',\n      ].includes(e.key)) return\n\n      e.preventDefault()\n\n      if (e.key === 'ArrowLeft') {\n        target = 'prev'\n      } else if (e.key === 'ArrowRight') {\n        target = 'next'\n      } else if (['Backspace', 'Delete'].includes(e.key)) {\n        array[focusIndex.value] = ''\n\n        model.value = array\n\n        if (focusIndex.value > 0 && e.key === 'Backspace') {\n          target = 'prev'\n        } else {\n          requestAnimationFrame(() => {\n            inputRef.value[index]?.select()\n          })\n        }\n      }\n\n      requestAnimationFrame(() => {\n        if (target != null) {\n          focusChild(contentRef.value!, target)\n        }\n      })\n    }\n\n    function onPaste (index: number, e: ClipboardEvent) {\n      e.preventDefault()\n      e.stopPropagation()\n\n      const clipboardText = e?.clipboardData?.getData('Text').slice(0, length.value) ?? ''\n\n      if (isValidNumber(clipboardText)) return\n\n      model.value = clipboardText.split('')\n\n      inputRef.value?.[index].blur()\n    }\n\n    function reset () {\n      model.value = []\n    }\n\n    function onFocus (e: FocusEvent, index: number) {\n      focus()\n\n      focusIndex.value = index\n    }\n\n    function onBlur () {\n      blur()\n\n      focusIndex.value = -1\n    }\n\n    function isValidNumber (value: string) {\n      return props.type === 'number' && /[^0-9]/g.test(value)\n    }\n\n    provideDefaults({\n      VField: {\n        color: computed(() => props.color),\n        bgColor: computed(() => props.color),\n        baseColor: computed(() => props.baseColor),\n        disabled: computed(() => props.disabled),\n        error: computed(() => props.error),\n        variant: computed(() => props.variant),\n      },\n    }, { scoped: true })\n\n    watch(model, val => {\n      if (val.length === length.value) emit('finish', val.join(''))\n    }, { deep: true })\n\n    watch(focusIndex, val => {\n      if (val < 0) return\n\n      nextTick(() => {\n        inputRef.value[val]?.select()\n      })\n    })\n\n    useRender(() => {\n      const [rootAttrs, inputAttrs] = filterInputAttrs(attrs)\n\n      return (\n        <div\n          class={[\n            'v-otp-input',\n            {\n              'v-otp-input--divided': !!props.divider,\n            },\n            props.class,\n          ]}\n          style={[\n            props.style,\n          ]}\n          { ...rootAttrs }\n        >\n          <div\n            ref={ contentRef }\n            class=\"v-otp-input__content\"\n            style={[\n              dimensionStyles.value,\n            ]}\n          >\n            { fields.value.map((_, i) => (\n              <>\n                { props.divider && i !== 0 && (\n                  <span class=\"v-otp-input__divider\">{ props.divider }</span>\n                )}\n\n                <VField\n                  focused={ (isFocused.value && props.focusAll) || focusIndex.value === i }\n                  key={ i }\n                >\n                  {{\n                    ...slots,\n                    loader: undefined,\n                    default: () => {\n                      return (\n                        <input\n                          ref={ val => inputRef.value[i] = val as HTMLInputElement }\n                          aria-label={ t(props.label, i + 1) }\n                          autofocus={ i === 0 && props.autofocus }\n                          autocomplete=\"one-time-code\"\n                          class={[\n                            'v-otp-input__field',\n                          ]}\n                          disabled={ props.disabled }\n                          inputmode={ props.type === 'number' ? 'numeric' : 'text' }\n                          min={ props.type === 'number' ? 0 : undefined }\n                          maxlength={ i === 0 ? length.value : '1' }\n                          placeholder={ props.placeholder }\n                          type={ props.type === 'number' ? 'text' : props.type }\n                          value={ model.value[i] }\n                          onInput={ onInput }\n                          onFocus={ e => onFocus(e, i) }\n                          onBlur={ onBlur }\n                          onKeydown={ onKeydown }\n                          onPaste={ event => onPaste(i, event) }\n                        />\n                      )\n                    },\n                  }}\n                </VField>\n              </>\n            ))}\n\n            <input\n              class=\"v-otp-input-input\"\n              type=\"hidden\"\n              { ...inputAttrs }\n              value={ model.value.join('') }\n            />\n\n            <VOverlay\n              contained\n              content-class=\"v-otp-input__loader\"\n              model-value={ !!props.loading }\n              persistent\n            >\n              { slots.loader?.() ?? (\n                <VProgressCircular\n                  color={ typeof props.loading === 'boolean' ? undefined : props.loading }\n                  indeterminate\n                  size=\"24\"\n                  width=\"2\"\n                />\n              )}\n            </VOverlay>\n\n            { slots.default?.() }\n          </div>\n        </div>\n      )\n    })\n\n    return {\n      blur: () => {\n        inputRef.value?.some(input => input.blur())\n      },\n      focus: () => {\n        inputRef.value?.[0].focus()\n      },\n      reset,\n      isFocused,\n    }\n  },\n})\n\nexport type VOtpInput = InstanceType<typeof VOtpInput>\n"]},"metadata":{},"sourceType":"module"}