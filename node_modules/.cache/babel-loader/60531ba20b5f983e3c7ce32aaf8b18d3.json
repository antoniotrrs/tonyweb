{"ast":null,"code":"import _objectSpread from \"/Users/antoniotorres/Documents/tony/tonyweb/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport { createVNode as _createVNode, resolveDirective as _resolveDirective, withDirectives as _withDirectives } from \"vue\"; // Components\n\nimport { VExpansionPanelSymbol } from \"./shared.js\";\nimport { VDefaultsProvider } from \"../VDefaultsProvider/index.js\";\nimport { VIcon } from \"../VIcon/index.js\"; // Composables\n\nimport { useBackgroundColor } from \"../../composables/color.js\";\nimport { makeComponentProps } from \"../../composables/component.js\";\nimport { makeDimensionProps, useDimension } from \"../../composables/dimensions.js\";\nimport { IconValue } from \"../../composables/icons.js\"; // Directives\n\nimport { Ripple } from \"../../directives/ripple/index.js\"; // Utilities\n\nimport { computed, inject } from 'vue';\nimport { genericComponent, propsFactory, useRender } from \"../../util/index.js\"; // Types\n\nexport var makeVExpansionPanelTitleProps = propsFactory(_objectSpread(_objectSpread({\n  color: String,\n  expandIcon: {\n    type: IconValue,\n    default: '$expand'\n  },\n  collapseIcon: {\n    type: IconValue,\n    default: '$collapse'\n  },\n  hideActions: Boolean,\n  focusable: Boolean,\n  static: Boolean,\n  ripple: {\n    type: [Boolean, Object],\n    default: false\n  },\n  readonly: Boolean\n}, makeComponentProps()), makeDimensionProps()), 'VExpansionPanelTitle');\nexport var VExpansionPanelTitle = genericComponent()({\n  name: 'VExpansionPanelTitle',\n  directives: {\n    Ripple: Ripple\n  },\n  props: makeVExpansionPanelTitleProps(),\n  setup: function setup(props, _ref) {\n    var slots = _ref.slots;\n    var expansionPanel = inject(VExpansionPanelSymbol);\n    if (!expansionPanel) throw new Error('[Vuetify] v-expansion-panel-title needs to be placed inside v-expansion-panel');\n\n    var _useBackgroundColor = useBackgroundColor(props, 'color'),\n        backgroundColorClasses = _useBackgroundColor.backgroundColorClasses,\n        backgroundColorStyles = _useBackgroundColor.backgroundColorStyles;\n\n    var _useDimension = useDimension(props),\n        dimensionStyles = _useDimension.dimensionStyles;\n\n    var slotProps = computed(function () {\n      return {\n        collapseIcon: props.collapseIcon,\n        disabled: expansionPanel.disabled.value,\n        expanded: expansionPanel.isSelected.value,\n        expandIcon: props.expandIcon,\n        readonly: props.readonly\n      };\n    });\n    var icon = computed(function () {\n      return expansionPanel.isSelected.value ? props.collapseIcon : props.expandIcon;\n    });\n    useRender(function () {\n      var _slots$default;\n\n      return _withDirectives(_createVNode(\"button\", {\n        \"class\": ['v-expansion-panel-title', {\n          'v-expansion-panel-title--active': expansionPanel.isSelected.value,\n          'v-expansion-panel-title--focusable': props.focusable,\n          'v-expansion-panel-title--static': props.static\n        }, backgroundColorClasses.value, props.class],\n        \"style\": [backgroundColorStyles.value, dimensionStyles.value, props.style],\n        \"type\": \"button\",\n        \"tabindex\": expansionPanel.disabled.value ? -1 : undefined,\n        \"disabled\": expansionPanel.disabled.value,\n        \"aria-expanded\": expansionPanel.isSelected.value,\n        \"onClick\": !props.readonly ? expansionPanel.toggle : undefined\n      }, [_createVNode(\"span\", {\n        \"class\": \"v-expansion-panel-title__overlay\"\n      }, null), (_slots$default = slots.default) === null || _slots$default === void 0 ? void 0 : _slots$default.call(slots, slotProps.value), !props.hideActions && _createVNode(VDefaultsProvider, {\n        \"defaults\": {\n          VIcon: {\n            icon: icon.value\n          }\n        }\n      }, {\n        default: function _default() {\n          var _slots$actions, _slots$actions2;\n\n          return [_createVNode(\"span\", {\n            \"class\": \"v-expansion-panel-title__icon\"\n          }, [(_slots$actions = (_slots$actions2 = slots.actions) === null || _slots$actions2 === void 0 ? void 0 : _slots$actions2.call(slots, slotProps.value)) !== null && _slots$actions !== void 0 ? _slots$actions : _createVNode(VIcon, null, null)])];\n        }\n      })]), [[_resolveDirective(\"ripple\"), props.ripple]]);\n    });\n    return {};\n  }\n});","map":{"version":3,"mappings":"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","names":["VExpansionPanelSymbol","VDefaultsProvider","VIcon","useBackgroundColor","makeComponentProps","makeDimensionProps","useDimension","IconValue","Ripple","computed","inject","genericComponent","propsFactory","useRender","makeVExpansionPanelTitleProps","color","String","expandIcon","type","default","collapseIcon","hideActions","Boolean","focusable","static","ripple","Object","readonly","VExpansionPanelTitle","name","directives","props","setup","_ref","slots","expansionPanel","Error","backgroundColorClasses","backgroundColorStyles","dimensionStyles","slotProps","disabled","value","expanded","isSelected","icon","class","style","undefined","toggle","_createVNode","actions"],"sources":["../../../src/components/VExpansionPanel/VExpansionPanelTitle.tsx"],"sourcesContent":["// Components\nimport { VExpansionPanelSymbol } from './shared'\nimport { VDefaultsProvider } from '@/components/VDefaultsProvider'\nimport { VIcon } from '@/components/VIcon'\n\n// Composables\nimport { useBackgroundColor } from '@/composables/color'\nimport { makeComponentProps } from '@/composables/component'\nimport { makeDimensionProps, useDimension } from '@/composables/dimensions'\nimport { IconValue } from '@/composables/icons'\n\n// Directives\nimport { Ripple } from '@/directives/ripple'\n\n// Utilities\nimport { computed, inject } from 'vue'\nimport { genericComponent, propsFactory, useRender } from '@/util'\n\n// Types\nimport type { PropType } from 'vue'\nimport type { RippleDirectiveBinding } from '@/directives/ripple'\n\ninterface ExpansionPanelTitleSlot {\n  collapseIcon: IconValue\n  disabled: boolean | undefined\n  expanded: boolean\n  expandIcon: IconValue\n  readonly: boolean\n}\n\nexport type VExpansionPanelTitleSlots = {\n  default: ExpansionPanelTitleSlot\n  actions: ExpansionPanelTitleSlot\n}\n\nexport const makeVExpansionPanelTitleProps = propsFactory({\n  color: String,\n  expandIcon: {\n    type: IconValue,\n    default: '$expand',\n  },\n  collapseIcon: {\n    type: IconValue,\n    default: '$collapse',\n  },\n  hideActions: Boolean,\n  focusable: Boolean,\n  static: Boolean,\n  ripple: {\n    type: [Boolean, Object] as PropType<RippleDirectiveBinding['value']>,\n    default: false,\n  },\n  readonly: Boolean,\n\n  ...makeComponentProps(),\n  ...makeDimensionProps(),\n}, 'VExpansionPanelTitle')\n\nexport const VExpansionPanelTitle = genericComponent<VExpansionPanelTitleSlots>()({\n  name: 'VExpansionPanelTitle',\n\n  directives: { Ripple },\n\n  props: makeVExpansionPanelTitleProps(),\n\n  setup (props, { slots }) {\n    const expansionPanel = inject(VExpansionPanelSymbol)\n\n    if (!expansionPanel) throw new Error('[Vuetify] v-expansion-panel-title needs to be placed inside v-expansion-panel')\n\n    const { backgroundColorClasses, backgroundColorStyles } = useBackgroundColor(props, 'color')\n    const { dimensionStyles } = useDimension(props)\n\n    const slotProps = computed(() => ({\n      collapseIcon: props.collapseIcon,\n      disabled: expansionPanel.disabled.value,\n      expanded: expansionPanel.isSelected.value,\n      expandIcon: props.expandIcon,\n      readonly: props.readonly,\n    }))\n\n    const icon = computed(() => expansionPanel.isSelected.value ? props.collapseIcon : props.expandIcon)\n\n    useRender(() => (\n      <button\n        class={[\n          'v-expansion-panel-title',\n          {\n            'v-expansion-panel-title--active': expansionPanel.isSelected.value,\n            'v-expansion-panel-title--focusable': props.focusable,\n            'v-expansion-panel-title--static': props.static,\n          },\n          backgroundColorClasses.value,\n          props.class,\n        ]}\n        style={[\n          backgroundColorStyles.value,\n          dimensionStyles.value,\n          props.style,\n        ]}\n        type=\"button\"\n        tabindex={ expansionPanel.disabled.value ? -1 : undefined }\n        disabled={ expansionPanel.disabled.value }\n        aria-expanded={ expansionPanel.isSelected.value }\n        onClick={ !props.readonly ? expansionPanel.toggle : undefined }\n        v-ripple={ props.ripple }\n      >\n        <span class=\"v-expansion-panel-title__overlay\" />\n\n        { slots.default?.(slotProps.value) }\n\n        { !props.hideActions && (\n          <VDefaultsProvider\n            defaults={{\n              VIcon: {\n                icon: icon.value,\n              },\n            }}\n          >\n            <span class=\"v-expansion-panel-title__icon\">\n              { slots.actions?.(slotProps.value) ?? <VIcon /> }\n            </span>\n          </VDefaultsProvider>\n        )}\n      </button>\n    ))\n\n    return {}\n  },\n})\n\nexport type VExpansionPanelTitle = InstanceType<typeof VExpansionPanelTitle>\n"]},"metadata":{},"sourceType":"module"}