{"ast":null,"code":"import _toConsumableArray from \"/Users/antoniotorres/Documents/tony/tonyweb/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _objectSpread from \"/Users/antoniotorres/Documents/tony/tonyweb/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.array.find-index.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport { createVNode as _createVNode } from \"vue\"; // Components\n\nimport { VExpansionPanelSymbol } from \"./shared.js\";\nimport { makeVExpansionPanelTextProps, VExpansionPanelText } from \"./VExpansionPanelText.js\";\nimport { makeVExpansionPanelTitleProps, VExpansionPanelTitle } from \"./VExpansionPanelTitle.js\";\nimport { VDefaultsProvider } from \"../VDefaultsProvider/index.js\"; // Composables\n\nimport { useBackgroundColor } from \"../../composables/color.js\";\nimport { makeElevationProps, useElevation } from \"../../composables/elevation.js\";\nimport { makeGroupItemProps, useGroupItem } from \"../../composables/group.js\";\nimport { makeRoundedProps, useRounded } from \"../../composables/rounded.js\";\nimport { makeTagProps } from \"../../composables/tag.js\"; // Utilities\n\nimport { computed, provide } from 'vue';\nimport { genericComponent, propsFactory, useRender } from \"../../util/index.js\";\nexport var makeVExpansionPanelProps = propsFactory(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({\n  title: String,\n  text: String,\n  bgColor: String\n}, makeElevationProps()), makeGroupItemProps()), makeRoundedProps()), makeTagProps()), makeVExpansionPanelTitleProps()), makeVExpansionPanelTextProps()), 'VExpansionPanel');\nexport var VExpansionPanel = genericComponent()({\n  name: 'VExpansionPanel',\n  props: makeVExpansionPanelProps(),\n  emits: {\n    'group:selected': function groupSelected(val) {\n      return true;\n    }\n  },\n  setup: function setup(props, _ref) {\n    var slots = _ref.slots;\n    var groupItem = useGroupItem(props, VExpansionPanelSymbol);\n\n    var _useBackgroundColor = useBackgroundColor(props, 'bgColor'),\n        backgroundColorClasses = _useBackgroundColor.backgroundColorClasses,\n        backgroundColorStyles = _useBackgroundColor.backgroundColorStyles;\n\n    var _useElevation = useElevation(props),\n        elevationClasses = _useElevation.elevationClasses;\n\n    var _useRounded = useRounded(props),\n        roundedClasses = _useRounded.roundedClasses;\n\n    var isDisabled = computed(function () {\n      return (groupItem === null || groupItem === void 0 ? void 0 : groupItem.disabled.value) || props.disabled;\n    });\n    var selectedIndices = computed(function () {\n      return groupItem.group.items.value.reduce(function (arr, item, index) {\n        if (groupItem.group.selected.value.includes(item.id)) arr.push(index);\n        return arr;\n      }, []);\n    });\n    var isBeforeSelected = computed(function () {\n      var index = groupItem.group.items.value.findIndex(function (item) {\n        return item.id === groupItem.id;\n      });\n      return !groupItem.isSelected.value && selectedIndices.value.some(function (selectedIndex) {\n        return selectedIndex - index === 1;\n      });\n    });\n    var isAfterSelected = computed(function () {\n      var index = groupItem.group.items.value.findIndex(function (item) {\n        return item.id === groupItem.id;\n      });\n      return !groupItem.isSelected.value && selectedIndices.value.some(function (selectedIndex) {\n        return selectedIndex - index === -1;\n      });\n    });\n    provide(VExpansionPanelSymbol, groupItem);\n    useRender(function () {\n      var hasText = !!(slots.text || props.text);\n      var hasTitle = !!(slots.title || props.title);\n      var expansionPanelTitleProps = VExpansionPanelTitle.filterProps(props);\n      var expansionPanelTextProps = VExpansionPanelText.filterProps(props);\n      return _createVNode(props.tag, {\n        \"class\": ['v-expansion-panel', {\n          'v-expansion-panel--active': groupItem.isSelected.value,\n          'v-expansion-panel--before-active': isBeforeSelected.value,\n          'v-expansion-panel--after-active': isAfterSelected.value,\n          'v-expansion-panel--disabled': isDisabled.value\n        }, roundedClasses.value, backgroundColorClasses.value, props.class],\n        \"style\": [backgroundColorStyles.value, props.style]\n      }, {\n        default: function _default() {\n          return [_createVNode(\"div\", {\n            \"class\": ['v-expansion-panel__shadow'].concat(_toConsumableArray(elevationClasses.value))\n          }, null), _createVNode(VDefaultsProvider, {\n            \"defaults\": {\n              VExpansionPanelTitle: _objectSpread({}, expansionPanelTitleProps),\n              VExpansionPanelText: _objectSpread({}, expansionPanelTextProps)\n            }\n          }, {\n            default: function _default() {\n              var _slots$default;\n\n              return [hasTitle && _createVNode(VExpansionPanelTitle, {\n                \"key\": \"title\"\n              }, {\n                default: function _default() {\n                  return [slots.title ? slots.title() : props.title];\n                }\n              }), hasText && _createVNode(VExpansionPanelText, {\n                \"key\": \"text\"\n              }, {\n                default: function _default() {\n                  return [slots.text ? slots.text() : props.text];\n                }\n              }), (_slots$default = slots.default) === null || _slots$default === void 0 ? void 0 : _slots$default.call(slots)];\n            }\n          })];\n        }\n      });\n    });\n    return {\n      groupItem: groupItem\n    };\n  }\n});","map":{"version":3,"mappings":"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","names":["VExpansionPanelSymbol","makeVExpansionPanelTextProps","VExpansionPanelText","makeVExpansionPanelTitleProps","VExpansionPanelTitle","VDefaultsProvider","useBackgroundColor","makeElevationProps","useElevation","makeGroupItemProps","useGroupItem","makeRoundedProps","useRounded","makeTagProps","computed","provide","genericComponent","propsFactory","useRender","makeVExpansionPanelProps","title","String","text","bgColor","VExpansionPanel","name","props","emits","val","setup","_ref","slots","groupItem","backgroundColorClasses","backgroundColorStyles","elevationClasses","roundedClasses","isDisabled","disabled","value","selectedIndices","group","items","reduce","arr","item","index","selected","includes","id","push","isBeforeSelected","findIndex","isSelected","some","selectedIndex","isAfterSelected","hasText","hasTitle","expansionPanelTitleProps","filterProps","expansionPanelTextProps","class","style","default","_createVNode"],"sources":["../../../src/components/VExpansionPanel/VExpansionPanel.tsx"],"sourcesContent":["// Components\nimport { VExpansionPanelSymbol } from './shared'\nimport { makeVExpansionPanelTextProps, VExpansionPanelText } from './VExpansionPanelText'\nimport { makeVExpansionPanelTitleProps, VExpansionPanelTitle } from './VExpansionPanelTitle'\nimport { VDefaultsProvider } from '@/components/VDefaultsProvider'\n\n// Composables\nimport { useBackgroundColor } from '@/composables/color'\nimport { makeElevationProps, useElevation } from '@/composables/elevation'\nimport { makeGroupItemProps, useGroupItem } from '@/composables/group'\nimport { makeRoundedProps, useRounded } from '@/composables/rounded'\nimport { makeTagProps } from '@/composables/tag'\n\n// Utilities\nimport { computed, provide } from 'vue'\nimport { genericComponent, propsFactory, useRender } from '@/util'\n\nexport const makeVExpansionPanelProps = propsFactory({\n  title: String,\n  text: String,\n  bgColor: String,\n\n  ...makeElevationProps(),\n  ...makeGroupItemProps(),\n  ...makeRoundedProps(),\n  ...makeTagProps(),\n  ...makeVExpansionPanelTitleProps(),\n  ...makeVExpansionPanelTextProps(),\n}, 'VExpansionPanel')\n\nexport type VExpansionPanelSlots = {\n  default: never\n  title: never\n  text: never\n}\n\nexport const VExpansionPanel = genericComponent<VExpansionPanelSlots>()({\n  name: 'VExpansionPanel',\n\n  props: makeVExpansionPanelProps(),\n\n  emits: {\n    'group:selected': (val: { value: boolean }) => true,\n  },\n\n  setup (props, { slots }) {\n    const groupItem = useGroupItem(props, VExpansionPanelSymbol)\n    const { backgroundColorClasses, backgroundColorStyles } = useBackgroundColor(props, 'bgColor')\n    const { elevationClasses } = useElevation(props)\n    const { roundedClasses } = useRounded(props)\n    const isDisabled = computed(() => groupItem?.disabled.value || props.disabled)\n\n    const selectedIndices = computed(() => groupItem.group.items.value.reduce<number[]>((arr, item, index) => {\n      if (groupItem.group.selected.value.includes(item.id)) arr.push(index)\n      return arr\n    }, []))\n\n    const isBeforeSelected = computed(() => {\n      const index = groupItem.group.items.value.findIndex(item => item.id === groupItem.id)\n      return !groupItem.isSelected.value &&\n        selectedIndices.value.some(selectedIndex => selectedIndex - index === 1)\n    })\n\n    const isAfterSelected = computed(() => {\n      const index = groupItem.group.items.value.findIndex(item => item.id === groupItem.id)\n      return !groupItem.isSelected.value &&\n        selectedIndices.value.some(selectedIndex => selectedIndex - index === -1)\n    })\n\n    provide(VExpansionPanelSymbol, groupItem)\n\n    useRender(() => {\n      const hasText = !!(slots.text || props.text)\n      const hasTitle = !!(slots.title || props.title)\n\n      const expansionPanelTitleProps = VExpansionPanelTitle.filterProps(props)\n      const expansionPanelTextProps = VExpansionPanelText.filterProps(props)\n\n      return (\n        <props.tag\n          class={[\n            'v-expansion-panel',\n            {\n              'v-expansion-panel--active': groupItem.isSelected.value,\n              'v-expansion-panel--before-active': isBeforeSelected.value,\n              'v-expansion-panel--after-active': isAfterSelected.value,\n              'v-expansion-panel--disabled': isDisabled.value,\n            },\n            roundedClasses.value,\n            backgroundColorClasses.value,\n            props.class,\n          ]}\n          style={[\n            backgroundColorStyles.value,\n            props.style,\n          ]}\n        >\n          <div\n            class={[\n              'v-expansion-panel__shadow',\n              ...elevationClasses.value,\n            ]}\n          />\n\n          <VDefaultsProvider\n            defaults={{\n              VExpansionPanelTitle: {\n                ...expansionPanelTitleProps,\n              },\n              VExpansionPanelText: {\n                ...expansionPanelTextProps,\n              },\n            }}\n          >\n            { hasTitle && (\n              <VExpansionPanelTitle key=\"title\">\n                { slots.title ? slots.title() : props.title }\n              </VExpansionPanelTitle>\n            )}\n\n            { hasText && (\n              <VExpansionPanelText key=\"text\">\n                { slots.text ? slots.text() : props.text }\n              </VExpansionPanelText>\n            )}\n\n            { slots.default?.() }\n          </VDefaultsProvider>\n        </props.tag>\n      )\n    })\n\n    return {\n      groupItem,\n    }\n  },\n})\n\nexport type VExpansionPanel = InstanceType<typeof VExpansionPanel>\n"]},"metadata":{},"sourceType":"module"}