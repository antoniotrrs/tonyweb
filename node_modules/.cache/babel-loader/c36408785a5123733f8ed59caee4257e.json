{"ast":null,"code":"import { Fragment as _Fragment, createVNode as _createVNode, mergeProps as _mergeProps } from \"vue\"; // Styles\n\nimport \"./VSlider.css\"; // Components\n\nimport { VSliderThumb } from \"./VSliderThumb.js\";\nimport { VSliderTrack } from \"./VSliderTrack.js\";\nimport { makeVInputProps, VInput } from \"../VInput/VInput.js\";\nimport { VLabel } from \"../VLabel/index.js\"; // Composables\n\nimport { makeSliderProps, useSlider, useSteps } from \"./slider.js\";\nimport { makeFocusProps, useFocus } from \"../../composables/focus.js\";\nimport { useRtl } from \"../../composables/locale.js\";\nimport { useProxiedModel } from \"../../composables/proxiedModel.js\"; // Utilities\n\nimport { computed, ref } from 'vue';\nimport { genericComponent, propsFactory, useRender } from \"../../util/index.js\"; // Types\n\nexport const makeVSliderProps = propsFactory({ ...makeFocusProps(),\n  ...makeSliderProps(),\n  ...makeVInputProps(),\n  modelValue: {\n    type: [Number, String],\n    default: 0\n  }\n}, 'VSlider');\nexport const VSlider = genericComponent()({\n  name: 'VSlider',\n  props: makeVSliderProps(),\n  emits: {\n    'update:focused': value => true,\n    'update:modelValue': v => true,\n    start: value => true,\n    end: value => true\n  },\n\n  setup(props, _ref) {\n    let {\n      slots,\n      emit\n    } = _ref;\n    const thumbContainerRef = ref();\n    const {\n      rtlClasses\n    } = useRtl();\n    const steps = useSteps(props);\n    const model = useProxiedModel(props, 'modelValue', undefined, value => {\n      return steps.roundValue(value == null ? steps.min.value : value);\n    });\n    const {\n      min,\n      max,\n      mousePressed,\n      roundValue,\n      onSliderMousedown,\n      onSliderTouchstart,\n      trackContainerRef,\n      position,\n      hasLabels,\n      readonly\n    } = useSlider({\n      props,\n      steps,\n      onSliderStart: () => {\n        emit('start', model.value);\n      },\n      onSliderEnd: _ref2 => {\n        let {\n          value\n        } = _ref2;\n        const roundedValue = roundValue(value);\n        model.value = roundedValue;\n        emit('end', roundedValue);\n      },\n      onSliderMove: _ref3 => {\n        let {\n          value\n        } = _ref3;\n        return model.value = roundValue(value);\n      },\n      getActiveThumb: () => thumbContainerRef.value?.$el\n    });\n    const {\n      isFocused,\n      focus,\n      blur\n    } = useFocus(props);\n    const trackStop = computed(() => position(model.value));\n    useRender(() => {\n      const inputProps = VInput.filterProps(props);\n      const hasPrepend = !!(props.label || slots.label || slots.prepend);\n      return _createVNode(VInput, _mergeProps({\n        \"class\": ['v-slider', {\n          'v-slider--has-labels': !!slots['tick-label'] || hasLabels.value,\n          'v-slider--focused': isFocused.value,\n          'v-slider--pressed': mousePressed.value,\n          'v-slider--disabled': props.disabled\n        }, rtlClasses.value, props.class],\n        \"style\": props.style\n      }, inputProps, {\n        \"focused\": isFocused.value\n      }), { ...slots,\n        prepend: hasPrepend ? slotProps => _createVNode(_Fragment, null, [slots.label?.(slotProps) ?? (props.label ? _createVNode(VLabel, {\n          \"id\": slotProps.id.value,\n          \"class\": \"v-slider__label\",\n          \"text\": props.label\n        }, null) : undefined), slots.prepend?.(slotProps)]) : undefined,\n        default: _ref4 => {\n          let {\n            id,\n            messagesId\n          } = _ref4;\n          return _createVNode(\"div\", {\n            \"class\": \"v-slider__container\",\n            \"onMousedown\": !readonly.value ? onSliderMousedown : undefined,\n            \"onTouchstartPassive\": !readonly.value ? onSliderTouchstart : undefined\n          }, [_createVNode(\"input\", {\n            \"id\": id.value,\n            \"name\": props.name || id.value,\n            \"disabled\": !!props.disabled,\n            \"readonly\": !!props.readonly,\n            \"tabindex\": \"-1\",\n            \"value\": model.value\n          }, null), _createVNode(VSliderTrack, {\n            \"ref\": trackContainerRef,\n            \"start\": 0,\n            \"stop\": trackStop.value\n          }, {\n            'tick-label': slots['tick-label']\n          }), _createVNode(VSliderThumb, {\n            \"ref\": thumbContainerRef,\n            \"aria-describedby\": messagesId.value,\n            \"focused\": isFocused.value,\n            \"min\": min.value,\n            \"max\": max.value,\n            \"modelValue\": model.value,\n            \"onUpdate:modelValue\": v => model.value = v,\n            \"position\": trackStop.value,\n            \"elevation\": props.elevation,\n            \"onFocus\": focus,\n            \"onBlur\": blur,\n            \"ripple\": props.ripple,\n            \"name\": props.name\n          }, {\n            'thumb-label': slots['thumb-label']\n          })]);\n        }\n      });\n    });\n    return {};\n  }\n\n});","map":{"version":3,"mappings":"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","names":["VSliderThumb","VSliderTrack","makeVInputProps","VInput","VLabel","makeSliderProps","useSlider","useSteps","makeFocusProps","useFocus","useRtl","useProxiedModel","computed","ref","genericComponent","propsFactory","useRender","makeVSliderProps","modelValue","type","Number","String","default","VSlider","name","props","emits","value","v","start","end","setup","_ref","slots","emit","thumbContainerRef","rtlClasses","steps","model","undefined","roundValue","min","max","mousePressed","onSliderMousedown","onSliderTouchstart","trackContainerRef","position","hasLabels","readonly","onSliderStart","onSliderEnd","_ref2","roundedValue","onSliderMove","_ref3","getActiveThumb","$el","isFocused","focus","blur","trackStop","inputProps","filterProps","hasPrepend","label","prepend","disabled","class","style","slotProps","_createVNode","id","_ref4","messagesId","elevation","ripple"],"sources":["../../../src/components/VSlider/VSlider.tsx"],"sourcesContent":["// Styles\nimport './VSlider.sass'\n\n// Components\nimport { VSliderThumb } from './VSliderThumb'\nimport { VSliderTrack } from './VSliderTrack'\nimport { makeVInputProps, VInput } from '@/components/VInput/VInput'\nimport { VLabel } from '@/components/VLabel'\n\n// Composables\nimport { makeSliderProps, useSlider, useSteps } from './slider'\nimport { makeFocusProps, useFocus } from '@/composables/focus'\nimport { useRtl } from '@/composables/locale'\nimport { useProxiedModel } from '@/composables/proxiedModel'\n\n// Utilities\nimport { computed, ref } from 'vue'\nimport { genericComponent, propsFactory, useRender } from '@/util'\n\n// Types\nimport type { VSliderThumbSlots } from './VSliderThumb'\nimport type { VSliderTrackSlots } from './VSliderTrack'\nimport type { VInputSlot, VInputSlots } from '@/components/VInput/VInput'\n\nexport type VSliderSlots = VInputSlots & VSliderThumbSlots & VSliderTrackSlots & {\n  label: VInputSlot\n}\n\nexport const makeVSliderProps = propsFactory({\n  ...makeFocusProps(),\n  ...makeSliderProps(),\n  ...makeVInputProps(),\n\n  modelValue: {\n    type: [Number, String],\n    default: 0,\n  },\n}, 'VSlider')\n\nexport const VSlider = genericComponent<VSliderSlots>()({\n  name: 'VSlider',\n\n  props: makeVSliderProps(),\n\n  emits: {\n    'update:focused': (value: boolean) => true,\n    'update:modelValue': (v: number) => true,\n    start: (value: number) => true,\n    end: (value: number) => true,\n  },\n\n  setup (props, { slots, emit }) {\n    const thumbContainerRef = ref()\n    const { rtlClasses } = useRtl()\n\n    const steps = useSteps(props)\n\n    const model = useProxiedModel(\n      props,\n      'modelValue',\n      undefined,\n      value => {\n        return steps.roundValue(value == null ? steps.min.value : value)\n      },\n    )\n\n    const {\n      min,\n      max,\n      mousePressed,\n      roundValue,\n      onSliderMousedown,\n      onSliderTouchstart,\n      trackContainerRef,\n      position,\n      hasLabels,\n      readonly,\n    } = useSlider({\n      props,\n      steps,\n      onSliderStart: () => {\n        emit('start', model.value)\n      },\n      onSliderEnd: ({ value }) => {\n        const roundedValue = roundValue(value)\n        model.value = roundedValue\n        emit('end', roundedValue)\n      },\n      onSliderMove: ({ value }) => model.value = roundValue(value),\n      getActiveThumb: () => thumbContainerRef.value?.$el,\n    })\n\n    const { isFocused, focus, blur } = useFocus(props)\n    const trackStop = computed(() => position(model.value))\n\n    useRender(() => {\n      const inputProps = VInput.filterProps(props)\n      const hasPrepend = !!(props.label || slots.label || slots.prepend)\n\n      return (\n        <VInput\n          class={[\n            'v-slider',\n            {\n              'v-slider--has-labels': !!slots['tick-label'] || hasLabels.value,\n              'v-slider--focused': isFocused.value,\n              'v-slider--pressed': mousePressed.value,\n              'v-slider--disabled': props.disabled,\n            },\n            rtlClasses.value,\n            props.class,\n          ]}\n          style={ props.style }\n          { ...inputProps }\n          focused={ isFocused.value }\n        >\n          {{\n            ...slots,\n            prepend: hasPrepend ? slotProps => (\n              <>\n                { slots.label?.(slotProps) ?? (\n                  props.label\n                    ? (\n                      <VLabel\n                        id={ slotProps.id.value }\n                        class=\"v-slider__label\"\n                        text={ props.label }\n                      />\n                    ) : undefined\n                )}\n\n                { slots.prepend?.(slotProps) }\n              </>\n            ) : undefined,\n            default: ({ id, messagesId }) => (\n              <div\n                class=\"v-slider__container\"\n                onMousedown={ !readonly.value ? onSliderMousedown : undefined }\n                onTouchstartPassive={ !readonly.value ? onSliderTouchstart : undefined }\n              >\n                <input\n                  id={ id.value }\n                  name={ props.name || id.value }\n                  disabled={ !!props.disabled }\n                  readonly={ !!props.readonly }\n                  tabindex=\"-1\"\n                  value={ model.value }\n                />\n\n                <VSliderTrack\n                  ref={ trackContainerRef }\n                  start={ 0 }\n                  stop={ trackStop.value }\n                >\n                  {{ 'tick-label': slots['tick-label'] }}\n                </VSliderTrack>\n\n                <VSliderThumb\n                  ref={ thumbContainerRef }\n                  aria-describedby={ messagesId.value }\n                  focused={ isFocused.value }\n                  min={ min.value }\n                  max={ max.value }\n                  modelValue={ model.value }\n                  onUpdate:modelValue={ v => (model.value = v) }\n                  position={ trackStop.value }\n                  elevation={ props.elevation }\n                  onFocus={ focus }\n                  onBlur={ blur }\n                  ripple={ props.ripple }\n                  name={ props.name }\n                >\n                  {{ 'thumb-label': slots['thumb-label'] }}\n                </VSliderThumb>\n              </div>\n            ),\n          }}\n        </VInput>\n      )\n    })\n\n    return {}\n  },\n})\n\nexport type VSlider = InstanceType<typeof VSlider>\n"]},"metadata":{},"sourceType":"module"}