{"ast":null,"code":"import _slicedToArray from \"/Users/antoniotorres/Documents/tony/tonyweb/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectSpread from \"/Users/antoniotorres/Documents/tony/tonyweb/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { mergeProps as _mergeProps, createVNode as _createVNode } from \"vue\"; // Styles\n\nimport \"./VCheckbox.css\"; // Components\n\nimport { makeVCheckboxBtnProps, VCheckboxBtn } from \"./VCheckboxBtn.js\";\nimport { makeVInputProps, VInput } from \"../VInput/VInput.js\"; // Composables\n\nimport { useFocus } from \"../../composables/focus.js\";\nimport { useProxiedModel } from \"../../composables/proxiedModel.js\"; // Utilities\n\nimport { computed, useId } from 'vue';\nimport { filterInputAttrs, genericComponent, omit, propsFactory, useRender } from \"../../util/index.js\"; // Types\n\nexport var makeVCheckboxProps = propsFactory(_objectSpread(_objectSpread({}, makeVInputProps()), omit(makeVCheckboxBtnProps(), ['inline'])), 'VCheckbox');\nexport var VCheckbox = genericComponent()({\n  name: 'VCheckbox',\n  inheritAttrs: false,\n  props: makeVCheckboxProps(),\n  emits: {\n    'update:modelValue': function updateModelValue(value) {\n      return true;\n    },\n    'update:focused': function updateFocused(focused) {\n      return true;\n    }\n  },\n  setup: function setup(props, _ref) {\n    var attrs = _ref.attrs,\n        slots = _ref.slots;\n    var model = useProxiedModel(props, 'modelValue');\n\n    var _useFocus = useFocus(props),\n        isFocused = _useFocus.isFocused,\n        focus = _useFocus.focus,\n        blur = _useFocus.blur;\n\n    var uid = useId();\n    var id = computed(function () {\n      return props.id || \"checkbox-\".concat(uid);\n    });\n    useRender(function () {\n      var _filterInputAttrs = filterInputAttrs(attrs),\n          _filterInputAttrs2 = _slicedToArray(_filterInputAttrs, 2),\n          rootAttrs = _filterInputAttrs2[0],\n          controlAttrs = _filterInputAttrs2[1];\n\n      var inputProps = VInput.filterProps(props);\n      var checkboxProps = VCheckboxBtn.filterProps(props);\n      return _createVNode(VInput, _mergeProps({\n        \"class\": ['v-checkbox', props.class]\n      }, rootAttrs, inputProps, {\n        \"modelValue\": model.value,\n        \"onUpdate:modelValue\": function onUpdateModelValue($event) {\n          return model.value = $event;\n        },\n        \"id\": id.value,\n        \"focused\": isFocused.value,\n        \"style\": props.style\n      }), _objectSpread(_objectSpread({}, slots), {}, {\n        default: function _default(_ref2) {\n          var id = _ref2.id,\n              messagesId = _ref2.messagesId,\n              isDisabled = _ref2.isDisabled,\n              isReadonly = _ref2.isReadonly,\n              isValid = _ref2.isValid;\n          return _createVNode(VCheckboxBtn, _mergeProps(checkboxProps, {\n            \"id\": id.value,\n            \"aria-describedby\": messagesId.value,\n            \"disabled\": isDisabled.value,\n            \"readonly\": isReadonly.value\n          }, controlAttrs, {\n            \"error\": isValid.value === false,\n            \"modelValue\": model.value,\n            \"onUpdate:modelValue\": function onUpdateModelValue($event) {\n              return model.value = $event;\n            },\n            \"onFocus\": focus,\n            \"onBlur\": blur\n          }), slots);\n        }\n      }));\n    });\n    return {};\n  }\n});","map":{"version":3,"mappings":"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","names":["makeVCheckboxBtnProps","VCheckboxBtn","makeVInputProps","VInput","useFocus","useProxiedModel","computed","useId","filterInputAttrs","genericComponent","omit","propsFactory","useRender","makeVCheckboxProps","VCheckbox","name","inheritAttrs","props","emits","value","focused","setup","_ref","attrs","slots","model","isFocused","focus","blur","uid","id","rootAttrs","controlAttrs","inputProps","filterProps","checkboxProps","class","$event","style","default","_ref2","messagesId","isDisabled","isReadonly","isValid"],"sources":["../../../src/components/VCheckbox/VCheckbox.tsx"],"sourcesContent":["// Styles\nimport './VCheckbox.sass'\n\n// Components\nimport { makeVCheckboxBtnProps, VCheckboxBtn } from './VCheckboxBtn'\nimport { makeVInputProps, VInput } from '@/components/VInput/VInput'\n\n// Composables\nimport { useFocus } from '@/composables/focus'\nimport { useProxiedModel } from '@/composables/proxiedModel'\n\n// Utilities\nimport { computed, useId } from 'vue'\nimport { filterInputAttrs, genericComponent, omit, propsFactory, useRender } from '@/util'\n\n// Types\nimport type { VSelectionControlSlots } from '../VSelectionControl/VSelectionControl'\nimport type { VInputSlots } from '@/components/VInput/VInput'\nimport type { GenericProps } from '@/util'\n\nexport type VCheckboxSlots = Omit<VInputSlots, 'default'> & VSelectionControlSlots\n\nexport const makeVCheckboxProps = propsFactory({\n  ...makeVInputProps(),\n  ...omit(makeVCheckboxBtnProps(), ['inline']),\n}, 'VCheckbox')\n\nexport const VCheckbox = genericComponent<new <T>(\n  props: {\n    modelValue?: T | null\n    'onUpdate:modelValue'?: (value: T | null) => void\n  },\n  slots: VCheckboxSlots,\n) => GenericProps<typeof props, typeof slots>>()({\n  name: 'VCheckbox',\n\n  inheritAttrs: false,\n\n  props: makeVCheckboxProps(),\n\n  emits: {\n    'update:modelValue': (value: any) => true,\n    'update:focused': (focused: boolean) => true,\n  },\n\n  setup (props, { attrs, slots }) {\n    const model = useProxiedModel(props, 'modelValue')\n    const { isFocused, focus, blur } = useFocus(props)\n\n    const uid = useId()\n    const id = computed(() => props.id || `checkbox-${uid}`)\n\n    useRender(() => {\n      const [rootAttrs, controlAttrs] = filterInputAttrs(attrs)\n      const inputProps = VInput.filterProps(props)\n      const checkboxProps = VCheckboxBtn.filterProps(props)\n\n      return (\n        <VInput\n          class={[\n            'v-checkbox',\n            props.class,\n          ]}\n          { ...rootAttrs }\n          { ...inputProps }\n          v-model={ model.value }\n          id={ id.value }\n          focused={ isFocused.value }\n          style={ props.style }\n        >\n          {{\n            ...slots,\n            default: ({\n              id,\n              messagesId,\n              isDisabled,\n              isReadonly,\n              isValid,\n            }) => (\n              <VCheckboxBtn\n                { ...checkboxProps }\n                id={ id.value }\n                aria-describedby={ messagesId.value }\n                disabled={ isDisabled.value }\n                readonly={ isReadonly.value }\n                { ...controlAttrs }\n                error={ isValid.value === false }\n                v-model={ model.value }\n                onFocus={ focus }\n                onBlur={ blur }\n                v-slots={ slots }\n              />\n            ),\n          }}\n        </VInput>\n      )\n    })\n\n    return {}\n  },\n})\n\nexport type VCheckbox = InstanceType<typeof VCheckbox>\n"]},"metadata":{},"sourceType":"module"}