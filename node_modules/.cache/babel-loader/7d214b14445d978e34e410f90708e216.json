{"ast":null,"code":"import \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.array.find-index.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\n// Composables\nimport { useProxiedModel } from \"./proxiedModel.js\"; // Utilities\n\nimport { computed, inject, onBeforeUnmount, onMounted, onUpdated, provide, reactive, toRef, unref, useId, watch } from 'vue';\nimport { consoleWarn, deepEqual, findChildrenWithProvide, getCurrentInstance, propsFactory, wrapInArray } from \"../util/index.js\"; // Types\n\nexport var makeGroupProps = propsFactory({\n  modelValue: {\n    type: null,\n    default: undefined\n  },\n  multiple: Boolean,\n  mandatory: [Boolean, String],\n  max: Number,\n  selectedClass: String,\n  disabled: Boolean\n}, 'group');\nexport var makeGroupItemProps = propsFactory({\n  value: null,\n  disabled: Boolean,\n  selectedClass: String\n}, 'group-item'); // Composables\n\nexport function useGroupItem(props, injectKey) {\n  var required = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  var vm = getCurrentInstance('useGroupItem');\n\n  if (!vm) {\n    throw new Error('[Vuetify] useGroupItem composable must be used inside a component setup function');\n  }\n\n  var id = useId();\n  provide(Symbol.for(\"\".concat(injectKey.description, \":id\")), id);\n  var group = inject(injectKey, null);\n\n  if (!group) {\n    if (!required) return group;\n    throw new Error(\"[Vuetify] Could not find useGroup injection with symbol \".concat(injectKey.description));\n  }\n\n  var value = toRef(props, 'value');\n  var disabled = computed(function () {\n    return !!(group.disabled.value || props.disabled);\n  });\n  group.register({\n    id: id,\n    value: value,\n    disabled: disabled\n  }, vm);\n  onBeforeUnmount(function () {\n    group.unregister(id);\n  });\n  var isSelected = computed(function () {\n    return group.isSelected(id);\n  });\n  var isFirst = computed(function () {\n    return group.items.value[0].id === id;\n  });\n  var isLast = computed(function () {\n    return group.items.value[group.items.value.length - 1].id === id;\n  });\n  var selectedClass = computed(function () {\n    return isSelected.value && [group.selectedClass.value, props.selectedClass];\n  });\n  watch(isSelected, function (value) {\n    vm.emit('group:selected', {\n      value: value\n    });\n  }, {\n    flush: 'sync'\n  });\n  return {\n    id: id,\n    isSelected: isSelected,\n    isFirst: isFirst,\n    isLast: isLast,\n    toggle: function toggle() {\n      return group.select(id, !isSelected.value);\n    },\n    select: function select(value) {\n      return group.select(id, value);\n    },\n    selectedClass: selectedClass,\n    value: value,\n    disabled: disabled,\n    group: group\n  };\n}\nexport function useGroup(props, injectKey) {\n  var isUnmounted = false;\n  var items = reactive([]);\n  var selected = useProxiedModel(props, 'modelValue', [], function (v) {\n    if (v == null) return [];\n    return getIds(items, wrapInArray(v));\n  }, function (v) {\n    var arr = getValues(items, v);\n    return props.multiple ? arr : arr[0];\n  });\n  var groupVm = getCurrentInstance('useGroup');\n\n  function register(item, vm) {\n    // Is there a better way to fix this typing?\n    var unwrapped = item;\n    var key = Symbol.for(\"\".concat(injectKey.description, \":id\"));\n    var children = findChildrenWithProvide(key, groupVm === null || groupVm === void 0 ? void 0 : groupVm.vnode);\n    var index = children.indexOf(vm);\n\n    if (unref(unwrapped.value) == null) {\n      unwrapped.value = index;\n      unwrapped.useIndexAsValue = true;\n    }\n\n    if (index > -1) {\n      items.splice(index, 0, unwrapped);\n    } else {\n      items.push(unwrapped);\n    }\n  }\n\n  function unregister(id) {\n    if (isUnmounted) return; // TODO: re-evaluate this line's importance in the future\n    // should we only modify the model if mandatory is set.\n    // selected.value = selected.value.filter(v => v !== id)\n\n    forceMandatoryValue();\n    var index = items.findIndex(function (item) {\n      return item.id === id;\n    });\n    items.splice(index, 1);\n  } // If mandatory and nothing is selected, then select first non-disabled item\n\n\n  function forceMandatoryValue() {\n    var item = items.find(function (item) {\n      return !item.disabled;\n    });\n\n    if (item && props.mandatory === 'force' && !selected.value.length) {\n      selected.value = [item.id];\n    }\n  }\n\n  onMounted(function () {\n    forceMandatoryValue();\n  });\n  onBeforeUnmount(function () {\n    isUnmounted = true;\n  });\n  onUpdated(function () {\n    // #19655 update the items that use the index as the value.\n    for (var i = 0; i < items.length; i++) {\n      if (items[i].useIndexAsValue) {\n        items[i].value = i;\n      }\n    }\n  });\n\n  function select(id, value) {\n    var item = items.find(function (item) {\n      return item.id === id;\n    });\n    if (value && item !== null && item !== void 0 && item.disabled) return;\n\n    if (props.multiple) {\n      var _value;\n\n      var internalValue = selected.value.slice();\n      var index = internalValue.findIndex(function (v) {\n        return v === id;\n      });\n      var isSelected = ~index;\n      value = (_value = value) !== null && _value !== void 0 ? _value : !isSelected; // We can't remove value if group is\n      // mandatory, value already exists,\n      // and it is the only value\n\n      if (isSelected && props.mandatory && internalValue.length <= 1) return; // We can't add value if it would\n      // cause max limit to be exceeded\n\n      if (!isSelected && props.max != null && internalValue.length + 1 > props.max) return;\n      if (index < 0 && value) internalValue.push(id);else if (index >= 0 && !value) internalValue.splice(index, 1);\n      selected.value = internalValue;\n    } else {\n      var _value2;\n\n      var _isSelected = selected.value.includes(id);\n\n      if (props.mandatory && _isSelected) return;\n      selected.value = ((_value2 = value) !== null && _value2 !== void 0 ? _value2 : !_isSelected) ? [id] : [];\n    }\n  }\n\n  function step(offset) {\n    // getting an offset from selected value obviously won't work with multiple values\n    if (props.multiple) consoleWarn('This method is not supported when using \"multiple\" prop');\n\n    if (!selected.value.length) {\n      var item = items.find(function (item) {\n        return !item.disabled;\n      });\n      item && (selected.value = [item.id]);\n    } else {\n      var currentId = selected.value[0];\n      var currentIndex = items.findIndex(function (i) {\n        return i.id === currentId;\n      });\n      var newIndex = (currentIndex + offset) % items.length;\n      var newItem = items[newIndex];\n\n      while (newItem.disabled && newIndex !== currentIndex) {\n        newIndex = (newIndex + offset) % items.length;\n        newItem = items[newIndex];\n      }\n\n      if (newItem.disabled) return;\n      selected.value = [items[newIndex].id];\n    }\n  }\n\n  var state = {\n    register: register,\n    unregister: unregister,\n    selected: selected,\n    select: select,\n    disabled: toRef(props, 'disabled'),\n    prev: function prev() {\n      return step(items.length - 1);\n    },\n    next: function next() {\n      return step(1);\n    },\n    isSelected: function isSelected(id) {\n      return selected.value.includes(id);\n    },\n    selectedClass: computed(function () {\n      return props.selectedClass;\n    }),\n    items: computed(function () {\n      return items;\n    }),\n    getItemIndex: function getItemIndex(value) {\n      return _getItemIndex(items, value);\n    }\n  };\n  provide(injectKey, state);\n  return state;\n}\n\nfunction _getItemIndex(items, value) {\n  var ids = getIds(items, [value]);\n  if (!ids.length) return -1;\n  return items.findIndex(function (item) {\n    return item.id === ids[0];\n  });\n}\n\nfunction getIds(items, modelValue) {\n  var ids = [];\n  modelValue.forEach(function (value) {\n    var item = items.find(function (item) {\n      return deepEqual(value, item.value);\n    });\n    var itemByIndex = items[value];\n\n    if ((item === null || item === void 0 ? void 0 : item.value) != null) {\n      ids.push(item.id);\n    } else if (itemByIndex != null) {\n      ids.push(itemByIndex.id);\n    }\n  });\n  return ids;\n}\n\nfunction getValues(items, ids) {\n  var values = [];\n  ids.forEach(function (id) {\n    var itemIndex = items.findIndex(function (item) {\n      return item.id === id;\n    });\n\n    if (~itemIndex) {\n      var item = items[itemIndex];\n      values.push(item.value != null ? item.value : itemIndex);\n    }\n  });\n  return values;\n}","map":{"version":3,"mappings":"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","names":["useProxiedModel","computed","inject","onBeforeUnmount","onMounted","onUpdated","provide","reactive","toRef","unref","useId","watch","consoleWarn","deepEqual","findChildrenWithProvide","getCurrentInstance","propsFactory","wrapInArray","makeGroupProps","modelValue","type","default","undefined","multiple","Boolean","mandatory","String","max","Number","selectedClass","disabled","makeGroupItemProps","value","useGroupItem","props","injectKey","required","vm","Error","id","Symbol","for","description","group","register","unregister","isSelected","isFirst","items","isLast","length","emit","flush","toggle","select","useGroup","isUnmounted","selected","v","getIds","arr","getValues","groupVm","item","unwrapped","key","children","vnode","index","indexOf","useIndexAsValue","splice","push","forceMandatoryValue","findIndex","find","i","internalValue","slice","includes","step","offset","currentId","currentIndex","newIndex","newItem","state","prev","next","getItemIndex","ids","forEach","itemByIndex","values","itemIndex"],"sources":["../../src/composables/group.ts"],"sourcesContent":["// Composables\nimport { useProxiedModel } from './proxiedModel'\n\n// Utilities\nimport { computed, inject, onBeforeUnmount, onMounted, onUpdated, provide, reactive, toRef, unref, useId, watch } from 'vue'\nimport { consoleWarn, deepEqual, findChildrenWithProvide, getCurrentInstance, propsFactory, wrapInArray } from '@/util'\n\n// Types\nimport type { ComponentInternalInstance, ComputedRef, ExtractPropTypes, InjectionKey, PropType, Ref, UnwrapRef } from 'vue'\nimport type { EventProp } from '@/util'\n\nexport interface GroupItem {\n  id: string\n  value: Ref<unknown>\n  disabled: Ref<boolean | undefined>\n  useIndexAsValue?: boolean\n}\n\nexport interface GroupProps {\n  disabled: boolean\n  modelValue: unknown\n  multiple?: boolean\n  mandatory?: boolean | 'force' | undefined\n  max?: number | undefined\n  selectedClass: string | undefined\n  'onUpdate:modelValue': EventProp<[unknown]> | undefined\n}\n\nexport interface GroupProvide {\n  register: (item: GroupItem, cmp: ComponentInternalInstance) => void\n  unregister: (id: string) => void\n  select: (id: string, value: boolean) => void\n  selected: Ref<Readonly<string[]>>\n  isSelected: (id: string) => boolean\n  prev: () => void\n  next: () => void\n  selectedClass: Ref<string | undefined>\n  items: ComputedRef<{\n    id: string\n    value: unknown\n    disabled: boolean | undefined\n  }[]>\n  disabled: Ref<boolean | undefined>\n  getItemIndex: (value: unknown) => number\n}\n\nexport interface GroupItemProvide {\n  id: string\n  isSelected: Ref<boolean>\n  isFirst: Ref<boolean>\n  isLast: Ref<boolean>\n  toggle: () => void\n  select: (value: boolean) => void\n  selectedClass: Ref<(string | undefined)[] | false>\n  value: Ref<unknown>\n  disabled: Ref<boolean | undefined>\n  group: GroupProvide\n}\n\nexport const makeGroupProps = propsFactory({\n  modelValue: {\n    type: null,\n    default: undefined,\n  },\n  multiple: Boolean,\n  mandatory: [Boolean, String] as PropType<boolean | 'force'>,\n  max: Number,\n  selectedClass: String,\n  disabled: Boolean,\n}, 'group')\n\nexport const makeGroupItemProps = propsFactory({\n  value: null,\n  disabled: Boolean,\n  selectedClass: String,\n}, 'group-item')\n\nexport interface GroupItemProps extends ExtractPropTypes<ReturnType<typeof makeGroupItemProps>> {\n  'onGroup:selected': EventProp<[{ value: boolean }]> | undefined\n}\n\n// Composables\nexport function useGroupItem (\n  props: GroupItemProps,\n  injectKey: InjectionKey<GroupProvide>,\n  required?: true,\n): GroupItemProvide\nexport function useGroupItem (\n  props: GroupItemProps,\n  injectKey: InjectionKey<GroupProvide>,\n  required: false,\n): GroupItemProvide | null\nexport function useGroupItem (\n  props: GroupItemProps,\n  injectKey: InjectionKey<GroupProvide>,\n  required = true,\n): GroupItemProvide | null {\n  const vm = getCurrentInstance('useGroupItem')\n\n  if (!vm) {\n    throw new Error(\n      '[Vuetify] useGroupItem composable must be used inside a component setup function'\n    )\n  }\n\n  const id = useId()\n\n  provide(Symbol.for(`${injectKey.description}:id`), id)\n\n  const group = inject(injectKey, null)\n\n  if (!group) {\n    if (!required) return group\n\n    throw new Error(`[Vuetify] Could not find useGroup injection with symbol ${injectKey.description}`)\n  }\n\n  const value = toRef(props, 'value')\n  const disabled = computed(() => !!(group.disabled.value || props.disabled))\n\n  group.register({\n    id,\n    value,\n    disabled,\n  }, vm)\n\n  onBeforeUnmount(() => {\n    group.unregister(id)\n  })\n\n  const isSelected = computed(() => {\n    return group.isSelected(id)\n  })\n  const isFirst = computed(() => {\n    return group.items.value[0].id === id\n  })\n  const isLast = computed(() => {\n    return group.items.value[group.items.value.length - 1].id === id\n  })\n\n  const selectedClass = computed(() => isSelected.value && [group.selectedClass.value, props.selectedClass])\n\n  watch(isSelected, value => {\n    vm.emit('group:selected', { value })\n  }, { flush: 'sync' })\n\n  return {\n    id,\n    isSelected,\n    isFirst,\n    isLast,\n    toggle: () => group.select(id, !isSelected.value),\n    select: (value: boolean) => group.select(id, value),\n    selectedClass,\n    value,\n    disabled,\n    group,\n  }\n}\n\nexport function useGroup (\n  props: GroupProps,\n  injectKey: InjectionKey<GroupProvide>\n) {\n  let isUnmounted = false\n  const items = reactive<GroupItem[]>([])\n  const selected = useProxiedModel(\n    props,\n    'modelValue',\n    [],\n    v => {\n      if (v == null) return []\n\n      return getIds(items, wrapInArray(v))\n    },\n    v => {\n      const arr = getValues(items, v)\n\n      return props.multiple ? arr : arr[0]\n    }\n  )\n\n  const groupVm = getCurrentInstance('useGroup')\n\n  function register (item: GroupItem, vm: ComponentInternalInstance) {\n    // Is there a better way to fix this typing?\n    const unwrapped = item as unknown as UnwrapRef<GroupItem>\n\n    const key = Symbol.for(`${injectKey.description}:id`)\n    const children = findChildrenWithProvide(key, groupVm?.vnode)\n    const index = children.indexOf(vm)\n\n    if (unref(unwrapped.value) == null) {\n      unwrapped.value = index\n      unwrapped.useIndexAsValue = true\n    }\n\n    if (index > -1) {\n      items.splice(index, 0, unwrapped)\n    } else {\n      items.push(unwrapped)\n    }\n  }\n\n  function unregister (id: string) {\n    if (isUnmounted) return\n\n    // TODO: re-evaluate this line's importance in the future\n    // should we only modify the model if mandatory is set.\n    // selected.value = selected.value.filter(v => v !== id)\n\n    forceMandatoryValue()\n\n    const index = items.findIndex(item => item.id === id)\n    items.splice(index, 1)\n  }\n\n  // If mandatory and nothing is selected, then select first non-disabled item\n  function forceMandatoryValue () {\n    const item = items.find(item => !item.disabled)\n    if (item && props.mandatory === 'force' && !selected.value.length) {\n      selected.value = [item.id]\n    }\n  }\n\n  onMounted(() => {\n    forceMandatoryValue()\n  })\n\n  onBeforeUnmount(() => {\n    isUnmounted = true\n  })\n\n  onUpdated(() => {\n    // #19655 update the items that use the index as the value.\n    for (let i = 0; i < items.length; i++) {\n      if (items[i].useIndexAsValue) {\n        items[i].value = i\n      }\n    }\n  })\n\n  function select (id: string, value?: boolean) {\n    const item = items.find(item => item.id === id)\n    if (value && item?.disabled) return\n\n    if (props.multiple) {\n      const internalValue = selected.value.slice()\n      const index = internalValue.findIndex(v => v === id)\n      const isSelected = ~index\n      value = value ?? !isSelected\n\n      // We can't remove value if group is\n      // mandatory, value already exists,\n      // and it is the only value\n      if (\n        isSelected &&\n        props.mandatory &&\n        internalValue.length <= 1\n      ) return\n\n      // We can't add value if it would\n      // cause max limit to be exceeded\n      if (\n        !isSelected &&\n        props.max != null &&\n        internalValue.length + 1 > props.max\n      ) return\n\n      if (index < 0 && value) internalValue.push(id)\n      else if (index >= 0 && !value) internalValue.splice(index, 1)\n\n      selected.value = internalValue\n    } else {\n      const isSelected = selected.value.includes(id)\n      if (props.mandatory && isSelected) return\n\n      selected.value = (value ?? !isSelected) ? [id] : []\n    }\n  }\n\n  function step (offset: number) {\n    // getting an offset from selected value obviously won't work with multiple values\n    if (props.multiple) consoleWarn('This method is not supported when using \"multiple\" prop')\n\n    if (!selected.value.length) {\n      const item = items.find(item => !item.disabled)\n      item && (selected.value = [item.id])\n    } else {\n      const currentId = selected.value[0]\n      const currentIndex = items.findIndex(i => i.id === currentId)\n\n      let newIndex = (currentIndex + offset) % items.length\n      let newItem = items[newIndex]\n\n      while (newItem.disabled && newIndex !== currentIndex) {\n        newIndex = (newIndex + offset) % items.length\n        newItem = items[newIndex]\n      }\n\n      if (newItem.disabled) return\n\n      selected.value = [items[newIndex].id]\n    }\n  }\n\n  const state: GroupProvide = {\n    register,\n    unregister,\n    selected,\n    select,\n    disabled: toRef(props, 'disabled'),\n    prev: () => step(items.length - 1),\n    next: () => step(1),\n    isSelected: (id: string) => selected.value.includes(id),\n    selectedClass: computed(() => props.selectedClass),\n    items: computed(() => items),\n    getItemIndex: (value: unknown) => getItemIndex(items, value),\n  }\n\n  provide(injectKey, state)\n\n  return state\n}\n\nfunction getItemIndex (items: UnwrapRef<GroupItem[]>, value: unknown) {\n  const ids = getIds(items, [value])\n\n  if (!ids.length) return -1\n\n  return items.findIndex(item => item.id === ids[0])\n}\n\nfunction getIds (items: UnwrapRef<GroupItem[]>, modelValue: any[]) {\n  const ids: string[] = []\n\n  modelValue.forEach(value => {\n    const item = items.find(item => deepEqual(value, item.value))\n    const itemByIndex = items[value]\n\n    if (item?.value != null) {\n      ids.push(item.id)\n    } else if (itemByIndex != null) {\n      ids.push(itemByIndex.id)\n    }\n  })\n\n  return ids\n}\n\nfunction getValues (items: UnwrapRef<GroupItem[]>, ids: any[]) {\n  const values: unknown[] = []\n\n  ids.forEach(id => {\n    const itemIndex = items.findIndex(item => item.id === id)\n    if (~itemIndex) {\n      const item = items[itemIndex]\n      values.push(item.value != null ? item.value : itemIndex)\n    }\n  })\n\n  return values\n}\n"]},"metadata":{},"sourceType":"module"}