{"ast":null,"code":"// Composables\nimport { useProxiedModel } from \"../proxiedModel.js\"; // Utilities\n\nimport { computed, inject, onBeforeMount, onBeforeUnmount, provide, ref, shallowRef, toRaw, toRef } from 'vue';\nimport { independentActiveStrategy, independentSingleActiveStrategy, leafActiveStrategy, leafSingleActiveStrategy } from \"./activeStrategies.js\";\nimport { listOpenStrategy, multipleOpenStrategy, singleOpenStrategy } from \"./openStrategies.js\";\nimport { classicSelectStrategy, independentSelectStrategy, independentSingleSelectStrategy, leafSelectStrategy, leafSingleSelectStrategy, trunkSelectStrategy } from \"./selectStrategies.js\";\nimport { consoleError, getCurrentInstance, propsFactory } from \"../../util/index.js\"; // Types\n\nexport const VNestedSymbol = Symbol.for('vuetify:nested');\nexport const emptyNested = {\n  id: shallowRef(),\n  root: {\n    register: () => null,\n    unregister: () => null,\n    parents: ref(new Map()),\n    children: ref(new Map()),\n    open: () => null,\n    openOnSelect: () => null,\n    activate: () => null,\n    select: () => null,\n    activatable: ref(false),\n    selectable: ref(false),\n    opened: ref(new Set()),\n    activated: ref(new Set()),\n    selected: ref(new Map()),\n    selectedValues: ref([]),\n    getPath: () => []\n  }\n};\nexport const makeNestedProps = propsFactory({\n  activatable: Boolean,\n  selectable: Boolean,\n  activeStrategy: [String, Function, Object],\n  selectStrategy: [String, Function, Object],\n  openStrategy: [String, Object],\n  opened: null,\n  activated: null,\n  selected: null,\n  mandatory: Boolean\n}, 'nested');\nexport const useNested = props => {\n  let isUnmounted = false;\n  const children = ref(new Map());\n  const parents = ref(new Map());\n  const opened = useProxiedModel(props, 'opened', props.opened, v => new Set(v), v => [...v.values()]);\n  const activeStrategy = computed(() => {\n    if (typeof props.activeStrategy === 'object') return props.activeStrategy;\n    if (typeof props.activeStrategy === 'function') return props.activeStrategy(props.mandatory);\n\n    switch (props.activeStrategy) {\n      case 'leaf':\n        return leafActiveStrategy(props.mandatory);\n\n      case 'single-leaf':\n        return leafSingleActiveStrategy(props.mandatory);\n\n      case 'independent':\n        return independentActiveStrategy(props.mandatory);\n\n      case 'single-independent':\n      default:\n        return independentSingleActiveStrategy(props.mandatory);\n    }\n  });\n  const selectStrategy = computed(() => {\n    if (typeof props.selectStrategy === 'object') return props.selectStrategy;\n    if (typeof props.selectStrategy === 'function') return props.selectStrategy(props.mandatory);\n\n    switch (props.selectStrategy) {\n      case 'single-leaf':\n        return leafSingleSelectStrategy(props.mandatory);\n\n      case 'leaf':\n        return leafSelectStrategy(props.mandatory);\n\n      case 'independent':\n        return independentSelectStrategy(props.mandatory);\n\n      case 'single-independent':\n        return independentSingleSelectStrategy(props.mandatory);\n\n      case 'trunk':\n        return trunkSelectStrategy(props.mandatory);\n\n      case 'classic':\n      default:\n        return classicSelectStrategy(props.mandatory);\n    }\n  });\n  const openStrategy = computed(() => {\n    if (typeof props.openStrategy === 'object') return props.openStrategy;\n\n    switch (props.openStrategy) {\n      case 'list':\n        return listOpenStrategy;\n\n      case 'single':\n        return singleOpenStrategy;\n\n      case 'multiple':\n      default:\n        return multipleOpenStrategy;\n    }\n  });\n  const activated = useProxiedModel(props, 'activated', props.activated, v => activeStrategy.value.in(v, children.value, parents.value), v => activeStrategy.value.out(v, children.value, parents.value));\n  const selected = useProxiedModel(props, 'selected', props.selected, v => selectStrategy.value.in(v, children.value, parents.value), v => selectStrategy.value.out(v, children.value, parents.value));\n  onBeforeUnmount(() => {\n    isUnmounted = true;\n  });\n\n  function getPath(id) {\n    const path = [];\n    let parent = id;\n\n    while (parent != null) {\n      path.unshift(parent);\n      parent = parents.value.get(parent);\n    }\n\n    return path;\n  }\n\n  const vm = getCurrentInstance('nested');\n  const nodeIds = new Set();\n  const nested = {\n    id: shallowRef(),\n    root: {\n      opened,\n      activatable: toRef(props, 'activatable'),\n      selectable: toRef(props, 'selectable'),\n      activated,\n      selected,\n      selectedValues: computed(() => {\n        const arr = [];\n\n        for (const [key, value] of selected.value.entries()) {\n          if (value === 'on') arr.push(key);\n        }\n\n        return arr;\n      }),\n      register: (id, parentId, isGroup) => {\n        if (nodeIds.has(id)) {\n          const path = getPath(id).map(String).join(' -> ');\n          const newPath = getPath(parentId).concat(id).map(String).join(' -> ');\n          consoleError(`Multiple nodes with the same ID\\n\\t${path}\\n\\t${newPath}`);\n          return;\n        } else {\n          nodeIds.add(id);\n        }\n\n        parentId && id !== parentId && parents.value.set(id, parentId);\n        isGroup && children.value.set(id, []);\n\n        if (parentId != null) {\n          children.value.set(parentId, [...(children.value.get(parentId) || []), id]);\n        }\n      },\n      unregister: id => {\n        if (isUnmounted) return;\n        nodeIds.delete(id);\n        children.value.delete(id);\n        const parent = parents.value.get(id);\n\n        if (parent) {\n          const list = children.value.get(parent) ?? [];\n          children.value.set(parent, list.filter(child => child !== id));\n        }\n\n        parents.value.delete(id);\n      },\n      open: (id, value, event) => {\n        vm.emit('click:open', {\n          id,\n          value,\n          path: getPath(id),\n          event\n        });\n        const newOpened = openStrategy.value.open({\n          id,\n          value,\n          opened: new Set(opened.value),\n          children: children.value,\n          parents: parents.value,\n          event\n        });\n        newOpened && (opened.value = newOpened);\n      },\n      openOnSelect: (id, value, event) => {\n        const newOpened = openStrategy.value.select({\n          id,\n          value,\n          selected: new Map(selected.value),\n          opened: new Set(opened.value),\n          children: children.value,\n          parents: parents.value,\n          event\n        });\n        newOpened && (opened.value = newOpened);\n      },\n      select: (id, value, event) => {\n        vm.emit('click:select', {\n          id,\n          value,\n          path: getPath(id),\n          event\n        });\n        const newSelected = selectStrategy.value.select({\n          id,\n          value,\n          selected: new Map(selected.value),\n          children: children.value,\n          parents: parents.value,\n          event\n        });\n        newSelected && (selected.value = newSelected);\n        nested.root.openOnSelect(id, value, event);\n      },\n      activate: (id, value, event) => {\n        if (!props.activatable) {\n          return nested.root.select(id, true, event);\n        }\n\n        vm.emit('click:activate', {\n          id,\n          value,\n          path: getPath(id),\n          event\n        });\n        const newActivated = activeStrategy.value.activate({\n          id,\n          value,\n          activated: new Set(activated.value),\n          children: children.value,\n          parents: parents.value,\n          event\n        });\n\n        if (newActivated.size !== activated.value.size) {\n          activated.value = newActivated;\n        } else {\n          for (const value of newActivated) {\n            if (!activated.value.has(value)) {\n              activated.value = newActivated;\n              return;\n            }\n          }\n\n          for (const value of activated.value) {\n            if (!newActivated.has(value)) {\n              activated.value = newActivated;\n              return;\n            }\n          }\n        }\n      },\n      children,\n      parents,\n      getPath\n    }\n  };\n  provide(VNestedSymbol, nested);\n  return nested.root;\n};\nexport const useNestedItem = (id, isGroup) => {\n  const parent = inject(VNestedSymbol, emptyNested);\n  const uidSymbol = Symbol('nested item');\n  const computedId = computed(() => id.value !== undefined ? id.value : uidSymbol);\n  const item = { ...parent,\n    id: computedId,\n    open: (open, e) => parent.root.open(computedId.value, open, e),\n    openOnSelect: (open, e) => parent.root.openOnSelect(computedId.value, open, e),\n    isOpen: computed(() => parent.root.opened.value.has(computedId.value)),\n    parent: computed(() => parent.root.parents.value.get(computedId.value)),\n    activate: (activated, e) => parent.root.activate(computedId.value, activated, e),\n    isActivated: computed(() => parent.root.activated.value.has(toRaw(computedId.value))),\n    select: (selected, e) => parent.root.select(computedId.value, selected, e),\n    isSelected: computed(() => parent.root.selected.value.get(toRaw(computedId.value)) === 'on'),\n    isIndeterminate: computed(() => parent.root.selected.value.get(toRaw(computedId.value)) === 'indeterminate'),\n    isLeaf: computed(() => !parent.root.children.value.get(computedId.value)),\n    isGroupActivator: parent.isGroupActivator\n  };\n  onBeforeMount(() => {\n    !parent.isGroupActivator && parent.root.register(computedId.value, parent.id.value, isGroup);\n  });\n  onBeforeUnmount(() => {\n    !parent.isGroupActivator && parent.root.unregister(computedId.value);\n  });\n  isGroup && provide(VNestedSymbol, item);\n  return item;\n};\nexport const useNestedGroupActivator = () => {\n  const parent = inject(VNestedSymbol, emptyNested);\n  provide(VNestedSymbol, { ...parent,\n    isGroupActivator: true\n  });\n};","map":{"version":3,"mappings":"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","names":["useProxiedModel","computed","inject","onBeforeMount","onBeforeUnmount","provide","ref","shallowRef","toRaw","toRef","independentActiveStrategy","independentSingleActiveStrategy","leafActiveStrategy","leafSingleActiveStrategy","listOpenStrategy","multipleOpenStrategy","singleOpenStrategy","classicSelectStrategy","independentSelectStrategy","independentSingleSelectStrategy","leafSelectStrategy","leafSingleSelectStrategy","trunkSelectStrategy","consoleError","getCurrentInstance","propsFactory","VNestedSymbol","Symbol","for","emptyNested","id","root","register","unregister","parents","Map","children","open","openOnSelect","activate","select","activatable","selectable","opened","Set","activated","selected","selectedValues","getPath","makeNestedProps","Boolean","activeStrategy","String","Function","Object","selectStrategy","openStrategy","mandatory","useNested","props","isUnmounted","v","values","value","in","out","path","parent","unshift","get","vm","nodeIds","nested","arr","key","entries","push","parentId","isGroup","has","map","join","newPath","concat","add","set","delete","list","filter","child","event","emit","newOpened","newSelected","newActivated","size","useNestedItem","uidSymbol","computedId","undefined","item","e","isOpen","isActivated","isSelected","isIndeterminate","isLeaf","isGroupActivator","useNestedGroupActivator"],"sources":["../../../src/composables/nested/nested.ts"],"sourcesContent":["// Composables\nimport { useProxiedModel } from '@/composables/proxiedModel'\n\n// Utilities\nimport {\n  computed,\n  inject,\n  onBeforeMount,\n  onBeforeUnmount,\n  provide,\n  ref,\n  shallowRef,\n  toRaw,\n  toRef,\n} from 'vue'\nimport {\n  independentActiveStrategy,\n  independentSingleActiveStrategy,\n  leafActiveStrategy,\n  leafSingleActiveStrategy,\n} from './activeStrategies'\nimport { listOpenStrategy, multipleOpenStrategy, singleOpenStrategy } from './openStrategies'\nimport {\n  classicSelectStrategy,\n  independentSelectStrategy,\n  independentSingleSelectStrategy,\n  leafSelectStrategy,\n  leafSingleSelectStrategy,\n  trunkSelectStrategy,\n} from './selectStrategies'\nimport { consoleError, getCurrentInstance, propsFactory } from '@/util'\n\n// Types\nimport type { InjectionKey, PropType, Ref } from 'vue'\nimport type { ActiveStrategy } from './activeStrategies'\nimport type { OpenStrategy } from './openStrategies'\nimport type { SelectStrategy } from './selectStrategies'\nimport type { EventProp } from '@/util'\n\nexport type ActiveStrategyProp =\n  | 'single-leaf'\n  | 'leaf'\n  | 'independent'\n  | 'single-independent'\n  | ActiveStrategy\n  | ((mandatory: boolean) => ActiveStrategy)\nexport type SelectStrategyProp =\n  | 'single-leaf'\n  | 'leaf'\n  | 'independent'\n  | 'single-independent'\n  | 'classic'\n  | 'trunk'\n  | SelectStrategy\n  | ((mandatory: boolean) => SelectStrategy)\nexport type OpenStrategyProp = 'single' | 'multiple' | 'list' | OpenStrategy\n\nexport interface NestedProps {\n  activatable: boolean\n  selectable: boolean\n  activeStrategy: ActiveStrategyProp | undefined\n  selectStrategy: SelectStrategyProp | undefined\n  openStrategy: OpenStrategyProp | undefined\n  activated: any\n  selected: any\n  opened: any\n  mandatory: boolean\n  'onUpdate:activated': EventProp<[any]> | undefined\n  'onUpdate:selected': EventProp<[any]> | undefined\n  'onUpdate:opened': EventProp<[any]> | undefined\n}\n\ntype NestedProvide = {\n  id: Ref<unknown>\n  isGroupActivator?: boolean\n  root: {\n    children: Ref<Map<unknown, unknown[]>>\n    parents: Ref<Map<unknown, unknown>>\n    activatable: Ref<boolean>\n    selectable: Ref<boolean>\n    opened: Ref<Set<unknown>>\n    activated: Ref<Set<unknown>>\n    selected: Ref<Map<unknown, 'on' | 'off' | 'indeterminate'>>\n    selectedValues: Ref<unknown[]>\n    register: (id: unknown, parentId: unknown, isGroup?: boolean) => void\n    unregister: (id: unknown) => void\n    open: (id: unknown, value: boolean, event?: Event) => void\n    activate: (id: unknown, value: boolean, event?: Event) => void\n    select: (id: unknown, value: boolean, event?: Event) => void\n    openOnSelect: (id: unknown, value: boolean, event?: Event) => void\n    getPath: (id: unknown) => unknown[]\n  }\n}\n\nexport const VNestedSymbol: InjectionKey<NestedProvide> = Symbol.for('vuetify:nested')\n\nexport const emptyNested: NestedProvide = {\n  id: shallowRef(),\n  root: {\n    register: () => null,\n    unregister: () => null,\n    parents: ref(new Map()),\n    children: ref(new Map()),\n    open: () => null,\n    openOnSelect: () => null,\n    activate: () => null,\n    select: () => null,\n    activatable: ref(false),\n    selectable: ref(false),\n    opened: ref(new Set()),\n    activated: ref(new Set()),\n    selected: ref(new Map()),\n    selectedValues: ref([]),\n    getPath: () => [],\n  },\n}\n\nexport const makeNestedProps = propsFactory({\n  activatable: Boolean,\n  selectable: Boolean,\n  activeStrategy: [String, Function, Object] as PropType<ActiveStrategyProp>,\n  selectStrategy: [String, Function, Object] as PropType<SelectStrategyProp>,\n  openStrategy: [String, Object] as PropType<OpenStrategyProp>,\n  opened: null,\n  activated: null,\n  selected: null,\n  mandatory: Boolean,\n}, 'nested')\n\nexport const useNested = (props: NestedProps) => {\n  let isUnmounted = false\n  const children = ref(new Map<unknown, unknown[]>())\n  const parents = ref(new Map<unknown, unknown>())\n\n  const opened = useProxiedModel(props, 'opened', props.opened, v => new Set(v), v => [...v.values()])\n\n  const activeStrategy = computed(() => {\n    if (typeof props.activeStrategy === 'object') return props.activeStrategy\n    if (typeof props.activeStrategy === 'function') return props.activeStrategy(props.mandatory)\n\n    switch (props.activeStrategy) {\n      case 'leaf': return leafActiveStrategy(props.mandatory)\n      case 'single-leaf': return leafSingleActiveStrategy(props.mandatory)\n      case 'independent': return independentActiveStrategy(props.mandatory)\n      case 'single-independent':\n      default: return independentSingleActiveStrategy(props.mandatory)\n    }\n  })\n\n  const selectStrategy = computed(() => {\n    if (typeof props.selectStrategy === 'object') return props.selectStrategy\n    if (typeof props.selectStrategy === 'function') return props.selectStrategy(props.mandatory)\n\n    switch (props.selectStrategy) {\n      case 'single-leaf': return leafSingleSelectStrategy(props.mandatory)\n      case 'leaf': return leafSelectStrategy(props.mandatory)\n      case 'independent': return independentSelectStrategy(props.mandatory)\n      case 'single-independent': return independentSingleSelectStrategy(props.mandatory)\n      case 'trunk': return trunkSelectStrategy(props.mandatory)\n      case 'classic':\n      default: return classicSelectStrategy(props.mandatory)\n    }\n  })\n\n  const openStrategy = computed(() => {\n    if (typeof props.openStrategy === 'object') return props.openStrategy\n\n    switch (props.openStrategy) {\n      case 'list': return listOpenStrategy\n      case 'single': return singleOpenStrategy\n      case 'multiple':\n      default: return multipleOpenStrategy\n    }\n  })\n\n  const activated = useProxiedModel(\n    props,\n    'activated',\n    props.activated,\n    v => activeStrategy.value.in(v, children.value, parents.value),\n    v => activeStrategy.value.out(v, children.value, parents.value),\n  )\n  const selected = useProxiedModel(\n    props,\n    'selected',\n    props.selected,\n    v => selectStrategy.value.in(v, children.value, parents.value),\n    v => selectStrategy.value.out(v, children.value, parents.value),\n  )\n\n  onBeforeUnmount(() => {\n    isUnmounted = true\n  })\n\n  function getPath (id: unknown) {\n    const path: unknown[] = []\n    let parent: unknown = id\n\n    while (parent != null) {\n      path.unshift(parent)\n      parent = parents.value.get(parent)\n    }\n\n    return path\n  }\n\n  const vm = getCurrentInstance('nested')\n\n  const nodeIds = new Set<unknown>()\n\n  const nested: NestedProvide = {\n    id: shallowRef(),\n    root: {\n      opened,\n      activatable: toRef(props, 'activatable'),\n      selectable: toRef(props, 'selectable'),\n      activated,\n      selected,\n      selectedValues: computed(() => {\n        const arr = []\n\n        for (const [key, value] of selected.value.entries()) {\n          if (value === 'on') arr.push(key)\n        }\n\n        return arr\n      }),\n      register: (id, parentId, isGroup) => {\n        if (nodeIds.has(id)) {\n          const path = getPath(id).map(String).join(' -> ')\n          const newPath = getPath(parentId).concat(id).map(String).join(' -> ')\n          consoleError(`Multiple nodes with the same ID\\n\\t${path}\\n\\t${newPath}`)\n          return\n        } else {\n          nodeIds.add(id)\n        }\n\n        parentId && id !== parentId && parents.value.set(id, parentId)\n\n        isGroup && children.value.set(id, [])\n\n        if (parentId != null) {\n          children.value.set(parentId, [...children.value.get(parentId) || [], id])\n        }\n      },\n      unregister: id => {\n        if (isUnmounted) return\n\n        nodeIds.delete(id)\n        children.value.delete(id)\n        const parent = parents.value.get(id)\n        if (parent) {\n          const list = children.value.get(parent) ?? []\n          children.value.set(parent, list.filter(child => child !== id))\n        }\n        parents.value.delete(id)\n      },\n      open: (id, value, event) => {\n        vm.emit('click:open', { id, value, path: getPath(id), event })\n\n        const newOpened = openStrategy.value.open({\n          id,\n          value,\n          opened: new Set(opened.value),\n          children: children.value,\n          parents: parents.value,\n          event,\n        })\n\n        newOpened && (opened.value = newOpened)\n      },\n      openOnSelect: (id, value, event) => {\n        const newOpened = openStrategy.value.select({\n          id,\n          value,\n          selected: new Map(selected.value),\n          opened: new Set(opened.value),\n          children: children.value,\n          parents: parents.value,\n          event,\n        })\n        newOpened && (opened.value = newOpened)\n      },\n      select: (id, value, event) => {\n        vm.emit('click:select', { id, value, path: getPath(id), event })\n\n        const newSelected = selectStrategy.value.select({\n          id,\n          value,\n          selected: new Map(selected.value),\n          children: children.value,\n          parents: parents.value,\n          event,\n        })\n        newSelected && (selected.value = newSelected)\n\n        nested.root.openOnSelect(id, value, event)\n      },\n      activate: (id, value, event) => {\n        if (!props.activatable) {\n          return nested.root.select(id, true, event)\n        }\n\n        vm.emit('click:activate', { id, value, path: getPath(id), event })\n\n        const newActivated = activeStrategy.value.activate({\n          id,\n          value,\n          activated: new Set(activated.value),\n          children: children.value,\n          parents: parents.value,\n          event,\n        })\n\n        if (newActivated.size !== activated.value.size) {\n          activated.value = newActivated\n        } else {\n          for (const value of newActivated) {\n            if (!activated.value.has(value)) {\n              activated.value = newActivated\n              return\n            }\n          }\n          for (const value of activated.value) {\n            if (!newActivated.has(value)) {\n              activated.value = newActivated\n              return\n            }\n          }\n        }\n      },\n      children,\n      parents,\n      getPath,\n    },\n  }\n\n  provide(VNestedSymbol, nested)\n\n  return nested.root\n}\n\nexport const useNestedItem = (id: Ref<unknown>, isGroup: boolean) => {\n  const parent = inject(VNestedSymbol, emptyNested)\n\n  const uidSymbol = Symbol('nested item')\n  const computedId = computed(() => id.value !== undefined ? id.value : uidSymbol)\n\n  const item = {\n    ...parent,\n    id: computedId,\n    open: (open: boolean, e: Event) => parent.root.open(computedId.value, open, e),\n    openOnSelect: (open: boolean, e?: Event) => parent.root.openOnSelect(computedId.value, open, e),\n    isOpen: computed(() => parent.root.opened.value.has(computedId.value)),\n    parent: computed(() => parent.root.parents.value.get(computedId.value)),\n    activate: (activated: boolean, e?: Event) => parent.root.activate(computedId.value, activated, e),\n    isActivated: computed(() => parent.root.activated.value.has(toRaw(computedId.value))),\n    select: (selected: boolean, e?: Event) => parent.root.select(computedId.value, selected, e),\n    isSelected: computed(() => parent.root.selected.value.get(toRaw(computedId.value)) === 'on'),\n    isIndeterminate: computed(() => parent.root.selected.value.get(toRaw(computedId.value)) === 'indeterminate'),\n    isLeaf: computed(() => !parent.root.children.value.get(computedId.value)),\n    isGroupActivator: parent.isGroupActivator,\n  }\n\n  onBeforeMount(() => {\n    !parent.isGroupActivator && parent.root.register(computedId.value, parent.id.value, isGroup)\n  })\n\n  onBeforeUnmount(() => {\n    !parent.isGroupActivator && parent.root.unregister(computedId.value)\n  })\n\n  isGroup && provide(VNestedSymbol, item)\n\n  return item\n}\n\nexport const useNestedGroupActivator = () => {\n  const parent = inject(VNestedSymbol, emptyNested)\n\n  provide(VNestedSymbol, { ...parent, isGroupActivator: true })\n}\n"]},"metadata":{},"sourceType":"module"}