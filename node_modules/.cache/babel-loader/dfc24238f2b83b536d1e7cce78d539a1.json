{"ast":null,"code":"// Utilities\nimport { computed, shallowRef, watch } from 'vue';\nimport { propsFactory } from \"../util/index.js\"; // Types\n\nexport var makeLazyProps = propsFactory({\n  eager: Boolean\n}, 'lazy');\nexport function useLazy(props, active) {\n  var isBooted = shallowRef(false);\n  var hasContent = computed(function () {\n    return isBooted.value || props.eager || active.value;\n  });\n  watch(active, function () {\n    return isBooted.value = true;\n  });\n\n  function onAfterLeave() {\n    if (!props.eager) isBooted.value = false;\n  }\n\n  return {\n    isBooted: isBooted,\n    hasContent: hasContent,\n    onAfterLeave: onAfterLeave\n  };\n}","map":{"version":3,"mappings":"AAAA;AACA,SAASA,QAAT,EAAmBC,UAAnB,EAA+BC,KAA/B,QAA4C,KAA5C;AAAiD,SACxCC,YADwC,QAC5B,kBAD4B,C,CAGjD;;AAGA,OAAO,IAAMC,aAAa,GAAGD,YAAY,CAAC;AACxCE,OAAK,EAAEC;AADiC,CAAD,EAEtC,MAFsC,CAAlC;AAIP,OAAO,SAASC,OAAT,CAAkBC,KAAlB,EAA6CC,MAA7C,EAAmE;AACxE,MAAMC,QAAQ,GAAGT,UAAU,CAAC,KAAD,CAA3B;AACA,MAAMU,UAAU,GAAGX,QAAQ,CAAC;AAAA,WAAMU,QAAQ,CAACE,KAATF,IAAkBF,KAAK,CAACH,KAAxBK,IAAiCD,MAAM,CAACG,KAA9C;AAAA,GAAD,CAA3B;AAEAV,OAAK,CAACO,MAAD,EAAS;AAAA,WAAMC,QAAQ,CAACE,KAATF,GAAiB,IAAvB;AAAA,GAAT,CAALR;;AAEA,WAASW,YAAT,GAAyB;AACvB,QAAI,CAACL,KAAK,CAACH,KAAX,EAAkBK,QAAQ,CAACE,KAATF,GAAiB,KAAjBA;AACpB;;AAEA,SAAO;AAAEA,YAAQ,EAARA,QAAF;AAAYC,cAAU,EAAVA,UAAZ;AAAwBE;AAAxB,GAAP;AACF","names":["computed","shallowRef","watch","propsFactory","makeLazyProps","eager","Boolean","useLazy","props","active","isBooted","hasContent","value","onAfterLeave"],"sources":["../../src/composables/lazy.ts"],"sourcesContent":["// Utilities\nimport { computed, shallowRef, watch } from 'vue'\nimport { propsFactory } from '@/util'\n\n// Types\nimport type { Ref } from 'vue'\n\nexport const makeLazyProps = propsFactory({\n  eager: Boolean,\n}, 'lazy')\n\nexport function useLazy (props: { eager: boolean }, active: Ref<boolean>) {\n  const isBooted = shallowRef(false)\n  const hasContent = computed(() => isBooted.value || props.eager || active.value)\n\n  watch(active, () => isBooted.value = true)\n\n  function onAfterLeave () {\n    if (!props.eager) isBooted.value = false\n  }\n\n  return { isBooted, hasContent, onAfterLeave }\n}\n"]},"metadata":{},"sourceType":"module"}