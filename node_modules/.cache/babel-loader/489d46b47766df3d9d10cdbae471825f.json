{"ast":null,"code":"import { createTextVNode as _createTextVNode, createVNode as _createVNode } from \"vue\"; // Styles\n\nimport \"./VInfiniteScroll.css\"; // Components\n\nimport { VBtn } from \"../VBtn/index.js\";\nimport { VProgressCircular } from \"../VProgressCircular/index.js\"; // Composables\n\nimport { makeDimensionProps, useDimension } from \"../../composables/dimensions.js\";\nimport { useIntersectionObserver } from \"../../composables/intersectionObserver.js\";\nimport { useLocale } from \"../../composables/locale.js\";\nimport { makeTagProps } from \"../../composables/tag.js\"; // Utilities\n\nimport { computed, nextTick, onMounted, ref, shallowRef, watch } from 'vue';\nimport { convertToUnit, defineComponent, genericComponent, propsFactory, useRender } from \"../../util/index.js\"; // Types\n\nexport const makeVInfiniteScrollProps = propsFactory({\n  color: String,\n  direction: {\n    type: String,\n    default: 'vertical',\n    validator: v => ['vertical', 'horizontal'].includes(v)\n  },\n  side: {\n    type: String,\n    default: 'end',\n    validator: v => ['start', 'end', 'both'].includes(v)\n  },\n  mode: {\n    type: String,\n    default: 'intersect',\n    validator: v => ['intersect', 'manual'].includes(v)\n  },\n  margin: [Number, String],\n  loadMoreText: {\n    type: String,\n    default: '$vuetify.infiniteScroll.loadMore'\n  },\n  emptyText: {\n    type: String,\n    default: '$vuetify.infiniteScroll.empty'\n  },\n  ...makeDimensionProps(),\n  ...makeTagProps()\n}, 'VInfiniteScroll');\nexport const VInfiniteScrollIntersect = defineComponent({\n  name: 'VInfiniteScrollIntersect',\n  props: {\n    side: {\n      type: String,\n      required: true\n    },\n    rootMargin: String\n  },\n  emits: {\n    intersect: (side, isIntersecting) => true\n  },\n\n  setup(props, _ref) {\n    let {\n      emit\n    } = _ref;\n    const {\n      intersectionRef,\n      isIntersecting\n    } = useIntersectionObserver();\n    watch(isIntersecting, async val => {\n      emit('intersect', props.side, val);\n    });\n    useRender(() => _createVNode(\"div\", {\n      \"class\": \"v-infinite-scroll-intersect\",\n      \"style\": {\n        '--v-infinite-margin-size': props.rootMargin\n      },\n      \"ref\": intersectionRef\n    }, [_createTextVNode(\"\\xA0\")]));\n    return {};\n  }\n\n});\nexport const VInfiniteScroll = genericComponent()({\n  name: 'VInfiniteScroll',\n  props: makeVInfiniteScrollProps(),\n  emits: {\n    load: options => true\n  },\n\n  setup(props, _ref2) {\n    let {\n      slots,\n      emit\n    } = _ref2;\n    const rootEl = ref();\n    const startStatus = shallowRef('ok');\n    const endStatus = shallowRef('ok');\n    const margin = computed(() => convertToUnit(props.margin));\n    const isIntersecting = shallowRef(false);\n\n    function setScrollAmount(amount) {\n      if (!rootEl.value) return;\n      const property = props.direction === 'vertical' ? 'scrollTop' : 'scrollLeft';\n      rootEl.value[property] = amount;\n    }\n\n    function getScrollAmount() {\n      if (!rootEl.value) return 0;\n      const property = props.direction === 'vertical' ? 'scrollTop' : 'scrollLeft';\n      return rootEl.value[property];\n    }\n\n    function getScrollSize() {\n      if (!rootEl.value) return 0;\n      const property = props.direction === 'vertical' ? 'scrollHeight' : 'scrollWidth';\n      return rootEl.value[property];\n    }\n\n    function getContainerSize() {\n      if (!rootEl.value) return 0;\n      const property = props.direction === 'vertical' ? 'clientHeight' : 'clientWidth';\n      return rootEl.value[property];\n    }\n\n    onMounted(() => {\n      if (!rootEl.value) return;\n\n      if (props.side === 'start') {\n        setScrollAmount(getScrollSize());\n      } else if (props.side === 'both') {\n        setScrollAmount(getScrollSize() / 2 - getContainerSize() / 2);\n      }\n    });\n\n    function setStatus(side, status) {\n      if (side === 'start') {\n        startStatus.value = status;\n      } else if (side === 'end') {\n        endStatus.value = status;\n      }\n    }\n\n    function getStatus(side) {\n      return side === 'start' ? startStatus.value : endStatus.value;\n    }\n\n    let previousScrollSize = 0;\n\n    function handleIntersect(side, _isIntersecting) {\n      isIntersecting.value = _isIntersecting;\n\n      if (isIntersecting.value) {\n        intersecting(side);\n      }\n    }\n\n    function intersecting(side) {\n      if (props.mode !== 'manual' && !isIntersecting.value) return;\n      const status = getStatus(side);\n      if (!rootEl.value || ['empty', 'loading'].includes(status)) return;\n      previousScrollSize = getScrollSize();\n      setStatus(side, 'loading');\n\n      function done(status) {\n        setStatus(side, status);\n        nextTick(() => {\n          if (status === 'empty' || status === 'error') return;\n\n          if (status === 'ok' && side === 'start') {\n            setScrollAmount(getScrollSize() - previousScrollSize + getScrollAmount());\n          }\n\n          if (props.mode !== 'manual') {\n            nextTick(() => {\n              window.requestAnimationFrame(() => {\n                window.requestAnimationFrame(() => {\n                  window.requestAnimationFrame(() => {\n                    intersecting(side);\n                  });\n                });\n              });\n            });\n          }\n        });\n      }\n\n      emit('load', {\n        side,\n        done\n      });\n    }\n\n    const {\n      t\n    } = useLocale();\n\n    function renderSide(side, status) {\n      if (props.side !== side && props.side !== 'both') return;\n\n      const onClick = () => intersecting(side);\n\n      const slotProps = {\n        side,\n        props: {\n          onClick,\n          color: props.color\n        }\n      };\n      if (status === 'error') return slots.error?.(slotProps);\n      if (status === 'empty') return slots.empty?.(slotProps) ?? _createVNode(\"div\", null, [t(props.emptyText)]);\n\n      if (props.mode === 'manual') {\n        if (status === 'loading') {\n          return slots.loading?.(slotProps) ?? _createVNode(VProgressCircular, {\n            \"indeterminate\": true,\n            \"color\": props.color\n          }, null);\n        }\n\n        return slots['load-more']?.(slotProps) ?? _createVNode(VBtn, {\n          \"variant\": \"outlined\",\n          \"color\": props.color,\n          \"onClick\": onClick\n        }, {\n          default: () => [t(props.loadMoreText)]\n        });\n      }\n\n      return slots.loading?.(slotProps) ?? _createVNode(VProgressCircular, {\n        \"indeterminate\": true,\n        \"color\": props.color\n      }, null);\n    }\n\n    const {\n      dimensionStyles\n    } = useDimension(props);\n    useRender(() => {\n      const Tag = props.tag;\n      const hasStartIntersect = props.side === 'start' || props.side === 'both';\n      const hasEndIntersect = props.side === 'end' || props.side === 'both';\n      const intersectMode = props.mode === 'intersect';\n      return _createVNode(Tag, {\n        \"ref\": rootEl,\n        \"class\": ['v-infinite-scroll', `v-infinite-scroll--${props.direction}`, {\n          'v-infinite-scroll--start': hasStartIntersect,\n          'v-infinite-scroll--end': hasEndIntersect\n        }],\n        \"style\": dimensionStyles.value\n      }, {\n        default: () => [_createVNode(\"div\", {\n          \"class\": \"v-infinite-scroll__side\"\n        }, [renderSide('start', startStatus.value)]), hasStartIntersect && intersectMode && _createVNode(VInfiniteScrollIntersect, {\n          \"key\": \"start\",\n          \"side\": \"start\",\n          \"onIntersect\": handleIntersect,\n          \"rootMargin\": margin.value\n        }, null), slots.default?.(), hasEndIntersect && intersectMode && _createVNode(VInfiniteScrollIntersect, {\n          \"key\": \"end\",\n          \"side\": \"end\",\n          \"onIntersect\": handleIntersect,\n          \"rootMargin\": margin.value\n        }, null), _createVNode(\"div\", {\n          \"class\": \"v-infinite-scroll__side\"\n        }, [renderSide('end', endStatus.value)])]\n      });\n    });\n  }\n\n});","map":{"version":3,"mappings":"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","names":["VBtn","VProgressCircular","makeDimensionProps","useDimension","useIntersectionObserver","useLocale","makeTagProps","computed","nextTick","onMounted","ref","shallowRef","watch","convertToUnit","defineComponent","genericComponent","propsFactory","useRender","makeVInfiniteScrollProps","color","String","direction","type","default","validator","v","includes","side","mode","margin","Number","loadMoreText","emptyText","VInfiniteScrollIntersect","name","props","required","rootMargin","emits","intersect","isIntersecting","setup","_ref","emit","intersectionRef","val","VInfiniteScroll","load","options","_ref2","slots","rootEl","startStatus","endStatus","setScrollAmount","amount","value","property","getScrollAmount","getScrollSize","getContainerSize","setStatus","status","getStatus","previousScrollSize","handleIntersect","_isIntersecting","intersecting","done","window","requestAnimationFrame","t","renderSide","onClick","slotProps","error","empty","_createVNode","loading","dimensionStyles","Tag","tag","hasStartIntersect","hasEndIntersect","intersectMode"],"sources":["../../../src/components/VInfiniteScroll/VInfiniteScroll.tsx"],"sourcesContent":["// Styles\nimport './VInfiniteScroll.sass'\n\n// Components\nimport { VBtn } from '@/components/VBtn'\nimport { VProgressCircular } from '@/components/VProgressCircular'\n\n// Composables\nimport { makeDimensionProps, useDimension } from '@/composables/dimensions'\nimport { useIntersectionObserver } from '@/composables/intersectionObserver'\nimport { useLocale } from '@/composables/locale'\nimport { makeTagProps } from '@/composables/tag'\n\n// Utilities\nimport { computed, nextTick, onMounted, ref, shallowRef, watch } from 'vue'\nimport { convertToUnit, defineComponent, genericComponent, propsFactory, useRender } from '@/util'\n\n// Types\nimport type { PropType } from 'vue'\n\nexport type InfiniteScrollSide = 'start' | 'end' | 'both'\nexport type InfiniteScrollStatus = 'ok' | 'empty' | 'loading' | 'error'\n\ntype InfiniteScrollSlot = {\n  side: InfiniteScrollSide\n  props: Record<string, any>\n}\n\ntype VInfiniteScrollSlots = {\n  default: never\n  loading: InfiniteScrollSlot\n  error: InfiniteScrollSlot\n  empty: InfiniteScrollSlot\n  'load-more': InfiniteScrollSlot\n}\n\nexport const makeVInfiniteScrollProps = propsFactory({\n  color: String,\n  direction: {\n    type: String as PropType<'vertical' | 'horizontal'>,\n    default: 'vertical',\n    validator: (v: any) => ['vertical', 'horizontal'].includes(v),\n  },\n  side: {\n    type: String as PropType<InfiniteScrollSide>,\n    default: 'end',\n    validator: (v: any) => ['start', 'end', 'both'].includes(v),\n  },\n  mode: {\n    type: String as PropType<'intersect' | 'manual'>,\n    default: 'intersect',\n    validator: (v: any) => ['intersect', 'manual'].includes(v),\n  },\n  margin: [Number, String],\n  loadMoreText: {\n    type: String,\n    default: '$vuetify.infiniteScroll.loadMore',\n  },\n  emptyText: {\n    type: String,\n    default: '$vuetify.infiniteScroll.empty',\n  },\n\n  ...makeDimensionProps(),\n  ...makeTagProps(),\n}, 'VInfiniteScroll')\n\nexport const VInfiniteScrollIntersect = defineComponent({\n  name: 'VInfiniteScrollIntersect',\n\n  props: {\n    side: {\n      type: String as PropType<InfiniteScrollSide>,\n      required: true,\n    },\n    rootMargin: String,\n  },\n\n  emits: {\n    intersect: (side: InfiniteScrollSide, isIntersecting: boolean) => true,\n  },\n\n  setup (props, { emit }) {\n    const { intersectionRef, isIntersecting } = useIntersectionObserver()\n\n    watch(isIntersecting, async val => {\n      emit('intersect', props.side, val)\n    })\n\n    useRender(() => (\n      <div\n        class=\"v-infinite-scroll-intersect\"\n        style={{\n          '--v-infinite-margin-size': props.rootMargin,\n        }}\n        ref={ intersectionRef }\n      >&nbsp;</div>\n    ))\n\n    return {}\n  },\n})\n\nexport const VInfiniteScroll = genericComponent<VInfiniteScrollSlots>()({\n  name: 'VInfiniteScroll',\n\n  props: makeVInfiniteScrollProps(),\n\n  emits: {\n    load: (options: { side: InfiniteScrollSide, done: (status: InfiniteScrollStatus) => void }) => true,\n  },\n\n  setup (props, { slots, emit }) {\n    const rootEl = ref<HTMLDivElement>()\n    const startStatus = shallowRef<InfiniteScrollStatus>('ok')\n    const endStatus = shallowRef<InfiniteScrollStatus>('ok')\n    const margin = computed(() => convertToUnit(props.margin))\n    const isIntersecting = shallowRef(false)\n\n    function setScrollAmount (amount: number) {\n      if (!rootEl.value) return\n\n      const property = props.direction === 'vertical' ? 'scrollTop' : 'scrollLeft'\n      rootEl.value[property] = amount\n    }\n\n    function getScrollAmount () {\n      if (!rootEl.value) return 0\n\n      const property = props.direction === 'vertical' ? 'scrollTop' : 'scrollLeft'\n      return rootEl.value[property]\n    }\n\n    function getScrollSize () {\n      if (!rootEl.value) return 0\n\n      const property = props.direction === 'vertical' ? 'scrollHeight' : 'scrollWidth'\n      return rootEl.value[property]\n    }\n\n    function getContainerSize () {\n      if (!rootEl.value) return 0\n\n      const property = props.direction === 'vertical' ? 'clientHeight' : 'clientWidth'\n      return rootEl.value[property]\n    }\n\n    onMounted(() => {\n      if (!rootEl.value) return\n\n      if (props.side === 'start') {\n        setScrollAmount(getScrollSize())\n      } else if (props.side === 'both') {\n        setScrollAmount(getScrollSize() / 2 - getContainerSize() / 2)\n      }\n    })\n\n    function setStatus (side: InfiniteScrollSide, status: InfiniteScrollStatus) {\n      if (side === 'start') {\n        startStatus.value = status\n      } else if (side === 'end') {\n        endStatus.value = status\n      }\n    }\n\n    function getStatus (side: string) {\n      return side === 'start' ? startStatus.value : endStatus.value\n    }\n\n    let previousScrollSize = 0\n    function handleIntersect (side: InfiniteScrollSide, _isIntersecting: boolean) {\n      isIntersecting.value = _isIntersecting\n      if (isIntersecting.value) {\n        intersecting(side)\n      }\n    }\n\n    function intersecting (side: InfiniteScrollSide) {\n      if (props.mode !== 'manual' && !isIntersecting.value) return\n\n      const status = getStatus(side)\n      if (!rootEl.value || ['empty', 'loading'].includes(status)) return\n\n      previousScrollSize = getScrollSize()\n      setStatus(side, 'loading')\n\n      function done (status: InfiniteScrollStatus) {\n        setStatus(side, status)\n\n        nextTick(() => {\n          if (status === 'empty' || status === 'error') return\n\n          if (status === 'ok' && side === 'start') {\n            setScrollAmount(getScrollSize() - previousScrollSize + getScrollAmount())\n          }\n          if (props.mode !== 'manual') {\n            nextTick(() => {\n              window.requestAnimationFrame(() => {\n                window.requestAnimationFrame(() => {\n                  window.requestAnimationFrame(() => {\n                    intersecting(side)\n                  })\n                })\n              })\n            })\n          }\n        })\n      }\n\n      emit('load', { side, done })\n    }\n\n    const { t } = useLocale()\n\n    function renderSide (side: InfiniteScrollSide, status: InfiniteScrollStatus) {\n      if (props.side !== side && props.side !== 'both') return\n\n      const onClick = () => intersecting(side)\n      const slotProps = { side, props: { onClick, color: props.color } }\n\n      if (status === 'error') return slots.error?.(slotProps)\n\n      if (status === 'empty') return slots.empty?.(slotProps) ?? <div>{ t(props.emptyText) }</div>\n\n      if (props.mode === 'manual') {\n        if (status === 'loading') {\n          return slots.loading?.(slotProps) ?? (\n            <VProgressCircular indeterminate color={ props.color } />\n          )\n        }\n\n        return slots['load-more']?.(slotProps) ?? (\n          <VBtn variant=\"outlined\" color={ props.color } onClick={ onClick }>\n            { t(props.loadMoreText) }\n          </VBtn>\n        )\n      }\n\n      return slots.loading?.(slotProps) ?? (\n        <VProgressCircular indeterminate color={ props.color } />\n      )\n    }\n\n    const { dimensionStyles } = useDimension(props)\n\n    useRender(() => {\n      const Tag = props.tag\n      const hasStartIntersect = props.side === 'start' || props.side === 'both'\n      const hasEndIntersect = props.side === 'end' || props.side === 'both'\n      const intersectMode = props.mode === 'intersect'\n\n      return (\n        <Tag\n          ref={ rootEl }\n          class={[\n            'v-infinite-scroll',\n            `v-infinite-scroll--${props.direction}`,\n            {\n              'v-infinite-scroll--start': hasStartIntersect,\n              'v-infinite-scroll--end': hasEndIntersect,\n            },\n          ]}\n          style={ dimensionStyles.value }\n        >\n          <div class=\"v-infinite-scroll__side\">\n            { renderSide('start', startStatus.value) }\n          </div>\n\n          { hasStartIntersect && intersectMode && (\n            <VInfiniteScrollIntersect\n              key=\"start\"\n              side=\"start\"\n              onIntersect={ handleIntersect }\n              rootMargin={ margin.value }\n            />\n          )}\n\n          { slots.default?.() }\n\n          { hasEndIntersect && intersectMode && (\n            <VInfiniteScrollIntersect\n              key=\"end\"\n              side=\"end\"\n              onIntersect={ handleIntersect }\n              rootMargin={ margin.value }\n            />\n          )}\n\n          <div class=\"v-infinite-scroll__side\">\n            { renderSide('end', endStatus.value) }\n          </div>\n        </Tag>\n      )\n    })\n  },\n})\n\nexport type VInfiniteScroll = InstanceType<typeof VInfiniteScroll>\n"]},"metadata":{},"sourceType":"module"}