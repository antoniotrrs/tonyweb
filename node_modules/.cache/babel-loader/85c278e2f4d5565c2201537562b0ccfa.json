{"ast":null,"code":"import { mergeProps as _mergeProps, createVNode as _createVNode } from \"vue\"; // Styles\n\nimport \"./VTooltip.css\"; // Components\n\nimport { VOverlay } from \"../VOverlay/index.js\";\nimport { makeVOverlayProps } from \"../VOverlay/VOverlay.js\"; // Composables\n\nimport { forwardRefs } from \"../../composables/forwardRefs.js\";\nimport { useProxiedModel } from \"../../composables/proxiedModel.js\";\nimport { useScopeId } from \"../../composables/scopeId.js\"; // Utilities\n\nimport { computed, mergeProps, ref, useId } from 'vue';\nimport { genericComponent, omit, propsFactory, useRender } from \"../../util/index.js\"; // Types\n\nexport const makeVTooltipProps = propsFactory({\n  id: String,\n  interactive: Boolean,\n  text: String,\n  ...omit(makeVOverlayProps({\n    closeOnBack: false,\n    location: 'end',\n    locationStrategy: 'connected',\n    eager: true,\n    minWidth: 0,\n    offset: 10,\n    openOnClick: false,\n    openOnHover: true,\n    origin: 'auto',\n    scrim: false,\n    scrollStrategy: 'reposition',\n    transition: false\n  }), ['absolute', 'persistent'])\n}, 'VTooltip');\nexport const VTooltip = genericComponent()({\n  name: 'VTooltip',\n  props: makeVTooltipProps(),\n  emits: {\n    'update:modelValue': value => true\n  },\n\n  setup(props, _ref) {\n    let {\n      slots\n    } = _ref;\n    const isActive = useProxiedModel(props, 'modelValue');\n    const {\n      scopeId\n    } = useScopeId();\n    const uid = useId();\n    const id = computed(() => props.id || `v-tooltip-${uid}`);\n    const overlay = ref();\n    const location = computed(() => {\n      return props.location.split(' ').length > 1 ? props.location : props.location + ' center';\n    });\n    const origin = computed(() => {\n      return props.origin === 'auto' || props.origin === 'overlap' || props.origin.split(' ').length > 1 || props.location.split(' ').length > 1 ? props.origin : props.origin + ' center';\n    });\n    const transition = computed(() => {\n      if (props.transition) return props.transition;\n      return isActive.value ? 'scale-transition' : 'fade-transition';\n    });\n    const activatorProps = computed(() => mergeProps({\n      'aria-describedby': id.value\n    }, props.activatorProps));\n    useRender(() => {\n      const overlayProps = VOverlay.filterProps(props);\n      return _createVNode(VOverlay, _mergeProps({\n        \"ref\": overlay,\n        \"class\": ['v-tooltip', {\n          'v-tooltip--interactive': props.interactive\n        }, props.class],\n        \"style\": props.style,\n        \"id\": id.value\n      }, overlayProps, {\n        \"modelValue\": isActive.value,\n        \"onUpdate:modelValue\": $event => isActive.value = $event,\n        \"transition\": transition.value,\n        \"absolute\": true,\n        \"location\": location.value,\n        \"origin\": origin.value,\n        \"persistent\": true,\n        \"role\": \"tooltip\",\n        \"activatorProps\": activatorProps.value,\n        \"_disableGlobalStack\": true\n      }, scopeId), {\n        activator: slots.activator,\n        default: function () {\n          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n          }\n\n          return slots.default?.(...args) ?? props.text;\n        }\n      });\n    });\n    return forwardRefs({}, overlay);\n  }\n\n});","map":{"version":3,"mappings":"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","names":["VOverlay","makeVOverlayProps","forwardRefs","useProxiedModel","useScopeId","computed","mergeProps","ref","useId","genericComponent","omit","propsFactory","useRender","makeVTooltipProps","id","String","interactive","Boolean","text","closeOnBack","location","locationStrategy","eager","minWidth","offset","openOnClick","openOnHover","origin","scrim","scrollStrategy","transition","VTooltip","name","props","emits","value","setup","_ref","slots","isActive","scopeId","uid","overlay","split","length","activatorProps","overlayProps","filterProps","class","style","$event","activator","default","args","_key","arguments"],"sources":["../../../src/components/VTooltip/VTooltip.tsx"],"sourcesContent":["// Styles\nimport './VTooltip.sass'\n\n// Components\nimport { VOverlay } from '@/components/VOverlay'\nimport { makeVOverlayProps } from '@/components/VOverlay/VOverlay'\n\n// Composables\nimport { forwardRefs } from '@/composables/forwardRefs'\nimport { useProxiedModel } from '@/composables/proxiedModel'\nimport { useScopeId } from '@/composables/scopeId'\n\n// Utilities\nimport { computed, mergeProps, ref, useId } from 'vue'\nimport { genericComponent, omit, propsFactory, useRender } from '@/util'\n\n// Types\nimport type { StrategyProps } from '@/components/VOverlay/locationStrategies'\nimport type { OverlaySlots } from '@/components/VOverlay/VOverlay'\n\nexport const makeVTooltipProps = propsFactory({\n  id: String,\n  interactive: Boolean,\n  text: String,\n\n  ...omit(makeVOverlayProps({\n    closeOnBack: false,\n    location: 'end' as const,\n    locationStrategy: 'connected' as const,\n    eager: true,\n    minWidth: 0,\n    offset: 10,\n    openOnClick: false,\n    openOnHover: true,\n    origin: 'auto' as const,\n    scrim: false,\n    scrollStrategy: 'reposition' as const,\n    transition: false,\n  }), [\n    'absolute',\n    'persistent',\n  ]),\n}, 'VTooltip')\n\nexport const VTooltip = genericComponent<OverlaySlots>()({\n  name: 'VTooltip',\n\n  props: makeVTooltipProps(),\n\n  emits: {\n    'update:modelValue': (value: boolean) => true,\n  },\n\n  setup (props, { slots }) {\n    const isActive = useProxiedModel(props, 'modelValue')\n    const { scopeId } = useScopeId()\n\n    const uid = useId()\n    const id = computed(() => props.id || `v-tooltip-${uid}`)\n\n    const overlay = ref<VOverlay>()\n\n    const location = computed(() => {\n      return props.location.split(' ').length > 1\n        ? props.location\n        : props.location + ' center' as StrategyProps['location']\n    })\n\n    const origin = computed(() => {\n      return (\n        props.origin === 'auto' ||\n        props.origin === 'overlap' ||\n        props.origin.split(' ').length > 1 ||\n        props.location.split(' ').length > 1\n      ) ? props.origin\n        : props.origin + ' center' as StrategyProps['origin']\n    })\n\n    const transition = computed(() => {\n      if (props.transition) return props.transition\n      return isActive.value ? 'scale-transition' : 'fade-transition'\n    })\n\n    const activatorProps = computed(() =>\n      mergeProps({\n        'aria-describedby': id.value,\n      }, props.activatorProps)\n    )\n\n    useRender(() => {\n      const overlayProps = VOverlay.filterProps(props)\n\n      return (\n        <VOverlay\n          ref={ overlay }\n          class={[\n            'v-tooltip',\n            { 'v-tooltip--interactive': props.interactive },\n            props.class,\n          ]}\n          style={ props.style }\n          id={ id.value }\n          { ...overlayProps }\n          v-model={ isActive.value }\n          transition={ transition.value }\n          absolute\n          location={ location.value }\n          origin={ origin.value }\n          persistent\n          role=\"tooltip\"\n          activatorProps={ activatorProps.value }\n          _disableGlobalStack\n          { ...scopeId }\n        >\n          {{\n            activator: slots.activator,\n            default: (...args) => slots.default?.(...args) ?? props.text,\n          }}\n        </VOverlay>\n      )\n    })\n\n    return forwardRefs({}, overlay)\n  },\n})\n\nexport type VTooltip = InstanceType<typeof VTooltip>\n"]},"metadata":{},"sourceType":"module"}