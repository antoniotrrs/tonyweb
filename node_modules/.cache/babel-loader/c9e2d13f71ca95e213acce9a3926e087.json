{"ast":null,"code":"import { createVNode as _createVNode, Fragment as _Fragment } from \"vue\"; // Styles\n\nimport \"./VVirtualScroll.css\"; // Components\n\nimport { VVirtualScrollItem } from \"./VVirtualScrollItem.js\"; // Composables\n\nimport { makeComponentProps } from \"../../composables/component.js\";\nimport { makeDimensionProps, useDimension } from \"../../composables/dimensions.js\";\nimport { useToggleScope } from \"../../composables/toggleScope.js\";\nimport { makeVirtualProps, useVirtual } from \"../../composables/virtual.js\"; // Utilities\n\nimport { onMounted, onScopeDispose, toRef } from 'vue';\nimport { convertToUnit, genericComponent, getCurrentInstance, getScrollParent, propsFactory, useRender } from \"../../util/index.js\"; // Types\n\nexport const makeVVirtualScrollProps = propsFactory({\n  items: {\n    type: Array,\n    default: () => []\n  },\n  renderless: Boolean,\n  ...makeVirtualProps(),\n  ...makeComponentProps(),\n  ...makeDimensionProps()\n}, 'VVirtualScroll');\nexport const VVirtualScroll = genericComponent()({\n  name: 'VVirtualScroll',\n  props: makeVVirtualScrollProps(),\n\n  setup(props, _ref) {\n    let {\n      slots\n    } = _ref;\n    const vm = getCurrentInstance('VVirtualScroll');\n    const {\n      dimensionStyles\n    } = useDimension(props);\n    const {\n      calculateVisibleItems,\n      containerRef,\n      markerRef,\n      handleScroll,\n      handleScrollend,\n      handleItemResize,\n      scrollToIndex,\n      paddingTop,\n      paddingBottom,\n      computedItems\n    } = useVirtual(props, toRef(props, 'items'));\n    useToggleScope(() => props.renderless, () => {\n      function handleListeners() {\n        let add = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n        const method = add ? 'addEventListener' : 'removeEventListener';\n\n        if (containerRef.value === document.documentElement) {\n          document[method]('scroll', handleScroll, {\n            passive: true\n          });\n          document[method]('scrollend', handleScrollend);\n        } else {\n          containerRef.value?.[method]('scroll', handleScroll, {\n            passive: true\n          });\n          containerRef.value?.[method]('scrollend', handleScrollend);\n        }\n      }\n\n      onMounted(() => {\n        containerRef.value = getScrollParent(vm.vnode.el, true);\n        handleListeners(true);\n      });\n      onScopeDispose(handleListeners);\n    });\n    useRender(() => {\n      const children = computedItems.value.map(item => _createVNode(VVirtualScrollItem, {\n        \"key\": item.key,\n        \"renderless\": props.renderless,\n        \"onUpdate:height\": height => handleItemResize(item.index, height)\n      }, {\n        default: slotProps => slots.default?.({\n          item: item.raw,\n          index: item.index,\n          ...slotProps\n        })\n      }));\n      return props.renderless ? _createVNode(_Fragment, null, [_createVNode(\"div\", {\n        \"ref\": markerRef,\n        \"class\": \"v-virtual-scroll__spacer\",\n        \"style\": {\n          paddingTop: convertToUnit(paddingTop.value)\n        }\n      }, null), children, _createVNode(\"div\", {\n        \"class\": \"v-virtual-scroll__spacer\",\n        \"style\": {\n          paddingBottom: convertToUnit(paddingBottom.value)\n        }\n      }, null)]) : _createVNode(\"div\", {\n        \"ref\": containerRef,\n        \"class\": ['v-virtual-scroll', props.class],\n        \"onScrollPassive\": handleScroll,\n        \"onScrollend\": handleScrollend,\n        \"style\": [dimensionStyles.value, props.style]\n      }, [_createVNode(\"div\", {\n        \"ref\": markerRef,\n        \"class\": \"v-virtual-scroll__container\",\n        \"style\": {\n          paddingTop: convertToUnit(paddingTop.value),\n          paddingBottom: convertToUnit(paddingBottom.value)\n        }\n      }, [children])]);\n    });\n    return {\n      calculateVisibleItems,\n      scrollToIndex\n    };\n  }\n\n});","map":{"version":3,"mappings":"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","names":["VVirtualScrollItem","makeComponentProps","makeDimensionProps","useDimension","useToggleScope","makeVirtualProps","useVirtual","onMounted","onScopeDispose","toRef","convertToUnit","genericComponent","getCurrentInstance","getScrollParent","propsFactory","useRender","makeVVirtualScrollProps","items","type","Array","default","renderless","Boolean","VVirtualScroll","name","props","setup","_ref","slots","vm","dimensionStyles","calculateVisibleItems","containerRef","markerRef","handleScroll","handleScrollend","handleItemResize","scrollToIndex","paddingTop","paddingBottom","computedItems","handleListeners","add","method","value","document","documentElement","passive","vnode","el","children","map","item","key","height","index","slotProps","raw","_createVNode","class","style"],"sources":["../../../src/components/VVirtualScroll/VVirtualScroll.tsx"],"sourcesContent":["// Styles\nimport './VVirtualScroll.sass'\n\n// Components\nimport { VVirtualScrollItem } from './VVirtualScrollItem'\n\n// Composables\nimport { makeComponentProps } from '@/composables/component'\nimport { makeDimensionProps, useDimension } from '@/composables/dimensions'\nimport { useToggleScope } from '@/composables/toggleScope'\nimport { makeVirtualProps, useVirtual } from '@/composables/virtual'\n\n// Utilities\nimport { onMounted, onScopeDispose, toRef } from 'vue'\nimport {\n  convertToUnit,\n  genericComponent,\n  getCurrentInstance,\n  getScrollParent,\n  propsFactory,\n  useRender,\n} from '@/util'\n\n// Types\nimport type { PropType, Ref } from 'vue'\nimport type { GenericProps } from '@/util'\n\nexport interface VVirtualScrollSlot<T> {\n  item: T\n  index: number\n}\n\nexport const makeVVirtualScrollProps = propsFactory({\n  items: {\n    type: Array as PropType<readonly unknown[]>,\n    default: () => ([]),\n  },\n  renderless: Boolean,\n\n  ...makeVirtualProps(),\n  ...makeComponentProps(),\n  ...makeDimensionProps(),\n}, 'VVirtualScroll')\n\nexport const VVirtualScroll = genericComponent<new <T, Renderless extends boolean = false>(\n  props: {\n    items?: readonly T[]\n    renderless?: Renderless\n  },\n  slots: {\n    default: VVirtualScrollSlot<T> & (Renderless extends true ? {\n      itemRef: Ref<HTMLElement | undefined>\n    } : {})\n  }\n) => GenericProps<typeof props, typeof slots>>()({\n  name: 'VVirtualScroll',\n\n  props: makeVVirtualScrollProps(),\n\n  setup (props, { slots }) {\n    const vm = getCurrentInstance('VVirtualScroll')\n    const { dimensionStyles } = useDimension(props)\n    const {\n      calculateVisibleItems,\n      containerRef,\n      markerRef,\n      handleScroll,\n      handleScrollend,\n      handleItemResize,\n      scrollToIndex,\n      paddingTop,\n      paddingBottom,\n      computedItems,\n    } = useVirtual(props, toRef(props, 'items'))\n\n    useToggleScope(() => props.renderless, () => {\n      function handleListeners (add = false) {\n        const method = add ? 'addEventListener' : 'removeEventListener'\n\n        if (containerRef.value === document.documentElement) {\n          document[method]('scroll', handleScroll, { passive: true })\n          document[method]('scrollend', handleScrollend)\n        } else {\n          containerRef.value?.[method]('scroll', handleScroll, { passive: true })\n          containerRef.value?.[method]('scrollend', handleScrollend)\n        }\n      }\n\n      onMounted(() => {\n        containerRef.value = getScrollParent(vm.vnode.el as HTMLElement, true)\n        handleListeners(true)\n      })\n      onScopeDispose(handleListeners)\n    })\n\n    useRender(() => {\n      const children = computedItems.value.map(item => (\n        <VVirtualScrollItem\n          key={ item.key }\n          renderless={ props.renderless }\n          onUpdate:height={ height => handleItemResize(item.index, height) }\n        >\n          { slotProps => slots.default?.({ item: item.raw, index: item.index, ...slotProps }) }\n        </VVirtualScrollItem>\n      ))\n\n      return props.renderless ? (\n        <>\n          <div ref={ markerRef } class=\"v-virtual-scroll__spacer\" style={{ paddingTop: convertToUnit(paddingTop.value) }} />\n          { children }\n          <div class=\"v-virtual-scroll__spacer\" style={{ paddingBottom: convertToUnit(paddingBottom.value) }} />\n        </>\n      ) : (\n        <div\n          ref={ containerRef }\n          class={[\n            'v-virtual-scroll',\n            props.class,\n          ]}\n          onScrollPassive={ handleScroll }\n          onScrollend={ handleScrollend }\n          style={[\n            dimensionStyles.value,\n            props.style,\n          ]}\n        >\n          <div\n            ref={ markerRef }\n            class=\"v-virtual-scroll__container\"\n            style={{\n              paddingTop: convertToUnit(paddingTop.value),\n              paddingBottom: convertToUnit(paddingBottom.value),\n            }}\n          >\n            { children }\n          </div>\n        </div>\n      )\n    })\n\n    return {\n      calculateVisibleItems,\n      scrollToIndex,\n    }\n  },\n})\n\nexport type VVirtualScroll = InstanceType<typeof VVirtualScroll>\n"]},"metadata":{},"sourceType":"module"}