{"ast":null,"code":"// Utilities\nimport { getCurrentInstance } from \"./getCurrentInstance.js\"; // Types\n\nexport function injectSelf(key) {\n  var vm = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : getCurrentInstance('injectSelf');\n  var provides = vm.provides;\n\n  if (provides && key in provides) {\n    // TS doesn't allow symbol as index type\n    return provides[key];\n  }\n\n  return undefined;\n}","map":{"version":3,"mappings":"AAAA;AAAA,SACSA,kBADT,QAC2B,yBAD3B,C,CAGA;;AAIA,OAAO,SAASC,UAAT,CAAqBC,GAArB,EAA6F;AAAA,MAAvCC,EAAE,uEAAGH,kBAAkB,CAAC,YAAD,CAAgB;AAClG,MAAQI,QAAR,GAAqBD,EAArB,CAAQC,QAAR;;AAEA,MAAIA,QAAQ,IAAKF,GAAG,IAAwBE,QAA5C,EAAsD;AACpD;AACA,WAAOA,QAAQ,CAACF,GAAD,CAAf;AACF;;AACA,SAAOG,SAAP;AACF","names":["getCurrentInstance","injectSelf","key","vm","provides","undefined"],"sources":["../../src/util/injectSelf.ts"],"sourcesContent":["// Utilities\nimport { getCurrentInstance } from '@/util/getCurrentInstance'\n\n// Types\nimport type { ComponentInternalInstance, InjectionKey } from 'vue'\n\nexport function injectSelf<T>(key: InjectionKey<T> | string, vm?: ComponentInternalInstance): T | undefined\nexport function injectSelf (key: InjectionKey<any> | string, vm = getCurrentInstance('injectSelf')) {\n  const { provides } = vm\n\n  if (provides && (key as string | symbol) in provides) {\n    // TS doesn't allow symbol as index type\n    return provides[key as string]\n  }\n  return undefined\n}\n"]},"metadata":{},"sourceType":"module"}