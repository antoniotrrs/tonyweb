{"ast":null,"code":"import { createVNode as _createVNode, createTextVNode as _createTextVNode } from \"vue\"; // Components\n\nimport { VDataTableColumn } from \"./VDataTableColumn.js\";\nimport { VBtn } from \"../VBtn/index.js\";\nimport { VCheckboxBtn } from \"../VCheckbox/index.js\"; // Composables\n\nimport { useGroupBy } from \"./composables/group.js\";\nimport { useHeaders } from \"./composables/headers.js\";\nimport { useSelection } from \"./composables/select.js\"; // Utilities\n\nimport { computed } from 'vue';\nimport { genericComponent, propsFactory } from \"../../util/index.js\"; // Types\n\nexport const makeVDataTableGroupHeaderRowProps = propsFactory({\n  item: {\n    type: Object,\n    required: true\n  }\n}, 'VDataTableGroupHeaderRow');\nexport const VDataTableGroupHeaderRow = genericComponent()({\n  name: 'VDataTableGroupHeaderRow',\n  props: makeVDataTableGroupHeaderRowProps(),\n\n  setup(props, _ref) {\n    let {\n      slots\n    } = _ref;\n    const {\n      isGroupOpen,\n      toggleGroup,\n      extractRows\n    } = useGroupBy();\n    const {\n      isSelected,\n      isSomeSelected,\n      select\n    } = useSelection();\n    const {\n      columns\n    } = useHeaders();\n    const rows = computed(() => {\n      return extractRows([props.item]);\n    });\n    return () => _createVNode(\"tr\", {\n      \"class\": \"v-data-table-group-header-row\",\n      \"style\": {\n        '--v-data-table-group-header-row-depth': props.item.depth\n      }\n    }, [columns.value.map(column => {\n      if (column.key === 'data-table-group') {\n        const icon = isGroupOpen(props.item) ? '$expand' : '$next';\n\n        const onClick = () => toggleGroup(props.item);\n\n        return slots['data-table-group']?.({\n          item: props.item,\n          count: rows.value.length,\n          props: {\n            icon,\n            onClick\n          }\n        }) ?? _createVNode(VDataTableColumn, {\n          \"class\": \"v-data-table-group-header-row__column\"\n        }, {\n          default: () => [_createVNode(VBtn, {\n            \"size\": \"small\",\n            \"variant\": \"text\",\n            \"icon\": icon,\n            \"onClick\": onClick\n          }, null), _createVNode(\"span\", null, [props.item.value]), _createVNode(\"span\", null, [_createTextVNode(\"(\"), rows.value.length, _createTextVNode(\")\")])]\n        });\n      }\n\n      if (column.key === 'data-table-select') {\n        const modelValue = isSelected(rows.value);\n        const indeterminate = isSomeSelected(rows.value) && !modelValue;\n\n        const selectGroup = v => select(rows.value, v);\n\n        return slots['data-table-select']?.({\n          props: {\n            modelValue,\n            indeterminate,\n            'onUpdate:modelValue': selectGroup\n          }\n        }) ?? _createVNode(\"td\", null, [_createVNode(VCheckboxBtn, {\n          \"modelValue\": modelValue,\n          \"indeterminate\": indeterminate,\n          \"onUpdate:modelValue\": selectGroup\n        }, null)]);\n      }\n\n      return _createVNode(\"td\", null, null);\n    })]);\n  }\n\n});","map":{"version":3,"mappings":"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","names":["VDataTableColumn","VBtn","VCheckboxBtn","useGroupBy","useHeaders","useSelection","computed","genericComponent","propsFactory","makeVDataTableGroupHeaderRowProps","item","type","Object","required","VDataTableGroupHeaderRow","name","props","setup","_ref","slots","isGroupOpen","toggleGroup","extractRows","isSelected","isSomeSelected","select","columns","rows","depth","value","map","column","key","icon","onClick","count","length","_createVNode","default","_createTextVNode","modelValue","indeterminate","selectGroup","v"],"sources":["../../../src/components/VDataTable/VDataTableGroupHeaderRow.tsx"],"sourcesContent":["// Components\nimport { VDataTableColumn } from './VDataTableColumn'\nimport { VBtn } from '@/components/VBtn'\nimport { VCheckboxBtn } from '@/components/VCheckbox'\n\n// Composables\nimport { useGroupBy } from './composables/group'\nimport { useHeaders } from './composables/headers'\nimport { useSelection } from './composables/select'\n\n// Utilities\nimport { computed } from 'vue'\nimport { genericComponent, propsFactory } from '@/util'\n\n// Types\nimport type { PropType } from 'vue'\nimport type { Group } from './composables/group'\n\nexport type VDataTableGroupHeaderRowSlots = {\n  'data-table-group': { item: Group, count: number, props: Record<string, unknown> }\n  'data-table-select': { props: Record<string, unknown> }\n}\n\nexport const makeVDataTableGroupHeaderRowProps = propsFactory({\n  item: {\n    type: Object as PropType<Group>,\n    required: true,\n  },\n}, 'VDataTableGroupHeaderRow')\n\nexport const VDataTableGroupHeaderRow = genericComponent<VDataTableGroupHeaderRowSlots>()({\n  name: 'VDataTableGroupHeaderRow',\n\n  props: makeVDataTableGroupHeaderRowProps(),\n\n  setup (props, { slots }) {\n    const { isGroupOpen, toggleGroup, extractRows } = useGroupBy()\n    const { isSelected, isSomeSelected, select } = useSelection()\n    const { columns } = useHeaders()\n\n    const rows = computed(() => {\n      return extractRows([props.item])\n    })\n\n    return () => (\n      <tr\n        class=\"v-data-table-group-header-row\"\n        style={{\n          '--v-data-table-group-header-row-depth': props.item.depth,\n        }}\n      >\n        { columns.value.map(column => {\n          if (column.key === 'data-table-group') {\n            const icon = isGroupOpen(props.item) ? '$expand' : '$next'\n            const onClick = () => toggleGroup(props.item)\n\n            return slots['data-table-group']?.({ item: props.item, count: rows.value.length, props: { icon, onClick } }) ?? (\n              <VDataTableColumn class=\"v-data-table-group-header-row__column\">\n                <VBtn\n                  size=\"small\"\n                  variant=\"text\"\n                  icon={ icon }\n                  onClick={ onClick }\n                />\n                <span>{ props.item.value }</span>\n                <span>({ rows.value.length })</span>\n              </VDataTableColumn>\n            )\n          }\n\n          if (column.key === 'data-table-select') {\n            const modelValue = isSelected(rows.value)\n            const indeterminate = isSomeSelected(rows.value) && !modelValue\n            const selectGroup = (v: boolean) => select(rows.value, v)\n            return slots['data-table-select']?.({ props: { modelValue, indeterminate, 'onUpdate:modelValue': selectGroup } }) ?? (\n              <td>\n                <VCheckboxBtn\n                  modelValue={ modelValue }\n                  indeterminate={ indeterminate }\n                  onUpdate:modelValue={ selectGroup }\n                />\n              </td>\n            )\n          }\n\n          return <td />\n        })}\n      </tr>\n    )\n  },\n})\n"]},"metadata":{},"sourceType":"module"}