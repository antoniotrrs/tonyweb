{"ast":null,"code":"import _objectSpread from \"/Users/antoniotorres/Documents/tony/tonyweb/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport { mergeProps as _mergeProps, createVNode as _createVNode } from \"vue\"; // Styles\n\nimport \"./VBtnToggle.css\"; // Components\n\nimport { makeVBtnGroupProps, VBtnGroup } from \"../VBtnGroup/VBtnGroup.js\"; // Composables\n\nimport { makeGroupProps, useGroup } from \"../../composables/group.js\"; // Utilities\n\nimport { genericComponent, propsFactory, useRender } from \"../../util/index.js\"; // Types\n\nexport var VBtnToggleSymbol = Symbol.for('vuetify:v-btn-toggle');\nexport var makeVBtnToggleProps = propsFactory(_objectSpread(_objectSpread({}, makeVBtnGroupProps()), makeGroupProps()), 'VBtnToggle');\nexport var VBtnToggle = genericComponent()({\n  name: 'VBtnToggle',\n  props: makeVBtnToggleProps(),\n  emits: {\n    'update:modelValue': function updateModelValue(value) {\n      return true;\n    }\n  },\n  setup: function setup(props, _ref) {\n    var slots = _ref.slots;\n\n    var _useGroup = useGroup(props, VBtnToggleSymbol),\n        isSelected = _useGroup.isSelected,\n        next = _useGroup.next,\n        prev = _useGroup.prev,\n        select = _useGroup.select,\n        selected = _useGroup.selected;\n\n    useRender(function () {\n      var btnGroupProps = VBtnGroup.filterProps(props);\n      return _createVNode(VBtnGroup, _mergeProps({\n        \"class\": ['v-btn-toggle', props.class]\n      }, btnGroupProps, {\n        \"style\": props.style\n      }), {\n        default: function _default() {\n          var _slots$default;\n\n          return [(_slots$default = slots.default) === null || _slots$default === void 0 ? void 0 : _slots$default.call(slots, {\n            isSelected: isSelected,\n            next: next,\n            prev: prev,\n            select: select,\n            selected: selected\n          })];\n        }\n      });\n    });\n    return {\n      next: next,\n      prev: prev,\n      select: select\n    };\n  }\n});","map":{"version":3,"mappings":";;;;8EAAA;;AACA,0B,CAEA;;AAAA,SACSA,kBADT,EAC6BC,SAD7B,QACsC,2BADtC,C,CAGA;;AAAA,SACSC,cADT,EACyBC,QADzB,QACiC,4BADjC,C,CAGA;;AAAA,SACSC,gBADT,EAC2BC,YAD3B,EACyCC,SADzC,QACkD,qBADlD,C,CAGA;;AAQA,OAAO,IAAMC,gBAA4C,GAAGC,MAAM,CAACC,GAAPD,CAAW,sBAAXA,CAArD;AAMP,OAAO,IAAME,mBAAmB,GAAGL,YAAY,iCAC1CL,kBAAkB,EADwB,GAE1CE,cAAc,EAF4B,GAG5C,YAH4C,CAAxC;AAKP,OAAO,IAAMS,UAAU,GAAGP,gBAAgB,GAMO;AAC/CQ,MAAI,EAAE,YADyC;AAG/CC,OAAK,EAAEH,mBAAmB,EAHqB;AAK/CI,OAAK,EAAE;AACL,yBAAsBC,+BAAU;AAAA,aAAK,IAAL;AAAA;AAD3B,GALwC;AAS/CC,OAT+C,iBASxCH,KATwC,EASnCI,IATmC,EAStB;AAAA,QAATC,KAAS,GAAFD,IAAE,CAATC,KAAS;;AACvB,oBAAqDf,QAAQ,CAACU,KAAD,EAAQN,gBAAR,CAA7D;AAAA,QAAQY,UAAR,aAAQA,UAAR;AAAA,QAAoBC,IAApB,aAAoBA,IAApB;AAAA,QAA0BC,IAA1B,aAA0BA,IAA1B;AAAA,QAAgCC,MAAhC,aAAgCA,MAAhC;AAAA,QAAwCC,QAAxC,aAAwCA,QAAxC;;AAEAjB,aAAS,CAAC,YAAM;AACd,UAAMkB,aAAa,GAAGvB,SAAS,CAACwB,WAAVxB,CAAsBY,KAAtBZ,CAAtB;AAEA;AAAA,iBAEW,CACL,cADK,EAELY,KAAK,CAACa,KAFD;AAFX,SAMSF,aANT,EAMsB;AAAA,iBACVX,KAAK,CAACc;AADI,OANtB,GAOuB;AAAAC;AAAAA;;AAAAA,oCAEjBV,KAAK,CAACU,OAFW,mDAEjBV,yBAAK,EAAW;AAChBC,sBAAU,EAAVA,UADgB;AAEhBC,gBAAI,EAAJA,IAFgB;AAGhBC,gBAAI,EAAJA,IAHgB;AAIhBC,kBAAM,EAANA,MAJgB;AAKhBC;AALgB,WAAX,CAFY;AAAAK;AAAA,OAPvB;AAkBD,KArBQ,CAATtB;AAuBA,WAAO;AACLc,UAAI,EAAJA,IADK;AAELC,UAAI,EAAJA,IAFK;AAGLC;AAHK,KAAP;AAKF;AAxC+C,CANP,CAAnC","names":["makeVBtnGroupProps","VBtnGroup","makeGroupProps","useGroup","genericComponent","propsFactory","useRender","VBtnToggleSymbol","Symbol","for","makeVBtnToggleProps","VBtnToggle","name","props","emits","value","setup","_ref","slots","isSelected","next","prev","select","selected","btnGroupProps","filterProps","class","style","default"],"sources":["../../../src/components/VBtnToggle/VBtnToggle.tsx"],"sourcesContent":["// Styles\nimport './VBtnToggle.sass'\n\n// Components\nimport { makeVBtnGroupProps, VBtnGroup } from '@/components/VBtnGroup/VBtnGroup'\n\n// Composables\nimport { makeGroupProps, useGroup } from '@/composables/group'\n\n// Utilities\nimport { genericComponent, propsFactory, useRender } from '@/util'\n\n// Types\nimport type { InjectionKey } from 'vue'\nimport type { GroupProvide } from '@/composables/group'\nimport type { GenericProps } from '@/util'\n\nexport type BtnToggleSlotProps = 'isSelected' | 'select' | 'selected' | 'next' | 'prev'\nexport interface DefaultBtnToggleSlot extends Pick<GroupProvide, BtnToggleSlotProps> {}\n\nexport const VBtnToggleSymbol: InjectionKey<GroupProvide> = Symbol.for('vuetify:v-btn-toggle')\n\ntype VBtnToggleSlots = {\n  default: DefaultBtnToggleSlot\n}\n\nexport const makeVBtnToggleProps = propsFactory({\n  ...makeVBtnGroupProps(),\n  ...makeGroupProps(),\n}, 'VBtnToggle')\n\nexport const VBtnToggle = genericComponent<new <T>(\n  props: {\n    modelValue?: T\n    'onUpdate:modelValue'?: (value: T) => void\n  },\n  slots: VBtnToggleSlots,\n) => GenericProps<typeof props, typeof slots>>()({\n  name: 'VBtnToggle',\n\n  props: makeVBtnToggleProps(),\n\n  emits: {\n    'update:modelValue': (value: any) => true,\n  },\n\n  setup (props, { slots }) {\n    const { isSelected, next, prev, select, selected } = useGroup(props, VBtnToggleSymbol)\n\n    useRender(() => {\n      const btnGroupProps = VBtnGroup.filterProps(props)\n\n      return (\n        <VBtnGroup\n          class={[\n            'v-btn-toggle',\n            props.class,\n          ]}\n          { ...btnGroupProps }\n          style={ props.style }\n        >\n          { slots.default?.({\n            isSelected,\n            next,\n            prev,\n            select,\n            selected,\n          })}\n        </VBtnGroup>\n      )\n    })\n\n    return {\n      next,\n      prev,\n      select,\n    }\n  },\n})\n\nexport type VBtnToggle = InstanceType<typeof VBtnToggle>\n"]},"metadata":{},"sourceType":"module"}