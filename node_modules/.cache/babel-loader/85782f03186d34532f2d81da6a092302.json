{"ast":null,"code":"import _defineProperty from \"/Users/antoniotorres/Documents/tony/tonyweb/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _objectSpread from \"/Users/antoniotorres/Documents/tony/tonyweb/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.set.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport { createVNode as _createVNode } from \"vue\"; // Styles\n\nimport \"./VSelectionControlGroup.css\"; // Composables\n\nimport { makeComponentProps } from \"../../composables/component.js\";\nimport { provideDefaults } from \"../../composables/defaults.js\";\nimport { makeDensityProps } from \"../../composables/density.js\";\nimport { IconValue } from \"../../composables/icons.js\";\nimport { useProxiedModel } from \"../../composables/proxiedModel.js\";\nimport { makeThemeProps } from \"../../composables/theme.js\"; // Utilities\n\nimport { computed, onScopeDispose, provide, toRef, useId } from 'vue';\nimport { deepEqual, genericComponent, propsFactory, useRender } from \"../../util/index.js\"; // Types\n\nexport var VSelectionControlGroupSymbol = Symbol.for('vuetify:selection-control-group');\nexport var makeSelectionControlGroupProps = propsFactory(_objectSpread(_objectSpread(_objectSpread({\n  color: String,\n  disabled: {\n    type: Boolean,\n    default: null\n  },\n  defaultsTarget: String,\n  error: Boolean,\n  id: String,\n  inline: Boolean,\n  falseIcon: IconValue,\n  trueIcon: IconValue,\n  ripple: {\n    type: [Boolean, Object],\n    default: true\n  },\n  multiple: {\n    type: Boolean,\n    default: null\n  },\n  name: String,\n  readonly: {\n    type: Boolean,\n    default: null\n  },\n  modelValue: null,\n  type: String,\n  valueComparator: {\n    type: Function,\n    default: deepEqual\n  }\n}, makeComponentProps()), makeDensityProps()), makeThemeProps()), 'SelectionControlGroup');\nexport var makeVSelectionControlGroupProps = propsFactory(_objectSpread({}, makeSelectionControlGroupProps({\n  defaultsTarget: 'VSelectionControl'\n})), 'VSelectionControlGroup');\nexport var VSelectionControlGroup = genericComponent()({\n  name: 'VSelectionControlGroup',\n  props: makeVSelectionControlGroupProps(),\n  emits: {\n    'update:modelValue': function updateModelValue(value) {\n      return true;\n    }\n  },\n  setup: function setup(props, _ref) {\n    var slots = _ref.slots;\n    var modelValue = useProxiedModel(props, 'modelValue');\n    var uid = useId();\n    var id = computed(function () {\n      return props.id || \"v-selection-control-group-\".concat(uid);\n    });\n    var name = computed(function () {\n      return props.name || id.value;\n    });\n    var updateHandlers = new Set();\n    provide(VSelectionControlGroupSymbol, {\n      modelValue: modelValue,\n      forceUpdate: function forceUpdate() {\n        updateHandlers.forEach(function (fn) {\n          return fn();\n        });\n      },\n      onForceUpdate: function onForceUpdate(cb) {\n        updateHandlers.add(cb);\n        onScopeDispose(function () {\n          updateHandlers.delete(cb);\n        });\n      }\n    });\n    provideDefaults(_defineProperty({}, props.defaultsTarget, {\n      color: toRef(props, 'color'),\n      disabled: toRef(props, 'disabled'),\n      density: toRef(props, 'density'),\n      error: toRef(props, 'error'),\n      inline: toRef(props, 'inline'),\n      modelValue: modelValue,\n      multiple: computed(function () {\n        return !!props.multiple || props.multiple == null && Array.isArray(modelValue.value);\n      }),\n      name: name,\n      falseIcon: toRef(props, 'falseIcon'),\n      trueIcon: toRef(props, 'trueIcon'),\n      readonly: toRef(props, 'readonly'),\n      ripple: toRef(props, 'ripple'),\n      type: toRef(props, 'type'),\n      valueComparator: toRef(props, 'valueComparator')\n    }));\n    useRender(function () {\n      var _slots$default;\n\n      return _createVNode(\"div\", {\n        \"class\": ['v-selection-control-group', {\n          'v-selection-control-group--inline': props.inline\n        }, props.class],\n        \"style\": props.style,\n        \"role\": props.type === 'radio' ? 'radiogroup' : undefined\n      }, [(_slots$default = slots.default) === null || _slots$default === void 0 ? void 0 : _slots$default.call(slots)]);\n    });\n    return {};\n  }\n});","map":{"version":3,"mappings":";;;;;;;;;;mDAAA;;AACA,sC,CAEA;;AAAA,SACSA,kBADT,QAC2B,gCAD3B;AAC2B,SAClBC,eADkB,QACH,+BADG;AACH,SACfC,gBADe,QACC,8BADD;AACC,SAChBC,SADgB,QACP,4BADO;AACP,SACTC,eADS,QACM,mCADN;AACM,SACfC,cADe,QACD,4BADC,C,CAGxB;;AACA,SAASC,QAAT,EAAmBC,cAAnB,EAAmCC,OAAnC,EAA4CC,KAA5C,EAAmDC,KAAnD,QAAgE,KAAhE;AAAqE,SAC5DC,SAD4D,EACjDC,gBADiD,EAC/BC,YAD+B,EACjBC,SADiB,QACR,qBADQ,C,CAGrE;;AAWA,OAAO,IAAMC,4BAAkE,GAAGC,MAAM,CAACC,GAAPD,CAAW,iCAAXA,CAA3E;AAEP,OAAO,IAAME,8BAA8B,GAAGL,YAAY;AACxDM,OAAK,EAAEC,MADiD;AAExDC,UAAQ,EAAE;AACRC,QAAI,EAAEC,OADE;AAERC,WAAO,EAAE;AAFD,GAF8C;AAMxDC,gBAAc,EAAEL,MANwC;AAOxDM,OAAK,EAAEH,OAPiD;AAQxDI,IAAE,EAAEP,MARoD;AASxDQ,QAAM,EAAEL,OATgD;AAUxDM,WAAS,EAAE1B,SAV6C;AAWxD2B,UAAQ,EAAE3B,SAX8C;AAYxD4B,QAAM,EAAE;AACNT,QAAI,EAAE,CAACC,OAAD,EAAUS,MAAV,CADA;AAENR,WAAO,EAAE;AAFH,GAZgD;AAgBxDS,UAAQ,EAAE;AACRX,QAAI,EAAEC,OADE;AAERC,WAAO,EAAE;AAFD,GAhB8C;AAoBxDU,MAAI,EAAEd,MApBkD;AAqBxDe,UAAQ,EAAE;AACRb,QAAI,EAAEC,OADE;AAERC,WAAO,EAAE;AAFD,GArB8C;AAyBxDY,YAAU,EAAE,IAzB4C;AA0BxDd,MAAI,EAAEF,MA1BkD;AA2BxDiB,iBAAe,EAAE;AACff,QAAI,EAAEgB,QADS;AAEfd,WAAO,EAAEb;AAFM;AA3BuC,GAgCrDX,kBAAkB,EAhCmC,GAiCrDE,gBAAgB,EAjCqC,GAkCrDG,cAAc,EAlCuC,GAmCvD,uBAnCuD,CAAnD;AAqCP,OAAO,IAAMkC,+BAA+B,GAAG1B,YAAY,mBACtDK,8BAA8B,CAAC;AAChCO,gBAAc,EAAE;AADgB,CAAD,CADwB,GAIxD,wBAJwD,CAApD;AAMP,OAAO,IAAMe,sBAAsB,GAAG5B,gBAAgB,GAML;AAC/CsB,MAAI,EAAE,wBADyC;AAG/CO,OAAK,EAAEF,+BAA+B,EAHS;AAK/CG,OAAK,EAAE;AACL,yBAAsBC,+BAAU;AAAA,aAAK,IAAL;AAAA;AAD3B,GALwC;AAS/CC,OAT+C,iBASxCH,KATwC,EASnCI,IATmC,EAStB;AAAA,QAATC,KAAS,GAAFD,IAAE,CAATC,KAAS;AACvB,QAAMV,UAAU,GAAGhC,eAAe,CAACqC,KAAD,EAAQ,YAAR,CAAlC;AACA,QAAMM,GAAG,GAAGrC,KAAK,EAAjB;AACA,QAAMiB,EAAE,GAAGrB,QAAQ,CAAC;AAAA,aAAMmC,KAAK,CAACd,EAANc,wCAAyCM,GAAzCN,CAAN;AAAA,KAAD,CAAnB;AACA,QAAMP,IAAI,GAAG5B,QAAQ,CAAC;AAAA,aAAMmC,KAAK,CAACP,IAANO,IAAcd,EAAE,CAACgB,KAAvB;AAAA,KAAD,CAArB;AAEA,QAAMK,cAAc,GAAG,IAAIC,GAAJ,EAAvB;AACAzC,WAAO,CAACO,4BAAD,EAA+B;AACpCqB,gBAAU,EAAVA,UADoC;AAEpCc,iBAAW,EAAEA,uBAAM;AACjBF,sBAAc,CAACG,OAAfH,CAAuBI,YAAE;AAAA,iBAAIA,EAAE,EAAN;AAAA,SAAzBJ;AACD,OAJmC;AAKpCK,mBAAa,EAAEC,yBAAE,EAAI;AACnBN,sBAAc,CAACO,GAAfP,CAAmBM,EAAnBN;AACAzC,sBAAc,CAAC,YAAM;AACnByC,wBAAc,CAACQ,MAAfR,CAAsBM,EAAtBN;AACD,SAFa,CAAdzC;AAGF;AAVoC,KAA/B,CAAPC;AAaAP,mBAAe,qBACZwC,KAAK,CAAChB,cADM,EACW;AACtBN,WAAK,EAAEV,KAAK,CAACgC,KAAD,EAAQ,OAAR,CADU;AAEtBpB,cAAQ,EAAEZ,KAAK,CAACgC,KAAD,EAAQ,UAAR,CAFO;AAGtBgB,aAAO,EAAEhD,KAAK,CAACgC,KAAD,EAAQ,SAAR,CAHQ;AAItBf,WAAK,EAAEjB,KAAK,CAACgC,KAAD,EAAQ,OAAR,CAJU;AAKtBb,YAAM,EAAEnB,KAAK,CAACgC,KAAD,EAAQ,QAAR,CALS;AAMtBL,gBAAU,EAAVA,UANsB;AAOtBH,cAAQ,EAAE3B,QAAQ,CAAC;AAAA,eAAM,CAAC,CAACmC,KAAK,CAACR,QAAR,IAAqBQ,KAAK,CAACR,QAANQ,IAAkB,IAAlBA,IAA0BiB,KAAK,CAACC,OAAND,CAActB,UAAU,CAACO,KAAzBe,CAArD;AAAA,OAAD,CAPI;AAQtBxB,UAAI,EAAJA,IARsB;AAStBL,eAAS,EAAEpB,KAAK,CAACgC,KAAD,EAAQ,WAAR,CATM;AAUtBX,cAAQ,EAAErB,KAAK,CAACgC,KAAD,EAAQ,UAAR,CAVO;AAWtBN,cAAQ,EAAE1B,KAAK,CAACgC,KAAD,EAAQ,UAAR,CAXO;AAYtBV,YAAM,EAAEtB,KAAK,CAACgC,KAAD,EAAQ,QAAR,CAZS;AAatBnB,UAAI,EAAEb,KAAK,CAACgC,KAAD,EAAQ,MAAR,CAbW;AActBJ,qBAAe,EAAE5B,KAAK,CAACgC,KAAD,EAAQ,iBAAR;AAdA,KADX,EAAfxC;AAmBAa,aAAS,CAAC;AAAA;;AAAA;AAAA,iBAEC,CACL,2BADK,EAEL;AAAE,+CAAqC2B,KAAK,CAACb;AAA7C,SAFK,EAGLa,KAAK,CAACmB,KAHD,CAFD;AAML,iBACOnB,KAAK,CAACoB,KAPR;AAOa,gBACZpB,KAAK,CAACnB,IAANmB,KAAe,OAAfA,GAAyB,YAAzBA,GAAwCqB;AARzC,SAQkD,mBAEtDhB,KAAK,CAACtB,OAFgD,mDAEtDsB,yBAAK,CAFiD,CARlD;AAAA,KAAD,CAAThC;AAcA,WAAO,EAAP;AACF;AA/D+C,CANK,CAA/C","names":["makeComponentProps","provideDefaults","makeDensityProps","IconValue","useProxiedModel","makeThemeProps","computed","onScopeDispose","provide","toRef","useId","deepEqual","genericComponent","propsFactory","useRender","VSelectionControlGroupSymbol","Symbol","for","makeSelectionControlGroupProps","color","String","disabled","type","Boolean","default","defaultsTarget","error","id","inline","falseIcon","trueIcon","ripple","Object","multiple","name","readonly","modelValue","valueComparator","Function","makeVSelectionControlGroupProps","VSelectionControlGroup","props","emits","value","setup","_ref","slots","uid","updateHandlers","Set","forceUpdate","forEach","fn","onForceUpdate","cb","add","delete","density","Array","isArray","class","style","undefined"],"sources":["../../../src/components/VSelectionControlGroup/VSelectionControlGroup.tsx"],"sourcesContent":["// Styles\nimport './VSelectionControlGroup.sass'\n\n// Composables\nimport { makeComponentProps } from '@/composables/component'\nimport { provideDefaults } from '@/composables/defaults'\nimport { makeDensityProps } from '@/composables/density'\nimport { IconValue } from '@/composables/icons'\nimport { useProxiedModel } from '@/composables/proxiedModel'\nimport { makeThemeProps } from '@/composables/theme'\n\n// Utilities\nimport { computed, onScopeDispose, provide, toRef, useId } from 'vue'\nimport { deepEqual, genericComponent, propsFactory, useRender } from '@/util'\n\n// Types\nimport type { InjectionKey, PropType, Ref } from 'vue'\nimport type { RippleDirectiveBinding } from '@/directives/ripple'\nimport type { GenericProps } from '@/util'\n\nexport interface VSelectionGroupContext {\n  modelValue: Ref<any>\n  forceUpdate: () => void\n  onForceUpdate: (fn: () => void) => void\n}\n\nexport const VSelectionControlGroupSymbol: InjectionKey<VSelectionGroupContext> = Symbol.for('vuetify:selection-control-group')\n\nexport const makeSelectionControlGroupProps = propsFactory({\n  color: String,\n  disabled: {\n    type: Boolean as PropType<boolean | null>,\n    default: null,\n  },\n  defaultsTarget: String,\n  error: Boolean,\n  id: String,\n  inline: Boolean,\n  falseIcon: IconValue,\n  trueIcon: IconValue,\n  ripple: {\n    type: [Boolean, Object] as PropType<RippleDirectiveBinding['value']>,\n    default: true,\n  },\n  multiple: {\n    type: Boolean as PropType<boolean | null>,\n    default: null,\n  },\n  name: String,\n  readonly: {\n    type: Boolean as PropType<boolean | null>,\n    default: null,\n  },\n  modelValue: null,\n  type: String,\n  valueComparator: {\n    type: Function as PropType<typeof deepEqual>,\n    default: deepEqual,\n  },\n\n  ...makeComponentProps(),\n  ...makeDensityProps(),\n  ...makeThemeProps(),\n}, 'SelectionControlGroup')\n\nexport const makeVSelectionControlGroupProps = propsFactory({\n  ...makeSelectionControlGroupProps({\n    defaultsTarget: 'VSelectionControl',\n  }),\n}, 'VSelectionControlGroup')\n\nexport const VSelectionControlGroup = genericComponent<new <T>(\n  props: {\n    modelValue?: T\n    'onUpdate:modelValue'?: (value: T) => void\n  },\n  slots: { default: never },\n) => GenericProps<typeof props, typeof slots>>()({\n  name: 'VSelectionControlGroup',\n\n  props: makeVSelectionControlGroupProps(),\n\n  emits: {\n    'update:modelValue': (value: any) => true,\n  },\n\n  setup (props, { slots }) {\n    const modelValue = useProxiedModel(props, 'modelValue')\n    const uid = useId()\n    const id = computed(() => props.id || `v-selection-control-group-${uid}`)\n    const name = computed(() => props.name || id.value)\n\n    const updateHandlers = new Set<() => void>()\n    provide(VSelectionControlGroupSymbol, {\n      modelValue,\n      forceUpdate: () => {\n        updateHandlers.forEach(fn => fn())\n      },\n      onForceUpdate: cb => {\n        updateHandlers.add(cb)\n        onScopeDispose(() => {\n          updateHandlers.delete(cb)\n        })\n      },\n    })\n\n    provideDefaults({\n      [props.defaultsTarget]: {\n        color: toRef(props, 'color'),\n        disabled: toRef(props, 'disabled'),\n        density: toRef(props, 'density'),\n        error: toRef(props, 'error'),\n        inline: toRef(props, 'inline'),\n        modelValue,\n        multiple: computed(() => !!props.multiple || (props.multiple == null && Array.isArray(modelValue.value))),\n        name,\n        falseIcon: toRef(props, 'falseIcon'),\n        trueIcon: toRef(props, 'trueIcon'),\n        readonly: toRef(props, 'readonly'),\n        ripple: toRef(props, 'ripple'),\n        type: toRef(props, 'type'),\n        valueComparator: toRef(props, 'valueComparator'),\n      },\n    })\n\n    useRender(() => (\n      <div\n        class={[\n          'v-selection-control-group',\n          { 'v-selection-control-group--inline': props.inline },\n          props.class,\n        ]}\n        style={ props.style }\n        role={ props.type === 'radio' ? 'radiogroup' : undefined }\n      >\n        { slots.default?.() }\n      </div>\n    ))\n\n    return {}\n  },\n})\n\nexport type VSelectionControlGroup = InstanceType<typeof VSelectionControlGroup>\n"]},"metadata":{},"sourceType":"module"}