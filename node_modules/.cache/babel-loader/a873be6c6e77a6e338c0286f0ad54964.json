{"ast":null,"code":"import _objectSpread from \"/Users/antoniotorres/Documents/tony/tonyweb/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.string.fixed.js\";\nimport { createVNode as _createVNode, Fragment as _Fragment, mergeProps as _mergeProps } from \"vue\"; // Components\n\nimport { VDataTableColumn } from \"./VDataTableColumn.js\";\nimport { VBtn } from \"../VBtn/index.js\";\nimport { VCheckboxBtn } from \"../VCheckbox/index.js\"; // Composables\n\nimport { useExpanded } from \"./composables/expand.js\";\nimport { useHeaders } from \"./composables/headers.js\";\nimport { useSelection } from \"./composables/select.js\";\nimport { useSort } from \"./composables/sort.js\";\nimport { makeDisplayProps, useDisplay } from \"../../composables/display.js\"; // Utilities\n\nimport { toDisplayString, withModifiers } from 'vue';\nimport { EventProp, genericComponent, getObjectValueByPath, propsFactory, useRender } from \"../../util/index.js\"; // Types\n\nexport var makeVDataTableRowProps = propsFactory(_objectSpread({\n  index: Number,\n  item: Object,\n  cellProps: [Object, Function],\n  onClick: EventProp(),\n  onContextmenu: EventProp(),\n  onDblclick: EventProp()\n}, makeDisplayProps()), 'VDataTableRow');\nexport var VDataTableRow = genericComponent()({\n  name: 'VDataTableRow',\n  props: makeVDataTableRowProps(),\n  setup: function setup(props, _ref) {\n    var slots = _ref.slots;\n\n    var _useDisplay = useDisplay(props, 'v-data-table__tr'),\n        displayClasses = _useDisplay.displayClasses,\n        mobile = _useDisplay.mobile;\n\n    var _useSelection = useSelection(),\n        isSelected = _useSelection.isSelected,\n        toggleSelect = _useSelection.toggleSelect,\n        someSelected = _useSelection.someSelected,\n        allSelected = _useSelection.allSelected,\n        selectAll = _useSelection.selectAll;\n\n    var _useExpanded = useExpanded(),\n        isExpanded = _useExpanded.isExpanded,\n        toggleExpand = _useExpanded.toggleExpand;\n\n    var _useSort = useSort(),\n        toggleSort = _useSort.toggleSort,\n        sortBy = _useSort.sortBy,\n        isSorted = _useSort.isSorted;\n\n    var _useHeaders = useHeaders(),\n        columns = _useHeaders.columns;\n\n    useRender(function () {\n      return _createVNode(\"tr\", {\n        \"class\": ['v-data-table__tr', {\n          'v-data-table__tr--clickable': !!(props.onClick || props.onContextmenu || props.onDblclick)\n        }, displayClasses.value],\n        \"onClick\": props.onClick,\n        \"onContextmenu\": props.onContextmenu,\n        \"onDblclick\": props.onDblclick\n      }, [props.item && columns.value.map(function (column, i) {\n        var item = props.item;\n        var slotName = \"item.\".concat(column.key);\n        var headerSlotName = \"header.\".concat(column.key);\n        var slotProps = {\n          index: props.index,\n          item: item.raw,\n          internalItem: item,\n          value: getObjectValueByPath(item.columns, column.key),\n          column: column,\n          isSelected: isSelected,\n          toggleSelect: toggleSelect,\n          isExpanded: isExpanded,\n          toggleExpand: toggleExpand\n        };\n        var columnSlotProps = {\n          column: column,\n          selectAll: selectAll,\n          isSorted: isSorted,\n          toggleSort: toggleSort,\n          sortBy: sortBy.value,\n          someSelected: someSelected.value,\n          allSelected: allSelected.value,\n          getSortIcon: function getSortIcon() {\n            return '';\n          }\n        };\n        var cellProps = typeof props.cellProps === 'function' ? props.cellProps({\n          index: slotProps.index,\n          item: slotProps.item,\n          internalItem: slotProps.internalItem,\n          value: slotProps.value,\n          column: column\n        }) : props.cellProps;\n        var columnCellProps = typeof column.cellProps === 'function' ? column.cellProps({\n          index: slotProps.index,\n          item: slotProps.item,\n          internalItem: slotProps.internalItem,\n          value: slotProps.value\n        }) : column.cellProps;\n        return _createVNode(VDataTableColumn, _mergeProps({\n          \"align\": column.align,\n          \"class\": {\n            'v-data-table__td--expanded-row': column.key === 'data-table-expand',\n            'v-data-table__td--select-row': column.key === 'data-table-select'\n          },\n          \"fixed\": column.fixed,\n          \"fixedOffset\": column.fixedOffset,\n          \"lastFixed\": column.lastFixed,\n          \"maxWidth\": !mobile.value ? column.maxWidth : undefined,\n          \"noPadding\": column.key === 'data-table-select' || column.key === 'data-table-expand',\n          \"nowrap\": column.nowrap,\n          \"width\": !mobile.value ? column.width : undefined\n        }, cellProps, columnCellProps), {\n          default: function _default() {\n            var _slots$headerSlotName, _slots$headerSlotName2, _slots$slotName, _slots$slotName2;\n\n            if (column.key === 'data-table-select') {\n              var _slots$itemDataTabl, _slots$itemDataTabl2;\n\n              return (_slots$itemDataTabl = (_slots$itemDataTabl2 = slots['item.data-table-select']) === null || _slots$itemDataTabl2 === void 0 ? void 0 : _slots$itemDataTabl2.call(slots, _objectSpread(_objectSpread({}, slotProps), {}, {\n                props: {\n                  disabled: !item.selectable,\n                  modelValue: isSelected([item]),\n                  onClick: withModifiers(function () {\n                    return toggleSelect(item);\n                  }, ['stop'])\n                }\n              }))) !== null && _slots$itemDataTabl !== void 0 ? _slots$itemDataTabl : _createVNode(VCheckboxBtn, {\n                \"disabled\": !item.selectable,\n                \"modelValue\": isSelected([item]),\n                \"onClick\": withModifiers(function (event) {\n                  return toggleSelect(item, props.index, event);\n                }, ['stop'])\n              }, null);\n            }\n\n            if (column.key === 'data-table-expand') {\n              var _slots$itemDataTabl3, _slots$itemDataTabl4;\n\n              return (_slots$itemDataTabl3 = (_slots$itemDataTabl4 = slots['item.data-table-expand']) === null || _slots$itemDataTabl4 === void 0 ? void 0 : _slots$itemDataTabl4.call(slots, _objectSpread(_objectSpread({}, slotProps), {}, {\n                props: {\n                  icon: isExpanded(item) ? '$collapse' : '$expand',\n                  size: 'small',\n                  variant: 'text',\n                  onClick: withModifiers(function () {\n                    return toggleExpand(item);\n                  }, ['stop'])\n                }\n              }))) !== null && _slots$itemDataTabl3 !== void 0 ? _slots$itemDataTabl3 : _createVNode(VBtn, {\n                \"icon\": isExpanded(item) ? '$collapse' : '$expand',\n                \"size\": \"small\",\n                \"variant\": \"text\",\n                \"onClick\": withModifiers(function () {\n                  return toggleExpand(item);\n                }, ['stop'])\n              }, null);\n            }\n\n            if (slots[slotName] && !mobile.value) return slots[slotName](slotProps);\n            var displayValue = toDisplayString(slotProps.value);\n            return !mobile.value ? displayValue : _createVNode(_Fragment, null, [_createVNode(\"div\", {\n              \"class\": \"v-data-table__td-title\"\n            }, [(_slots$headerSlotName = (_slots$headerSlotName2 = slots[headerSlotName]) === null || _slots$headerSlotName2 === void 0 ? void 0 : _slots$headerSlotName2.call(slots, columnSlotProps)) !== null && _slots$headerSlotName !== void 0 ? _slots$headerSlotName : column.title]), _createVNode(\"div\", {\n              \"class\": \"v-data-table__td-value\"\n            }, [(_slots$slotName = (_slots$slotName2 = slots[slotName]) === null || _slots$slotName2 === void 0 ? void 0 : _slots$slotName2.call(slots, slotProps)) !== null && _slots$slotName !== void 0 ? _slots$slotName : displayValue])]);\n          }\n        });\n      })]);\n    });\n  }\n});","map":{"version":3,"mappings":"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","names":["VDataTableColumn","VBtn","VCheckboxBtn","useExpanded","useHeaders","useSelection","useSort","makeDisplayProps","useDisplay","toDisplayString","withModifiers","EventProp","genericComponent","getObjectValueByPath","propsFactory","useRender","makeVDataTableRowProps","index","Number","item","Object","cellProps","Function","onClick","onContextmenu","onDblclick","VDataTableRow","name","props","setup","_ref","slots","displayClasses","mobile","isSelected","toggleSelect","someSelected","allSelected","selectAll","isExpanded","toggleExpand","toggleSort","sortBy","isSorted","columns","value","map","column","i","slotName","key","headerSlotName","slotProps","raw","internalItem","columnSlotProps","getSortIcon","columnCellProps","align","fixed","fixedOffset","lastFixed","maxWidth","undefined","nowrap","width","default","disabled","selectable","modelValue","_createVNode","event","icon","size","variant","displayValue","title"],"sources":["../../../src/components/VDataTable/VDataTableRow.tsx"],"sourcesContent":["// Components\nimport { VDataTableColumn } from './VDataTableColumn'\nimport { VBtn } from '@/components/VBtn'\nimport { VCheckboxBtn } from '@/components/VCheckbox'\n\n// Composables\nimport { useExpanded } from './composables/expand'\nimport { useHeaders } from './composables/headers'\nimport { useSelection } from './composables/select'\nimport { useSort } from './composables/sort'\nimport { makeDisplayProps, useDisplay } from '@/composables/display'\n\n// Utilities\nimport { toDisplayString, withModifiers } from 'vue'\nimport { EventProp, genericComponent, getObjectValueByPath, propsFactory, useRender } from '@/util'\n\n// Types\nimport type { PropType } from 'vue'\nimport type { CellProps, DataTableItem, ItemKeySlot } from './types'\nimport type { VDataTableHeaderCellColumnSlotProps } from './VDataTableHeaders'\nimport type { GenericProps } from '@/util'\n\nexport type VDataTableItemCellColumnSlotProps<T> = Omit<ItemKeySlot<T>, 'value'> & {\n  props: Record<string, unknown>\n}\n\nexport type VDataTableRowSlots<T> = {\n  'item.data-table-select': VDataTableItemCellColumnSlotProps<T>\n  'item.data-table-expand': VDataTableItemCellColumnSlotProps<T>\n  'header.data-table-select': VDataTableHeaderCellColumnSlotProps\n  'header.data-table-expand': VDataTableHeaderCellColumnSlotProps\n} & {\n  [key: `item.${string}`]: ItemKeySlot<T>\n  [key: `header.${string}`]: VDataTableHeaderCellColumnSlotProps\n}\n\nexport const makeVDataTableRowProps = propsFactory({\n  index: Number,\n  item: Object as PropType<DataTableItem>,\n  cellProps: [Object, Function] as PropType<CellProps<any>>,\n  onClick: EventProp<[MouseEvent]>(),\n  onContextmenu: EventProp<[MouseEvent]>(),\n  onDblclick: EventProp<[MouseEvent]>(),\n\n  ...makeDisplayProps(),\n}, 'VDataTableRow')\n\nexport const VDataTableRow = genericComponent<new <T>(\n  props: {\n    item?: DataTableItem<T>\n    cellProps?: CellProps<T>\n  },\n  slots: VDataTableRowSlots<T>,\n) => GenericProps<typeof props, typeof slots>>()({\n  name: 'VDataTableRow',\n\n  props: makeVDataTableRowProps(),\n\n  setup (props, { slots }) {\n    const { displayClasses, mobile } = useDisplay(props, 'v-data-table__tr')\n    const { isSelected, toggleSelect, someSelected, allSelected, selectAll } = useSelection()\n    const { isExpanded, toggleExpand } = useExpanded()\n    const { toggleSort, sortBy, isSorted } = useSort()\n    const { columns } = useHeaders()\n\n    useRender(() => (\n      <tr\n        class={[\n          'v-data-table__tr',\n          {\n            'v-data-table__tr--clickable': !!(props.onClick || props.onContextmenu || props.onDblclick),\n          },\n          displayClasses.value,\n        ]}\n        onClick={ props.onClick as any }\n        onContextmenu={ props.onContextmenu as any }\n        onDblclick={ props.onDblclick as any }\n      >\n        { props.item && columns.value.map((column, i) => {\n          const item = props.item!\n          const slotName = `item.${column.key}` as const\n          const headerSlotName = `header.${column.key}` as const\n          const slotProps = {\n            index: props.index!,\n            item: item.raw,\n            internalItem: item,\n            value: getObjectValueByPath(item.columns, column.key),\n            column,\n            isSelected,\n            toggleSelect,\n            isExpanded,\n            toggleExpand,\n          } satisfies ItemKeySlot<any>\n\n          const columnSlotProps: VDataTableHeaderCellColumnSlotProps = {\n            column,\n            selectAll,\n            isSorted,\n            toggleSort,\n            sortBy: sortBy.value,\n            someSelected: someSelected.value,\n            allSelected: allSelected.value,\n            getSortIcon: () => '',\n          }\n\n          const cellProps = typeof props.cellProps === 'function'\n            ? props.cellProps({\n              index: slotProps.index,\n              item: slotProps.item,\n              internalItem: slotProps.internalItem,\n              value: slotProps.value,\n              column,\n            })\n            : props.cellProps\n          const columnCellProps = typeof column.cellProps === 'function'\n            ? column.cellProps({\n              index: slotProps.index,\n              item: slotProps.item,\n              internalItem: slotProps.internalItem,\n              value: slotProps.value,\n            })\n            : column.cellProps\n\n          return (\n            <VDataTableColumn\n              align={ column.align }\n              class={{\n                'v-data-table__td--expanded-row': column.key === 'data-table-expand',\n                'v-data-table__td--select-row': column.key === 'data-table-select',\n              }}\n              fixed={ column.fixed }\n              fixedOffset={ column.fixedOffset }\n              lastFixed={ column.lastFixed }\n              maxWidth={ !mobile.value ? column.maxWidth : undefined }\n              noPadding={ column.key === 'data-table-select' || column.key === 'data-table-expand' }\n              nowrap={ column.nowrap }\n              width={ !mobile.value ? column.width : undefined }\n              { ...cellProps }\n              { ...columnCellProps }\n            >\n              {{\n                default: () => {\n                  if (column.key === 'data-table-select') {\n                    return slots['item.data-table-select']?.({\n                      ...slotProps,\n                      props: {\n                        disabled: !item.selectable,\n                        modelValue: isSelected([item]),\n                        onClick: withModifiers(() => toggleSelect(item), ['stop']),\n                      },\n                    }) ?? (\n                      <VCheckboxBtn\n                        disabled={ !item.selectable }\n                        modelValue={ isSelected([item]) }\n                        onClick={ withModifiers(\n                          (event: Event) => toggleSelect(item, props.index, event as PointerEvent),\n                          ['stop']\n                        )}\n                      />\n                    )\n                  }\n\n                  if (column.key === 'data-table-expand') {\n                    return slots['item.data-table-expand']?.({\n                      ...slotProps,\n                      props: {\n                        icon: isExpanded(item) ? '$collapse' : '$expand',\n                        size: 'small',\n                        variant: 'text',\n                        onClick: withModifiers(() => toggleExpand(item), ['stop']),\n                      },\n                    }) ?? (\n                      <VBtn\n                        icon={ isExpanded(item) ? '$collapse' : '$expand' }\n                        size=\"small\"\n                        variant=\"text\"\n                        onClick={ withModifiers(() => toggleExpand(item), ['stop']) }\n                      />\n                    )\n                  }\n\n                  if (slots[slotName] && !mobile.value) return slots[slotName](slotProps)\n\n                  const displayValue = toDisplayString(slotProps.value)\n\n                  return !mobile.value ? displayValue : (\n                    <>\n                      <div class=\"v-data-table__td-title\">\n                        { slots[headerSlotName]?.(columnSlotProps) ?? column.title }\n                      </div>\n\n                      <div class=\"v-data-table__td-value\">\n                        { slots[slotName]?.(slotProps) ?? displayValue }\n                      </div>\n                    </>\n                  )\n                },\n              }}\n            </VDataTableColumn>\n          )\n        })}\n      </tr>\n    ))\n  },\n})\n\nexport type VDataTableRow = InstanceType<typeof VDataTableRow>\n"]},"metadata":{},"sourceType":"module"}