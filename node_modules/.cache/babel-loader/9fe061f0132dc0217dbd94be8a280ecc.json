{"ast":null,"code":"import { createVNode as _createVNode, mergeProps as _mergeProps } from \"vue\"; // Styles\n\nimport \"./VDialog.css\"; // Components\n\nimport { VDialogTransition } from \"../transitions/index.js\";\nimport { VDefaultsProvider } from \"../VDefaultsProvider/index.js\";\nimport { VOverlay } from \"../VOverlay/index.js\";\nimport { makeVOverlayProps } from \"../VOverlay/VOverlay.js\"; // Composables\n\nimport { forwardRefs } from \"../../composables/forwardRefs.js\";\nimport { useProxiedModel } from \"../../composables/proxiedModel.js\";\nimport { useScopeId } from \"../../composables/scopeId.js\"; // Utilities\n\nimport { mergeProps, nextTick, onBeforeUnmount, ref, watch } from 'vue';\nimport { focusableChildren, genericComponent, IN_BROWSER, propsFactory, useRender } from \"../../util/index.js\"; // Types\n\nexport const makeVDialogProps = propsFactory({\n  fullscreen: Boolean,\n  retainFocus: {\n    type: Boolean,\n    default: true\n  },\n  scrollable: Boolean,\n  ...makeVOverlayProps({\n    origin: 'center center',\n    scrollStrategy: 'block',\n    transition: {\n      component: VDialogTransition\n    },\n    zIndex: 2400\n  })\n}, 'VDialog');\nexport const VDialog = genericComponent()({\n  name: 'VDialog',\n  props: makeVDialogProps(),\n  emits: {\n    'update:modelValue': value => true,\n    afterEnter: () => true,\n    afterLeave: () => true\n  },\n\n  setup(props, _ref) {\n    let {\n      emit,\n      slots\n    } = _ref;\n    const isActive = useProxiedModel(props, 'modelValue');\n    const {\n      scopeId\n    } = useScopeId();\n    const overlay = ref();\n\n    function onFocusin(e) {\n      const before = e.relatedTarget;\n      const after = e.target;\n\n      if (before !== after && overlay.value?.contentEl && // We're the topmost dialog\n      overlay.value?.globalTop && // It isn't the document or the dialog body\n      ![document, overlay.value.contentEl].includes(after) && // It isn't inside the dialog body\n      !overlay.value.contentEl.contains(after)) {\n        const focusable = focusableChildren(overlay.value.contentEl);\n        if (!focusable.length) return;\n        const firstElement = focusable[0];\n        const lastElement = focusable[focusable.length - 1];\n\n        if (before === firstElement) {\n          lastElement.focus();\n        } else {\n          firstElement.focus();\n        }\n      }\n    }\n\n    onBeforeUnmount(() => {\n      document.removeEventListener('focusin', onFocusin);\n    });\n\n    if (IN_BROWSER) {\n      watch(() => isActive.value && props.retainFocus, val => {\n        val ? document.addEventListener('focusin', onFocusin) : document.removeEventListener('focusin', onFocusin);\n      }, {\n        immediate: true\n      });\n    }\n\n    function onAfterEnter() {\n      emit('afterEnter');\n\n      if (overlay.value?.contentEl && !overlay.value.contentEl.contains(document.activeElement)) {\n        overlay.value.contentEl.focus({\n          preventScroll: true\n        });\n      }\n    }\n\n    function onAfterLeave() {\n      emit('afterLeave');\n    }\n\n    watch(isActive, async val => {\n      if (!val) {\n        await nextTick();\n        overlay.value.activatorEl?.focus({\n          preventScroll: true\n        });\n      }\n    });\n    useRender(() => {\n      const overlayProps = VOverlay.filterProps(props);\n      const activatorProps = mergeProps({\n        'aria-haspopup': 'dialog'\n      }, props.activatorProps);\n      const contentProps = mergeProps({\n        tabindex: -1\n      }, props.contentProps);\n      return _createVNode(VOverlay, _mergeProps({\n        \"ref\": overlay,\n        \"class\": ['v-dialog', {\n          'v-dialog--fullscreen': props.fullscreen,\n          'v-dialog--scrollable': props.scrollable\n        }, props.class],\n        \"style\": props.style\n      }, overlayProps, {\n        \"modelValue\": isActive.value,\n        \"onUpdate:modelValue\": $event => isActive.value = $event,\n        \"aria-modal\": \"true\",\n        \"activatorProps\": activatorProps,\n        \"contentProps\": contentProps,\n        \"height\": !props.fullscreen ? props.height : undefined,\n        \"width\": !props.fullscreen ? props.width : undefined,\n        \"maxHeight\": !props.fullscreen ? props.maxHeight : undefined,\n        \"maxWidth\": !props.fullscreen ? props.maxWidth : undefined,\n        \"role\": \"dialog\",\n        \"onAfterEnter\": onAfterEnter,\n        \"onAfterLeave\": onAfterLeave\n      }, scopeId), {\n        activator: slots.activator,\n        default: function () {\n          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n          }\n\n          return _createVNode(VDefaultsProvider, {\n            \"root\": \"VDialog\"\n          }, {\n            default: () => [slots.default?.(...args)]\n          });\n        }\n      });\n    });\n    return forwardRefs({}, overlay);\n  }\n\n});","map":{"version":3,"mappings":"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","names":["VDialogTransition","VDefaultsProvider","VOverlay","makeVOverlayProps","forwardRefs","useProxiedModel","useScopeId","mergeProps","nextTick","onBeforeUnmount","ref","watch","focusableChildren","genericComponent","IN_BROWSER","propsFactory","useRender","makeVDialogProps","fullscreen","Boolean","retainFocus","type","default","scrollable","origin","scrollStrategy","transition","component","zIndex","VDialog","name","props","emits","value","afterEnter","afterLeave","setup","_ref","emit","slots","isActive","scopeId","overlay","onFocusin","e","before","relatedTarget","after","target","contentEl","globalTop","document","includes","contains","focusable","length","firstElement","lastElement","focus","removeEventListener","val","addEventListener","immediate","onAfterEnter","activeElement","preventScroll","onAfterLeave","activatorEl","overlayProps","filterProps","activatorProps","contentProps","tabindex","class","style","$event","height","undefined","width","maxHeight","maxWidth","activator","args","_key","arguments"],"sources":["../../../src/components/VDialog/VDialog.tsx"],"sourcesContent":["// Styles\nimport './VDialog.sass'\n\n// Components\nimport { VDialogTransition } from '@/components/transitions'\nimport { VDefaultsProvider } from '@/components/VDefaultsProvider'\nimport { VOverlay } from '@/components/VOverlay'\nimport { makeVOverlayProps } from '@/components/VOverlay/VOverlay'\n\n// Composables\nimport { forwardRefs } from '@/composables/forwardRefs'\nimport { useProxiedModel } from '@/composables/proxiedModel'\nimport { useScopeId } from '@/composables/scopeId'\n\n// Utilities\nimport { mergeProps, nextTick, onBeforeUnmount, ref, watch } from 'vue'\nimport { focusableChildren, genericComponent, IN_BROWSER, propsFactory, useRender } from '@/util'\n\n// Types\nimport type { Component } from 'vue'\nimport type { OverlaySlots } from '@/components/VOverlay/VOverlay'\n\nexport const makeVDialogProps = propsFactory({\n  fullscreen: Boolean,\n  retainFocus: {\n    type: Boolean,\n    default: true,\n  },\n  scrollable: Boolean,\n\n  ...makeVOverlayProps({\n    origin: 'center center' as const,\n    scrollStrategy: 'block' as const,\n    transition: { component: VDialogTransition as Component },\n    zIndex: 2400,\n  }),\n}, 'VDialog')\n\nexport const VDialog = genericComponent<OverlaySlots>()({\n  name: 'VDialog',\n\n  props: makeVDialogProps(),\n\n  emits: {\n    'update:modelValue': (value: boolean) => true,\n    afterEnter: () => true,\n    afterLeave: () => true,\n  },\n\n  setup (props, { emit, slots }) {\n    const isActive = useProxiedModel(props, 'modelValue')\n    const { scopeId } = useScopeId()\n\n    const overlay = ref<VOverlay>()\n    function onFocusin (e: FocusEvent) {\n      const before = e.relatedTarget as HTMLElement | null\n      const after = e.target as HTMLElement | null\n\n      if (\n        before !== after &&\n        overlay.value?.contentEl &&\n        // We're the topmost dialog\n        overlay.value?.globalTop &&\n        // It isn't the document or the dialog body\n        ![document, overlay.value.contentEl].includes(after!) &&\n        // It isn't inside the dialog body\n        !overlay.value.contentEl.contains(after)\n      ) {\n        const focusable = focusableChildren(overlay.value.contentEl)\n\n        if (!focusable.length) return\n\n        const firstElement = focusable[0]\n        const lastElement = focusable[focusable.length - 1]\n\n        if (before === firstElement) {\n          lastElement.focus()\n        } else {\n          firstElement.focus()\n        }\n      }\n    }\n\n    onBeforeUnmount(() => {\n      document.removeEventListener('focusin', onFocusin)\n    })\n\n    if (IN_BROWSER) {\n      watch(() => isActive.value && props.retainFocus, val => {\n        val\n          ? document.addEventListener('focusin', onFocusin)\n          : document.removeEventListener('focusin', onFocusin)\n      }, { immediate: true })\n    }\n\n    function onAfterEnter () {\n      emit('afterEnter')\n      if (overlay.value?.contentEl && !overlay.value.contentEl.contains(document.activeElement)) {\n        overlay.value.contentEl.focus({ preventScroll: true })\n      }\n    }\n\n    function onAfterLeave () {\n      emit('afterLeave')\n    }\n\n    watch(isActive, async val => {\n      if (!val) {\n        await nextTick()\n        overlay.value!.activatorEl?.focus({ preventScroll: true })\n      }\n    })\n\n    useRender(() => {\n      const overlayProps = VOverlay.filterProps(props)\n      const activatorProps = mergeProps({\n        'aria-haspopup': 'dialog',\n      }, props.activatorProps)\n      const contentProps = mergeProps({\n        tabindex: -1,\n      }, props.contentProps)\n\n      return (\n        <VOverlay\n          ref={ overlay }\n          class={[\n            'v-dialog',\n            {\n              'v-dialog--fullscreen': props.fullscreen,\n              'v-dialog--scrollable': props.scrollable,\n            },\n            props.class,\n          ]}\n          style={ props.style }\n          { ...overlayProps }\n          v-model={ isActive.value }\n          aria-modal=\"true\"\n          activatorProps={ activatorProps }\n          contentProps={ contentProps }\n          height={ !props.fullscreen ? props.height : undefined }\n          width={ !props.fullscreen ? props.width : undefined }\n          maxHeight={ !props.fullscreen ? props.maxHeight : undefined }\n          maxWidth={ !props.fullscreen ? props.maxWidth : undefined }\n          role=\"dialog\"\n          onAfterEnter={ onAfterEnter }\n          onAfterLeave={ onAfterLeave }\n          { ...scopeId }\n        >\n          {{\n            activator: slots.activator,\n            default: (...args) => (\n              <VDefaultsProvider root=\"VDialog\">\n                { slots.default?.(...args) }\n              </VDefaultsProvider>\n            ),\n          }}\n        </VOverlay>\n      )\n    })\n\n    return forwardRefs({}, overlay)\n  },\n})\n\nexport type VDialog = InstanceType<typeof VDialog>\n"]},"metadata":{},"sourceType":"module"}