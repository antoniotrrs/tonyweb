{"ast":null,"code":"export const singleOpenStrategy = {\n  open: _ref => {\n    let {\n      id,\n      value,\n      opened,\n      parents\n    } = _ref;\n\n    if (value) {\n      const newOpened = new Set();\n      newOpened.add(id);\n      let parent = parents.get(id);\n\n      while (parent != null) {\n        newOpened.add(parent);\n        parent = parents.get(parent);\n      }\n\n      return newOpened;\n    } else {\n      opened.delete(id);\n      return opened;\n    }\n  },\n  select: () => null\n};\nexport const multipleOpenStrategy = {\n  open: _ref2 => {\n    let {\n      id,\n      value,\n      opened,\n      parents\n    } = _ref2;\n\n    if (value) {\n      let parent = parents.get(id);\n      opened.add(id);\n\n      while (parent != null && parent !== id) {\n        opened.add(parent);\n        parent = parents.get(parent);\n      }\n\n      return opened;\n    } else {\n      opened.delete(id);\n    }\n\n    return opened;\n  },\n  select: () => null\n};\nexport const listOpenStrategy = {\n  open: multipleOpenStrategy.open,\n  select: _ref3 => {\n    let {\n      id,\n      value,\n      opened,\n      parents\n    } = _ref3;\n    if (!value) return opened;\n    const path = [];\n    let parent = parents.get(id);\n\n    while (parent != null) {\n      path.push(parent);\n      parent = parents.get(parent);\n    }\n\n    return new Set(path);\n  }\n};","map":{"version":3,"mappings":"AAwBA,OAAO,MAAMA,kBAAgC,GAAG;AAC9CC,MAAI,EAAEC,QAAoC;AAAA,QAAnC;AAAEC,QAAF;AAAMC,WAAN;AAAaC,YAAb;AAAqBC;AAArB,QAA8BJ,IAAK;;AACxC,QAAIE,KAAJ,EAAW;AACT,YAAMG,SAAS,GAAG,IAAIC,GAAJ,EAAlB;AACAD,eAAS,CAACE,GAAVF,CAAcJ,EAAdI;AAEA,UAAIG,MAAM,GAAGJ,OAAO,CAACK,GAARL,CAAYH,EAAZG,CAAb;;AAEA,aAAOI,MAAM,IAAI,IAAjB,EAAuB;AACrBH,iBAAS,CAACE,GAAVF,CAAcG,MAAdH;AACAG,cAAM,GAAGJ,OAAO,CAACK,GAARL,CAAYI,MAAZJ,CAATI;AACF;;AAEA,aAAOH,SAAP;AACD,KAZD,MAYO;AACLF,YAAM,CAACO,MAAPP,CAAcF,EAAdE;AACA,aAAOA,MAAP;AACF;AACD,GAlB6C;AAmB9CQ,QAAM,EAAEA,MAAM;AAnBgC,CAAzC;AAsBP,OAAO,MAAMC,oBAAkC,GAAG;AAChDb,MAAI,EAAEc,SAAoC;AAAA,QAAnC;AAAEZ,QAAF;AAAMC,WAAN;AAAaC,YAAb;AAAqBC;AAArB,QAA8BS,KAAK;;AACxC,QAAIX,KAAJ,EAAW;AACT,UAAIM,MAAM,GAAGJ,OAAO,CAACK,GAARL,CAAYH,EAAZG,CAAb;AACAD,YAAM,CAACI,GAAPJ,CAAWF,EAAXE;;AAEA,aAAOK,MAAM,IAAI,IAAVA,IAAkBA,MAAM,KAAKP,EAApC,EAAwC;AACtCE,cAAM,CAACI,GAAPJ,CAAWK,MAAXL;AACAK,cAAM,GAAGJ,OAAO,CAACK,GAARL,CAAYI,MAAZJ,CAATI;AACF;;AAEA,aAAOL,MAAP;AACD,KAVD,MAUO;AACLA,YAAM,CAACO,MAAPP,CAAcF,EAAdE;AACF;;AACA,WAAOA,MAAP;AACD,GAhB+C;AAiBhDQ,QAAM,EAAEA,MAAM;AAjBkC,CAA3C;AAoBP,OAAO,MAAMG,gBAA8B,GAAG;AAC5Cf,MAAI,EAAEa,oBAAoB,CAACb,IADiB;AAE5CY,QAAM,EAAEI,SAAoC;AAAA,QAAnC;AAAEd,QAAF;AAAMC,WAAN;AAAaC,YAAb;AAAqBC;AAArB,QAA8BW,KAAK;AAC1C,QAAI,CAACb,KAAL,EAAY,OAAOC,MAAP;AAEZ,UAAMa,IAAe,GAAG,EAAxB;AAEA,QAAIR,MAAM,GAAGJ,OAAO,CAACK,GAARL,CAAYH,EAAZG,CAAb;;AAEA,WAAOI,MAAM,IAAI,IAAjB,EAAuB;AACrBQ,UAAI,CAACC,IAALD,CAAUR,MAAVQ;AACAR,YAAM,GAAGJ,OAAO,CAACK,GAARL,CAAYI,MAAZJ,CAATI;AACF;;AAEA,WAAO,IAAIF,GAAJ,CAAQU,IAAR,CAAP;AACF;AAf4C,CAAvC","names":["singleOpenStrategy","open","_ref","id","value","opened","parents","newOpened","Set","add","parent","get","delete","select","multipleOpenStrategy","_ref2","listOpenStrategy","_ref3","path","push"],"sources":["../../../src/composables/nested/openStrategies.ts"],"sourcesContent":["type OpenStrategyFunction = (data: {\n  id: unknown\n  value: boolean\n  opened: Set<unknown>\n  children: Map<unknown, unknown[]>\n  parents: Map<unknown, unknown>\n  event?: Event\n}) => Set<unknown>\n\ntype OpenSelectStrategyFunction = (data: {\n  id: unknown\n  value: boolean\n  opened: Set<unknown>\n  selected: Map<unknown, 'on' | 'off' | 'indeterminate'>\n  children: Map<unknown, unknown[]>\n  parents: Map<unknown, unknown>\n  event?: Event\n}) => Set<unknown> | null\n\nexport type OpenStrategy = {\n  open: OpenStrategyFunction\n  select: OpenSelectStrategyFunction\n}\n\nexport const singleOpenStrategy: OpenStrategy = {\n  open: ({ id, value, opened, parents }) => {\n    if (value) {\n      const newOpened = new Set<unknown>()\n      newOpened.add(id)\n\n      let parent = parents.get(id)\n\n      while (parent != null) {\n        newOpened.add(parent)\n        parent = parents.get(parent)\n      }\n\n      return newOpened\n    } else {\n      opened.delete(id)\n      return opened\n    }\n  },\n  select: () => null,\n}\n\nexport const multipleOpenStrategy: OpenStrategy = {\n  open: ({ id, value, opened, parents }) => {\n    if (value) {\n      let parent = parents.get(id)\n      opened.add(id)\n\n      while (parent != null && parent !== id) {\n        opened.add(parent)\n        parent = parents.get(parent)\n      }\n\n      return opened\n    } else {\n      opened.delete(id)\n    }\n    return opened\n  },\n  select: () => null,\n}\n\nexport const listOpenStrategy: OpenStrategy = {\n  open: multipleOpenStrategy.open,\n  select: ({ id, value, opened, parents }) => {\n    if (!value) return opened\n\n    const path: unknown[] = []\n\n    let parent = parents.get(id)\n\n    while (parent != null) {\n      path.push(parent)\n      parent = parents.get(parent)\n    }\n\n    return new Set(path)\n  },\n}\n"]},"metadata":{},"sourceType":"module"}