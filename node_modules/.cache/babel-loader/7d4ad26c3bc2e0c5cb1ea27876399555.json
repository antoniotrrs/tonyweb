{"ast":null,"code":"/* eslint-disable max-statements */\n// Composables\nimport { makeElevationProps } from \"../../composables/elevation.js\";\nimport { useRtl } from \"../../composables/locale.js\";\nimport { makeRoundedProps } from \"../../composables/rounded.js\"; // Utilities\n\nimport { computed, nextTick, provide, ref, shallowRef, toRef } from 'vue';\nimport { clamp, createRange, getDecimals, propsFactory } from \"../../util/index.js\"; // Types\n\nexport const VSliderSymbol = Symbol.for('vuetify:v-slider');\nexport function getOffset(e, el, direction) {\n  const vertical = direction === 'vertical';\n  const rect = el.getBoundingClientRect();\n  const touch = 'touches' in e ? e.touches[0] : e;\n  return vertical ? touch.clientY - (rect.top + rect.height / 2) : touch.clientX - (rect.left + rect.width / 2);\n}\n\nfunction getPosition(e, position) {\n  if ('touches' in e && e.touches.length) return e.touches[0][position];else if ('changedTouches' in e && e.changedTouches.length) return e.changedTouches[0][position];else return e[position];\n}\n\nexport const makeSliderProps = propsFactory({\n  disabled: {\n    type: Boolean,\n    default: null\n  },\n  error: Boolean,\n  readonly: {\n    type: Boolean,\n    default: null\n  },\n  max: {\n    type: [Number, String],\n    default: 100\n  },\n  min: {\n    type: [Number, String],\n    default: 0\n  },\n  step: {\n    type: [Number, String],\n    default: 0\n  },\n  thumbColor: String,\n  thumbLabel: {\n    type: [Boolean, String],\n    default: undefined,\n    validator: v => typeof v === 'boolean' || v === 'always'\n  },\n  thumbSize: {\n    type: [Number, String],\n    default: 20\n  },\n  showTicks: {\n    type: [Boolean, String],\n    default: false,\n    validator: v => typeof v === 'boolean' || v === 'always'\n  },\n  ticks: {\n    type: [Array, Object]\n  },\n  tickSize: {\n    type: [Number, String],\n    default: 2\n  },\n  color: String,\n  trackColor: String,\n  trackFillColor: String,\n  trackSize: {\n    type: [Number, String],\n    default: 4\n  },\n  direction: {\n    type: String,\n    default: 'horizontal',\n    validator: v => ['vertical', 'horizontal'].includes(v)\n  },\n  reverse: Boolean,\n  ...makeRoundedProps(),\n  ...makeElevationProps({\n    elevation: 2\n  }),\n  ripple: {\n    type: Boolean,\n    default: true\n  }\n}, 'Slider');\nexport const useSteps = props => {\n  const min = computed(() => parseFloat(props.min));\n  const max = computed(() => parseFloat(props.max));\n  const step = computed(() => Number(props.step) > 0 ? parseFloat(props.step) : 0);\n  const decimals = computed(() => Math.max(getDecimals(step.value), getDecimals(min.value)));\n\n  function roundValue(value) {\n    value = parseFloat(value);\n    if (step.value <= 0) return value;\n    const clamped = clamp(value, min.value, max.value);\n    const offset = min.value % step.value;\n    const newValue = Math.round((clamped - offset) / step.value) * step.value + offset;\n    return parseFloat(Math.min(newValue, max.value).toFixed(decimals.value));\n  }\n\n  return {\n    min,\n    max,\n    step,\n    decimals,\n    roundValue\n  };\n};\nexport const useSlider = _ref => {\n  let {\n    props,\n    steps,\n    onSliderStart,\n    onSliderMove,\n    onSliderEnd,\n    getActiveThumb\n  } = _ref;\n  const {\n    isRtl\n  } = useRtl();\n  const isReversed = toRef(props, 'reverse');\n  const vertical = computed(() => props.direction === 'vertical');\n  const indexFromEnd = computed(() => vertical.value !== isReversed.value);\n  const {\n    min,\n    max,\n    step,\n    decimals,\n    roundValue\n  } = steps;\n  const thumbSize = computed(() => parseInt(props.thumbSize, 10));\n  const tickSize = computed(() => parseInt(props.tickSize, 10));\n  const trackSize = computed(() => parseInt(props.trackSize, 10));\n  const numTicks = computed(() => (max.value - min.value) / step.value);\n  const disabled = toRef(props, 'disabled');\n  const thumbColor = computed(() => props.error || props.disabled ? undefined : props.thumbColor ?? props.color);\n  const trackColor = computed(() => props.error || props.disabled ? undefined : props.trackColor ?? props.color);\n  const trackFillColor = computed(() => props.error || props.disabled ? undefined : props.trackFillColor ?? props.color);\n  const mousePressed = shallowRef(false);\n  const startOffset = shallowRef(0);\n  const trackContainerRef = ref();\n  const activeThumbRef = ref();\n\n  function parseMouseMove(e) {\n    const el = trackContainerRef.value?.$el;\n    if (!el) return;\n    const vertical = props.direction === 'vertical';\n    const start = vertical ? 'top' : 'left';\n    const length = vertical ? 'height' : 'width';\n    const position = vertical ? 'clientY' : 'clientX';\n    const {\n      [start]: trackStart,\n      [length]: trackLength\n    } = el.getBoundingClientRect();\n    const clickOffset = getPosition(e, position); // It is possible for left to be NaN, force to number\n\n    let clickPos = Math.min(Math.max((clickOffset - trackStart - startOffset.value) / trackLength, 0), 1) || 0;\n    if (vertical ? indexFromEnd.value : indexFromEnd.value !== isRtl.value) clickPos = 1 - clickPos;\n    return roundValue(min.value + clickPos * (max.value - min.value));\n  }\n\n  const handleStop = e => {\n    const value = parseMouseMove(e);\n\n    if (value != null) {\n      onSliderEnd({\n        value\n      });\n    }\n\n    mousePressed.value = false;\n    startOffset.value = 0;\n  };\n\n  const handleStart = e => {\n    const value = parseMouseMove(e);\n    activeThumbRef.value = getActiveThumb(e);\n    if (!activeThumbRef.value) return;\n    mousePressed.value = true;\n\n    if (activeThumbRef.value.contains(e.target)) {\n      startOffset.value = getOffset(e, activeThumbRef.value, props.direction);\n    } else {\n      startOffset.value = 0;\n\n      if (value != null) {\n        onSliderMove({\n          value\n        });\n      }\n    }\n\n    if (value != null) {\n      onSliderStart({\n        value\n      });\n    }\n\n    nextTick(() => activeThumbRef.value?.focus());\n  };\n\n  const moveListenerOptions = {\n    passive: true,\n    capture: true\n  };\n\n  function onMouseMove(e) {\n    const value = parseMouseMove(e);\n\n    if (value != null) {\n      onSliderMove({\n        value\n      });\n    }\n  }\n\n  function onSliderMouseUp(e) {\n    e.stopPropagation();\n    e.preventDefault();\n    handleStop(e);\n    window.removeEventListener('mousemove', onMouseMove, moveListenerOptions);\n    window.removeEventListener('mouseup', onSliderMouseUp);\n  }\n\n  function onSliderTouchend(e) {\n    handleStop(e);\n    window.removeEventListener('touchmove', onMouseMove, moveListenerOptions);\n    e.target?.removeEventListener('touchend', onSliderTouchend);\n  }\n\n  function onSliderTouchstart(e) {\n    handleStart(e);\n    window.addEventListener('touchmove', onMouseMove, moveListenerOptions);\n    e.target?.addEventListener('touchend', onSliderTouchend, {\n      passive: false\n    });\n  }\n\n  function onSliderMousedown(e) {\n    if (e.button !== 0) return;\n    e.preventDefault();\n    handleStart(e);\n    window.addEventListener('mousemove', onMouseMove, moveListenerOptions);\n    window.addEventListener('mouseup', onSliderMouseUp, {\n      passive: false\n    });\n  }\n\n  const position = val => {\n    const percentage = (val - min.value) / (max.value - min.value) * 100;\n    return clamp(isNaN(percentage) ? 0 : percentage, 0, 100);\n  };\n\n  const showTicks = toRef(props, 'showTicks');\n  const parsedTicks = computed(() => {\n    if (!showTicks.value) return [];\n\n    if (!props.ticks) {\n      return numTicks.value !== Infinity ? createRange(numTicks.value + 1).map(t => {\n        const value = min.value + t * step.value;\n        return {\n          value,\n          position: position(value)\n        };\n      }) : [];\n    }\n\n    if (Array.isArray(props.ticks)) return props.ticks.map(t => ({\n      value: t,\n      position: position(t),\n      label: t.toString()\n    }));\n    return Object.keys(props.ticks).map(key => ({\n      value: parseFloat(key),\n      position: position(parseFloat(key)),\n      label: props.ticks[key]\n    }));\n  });\n  const hasLabels = computed(() => parsedTicks.value.some(_ref2 => {\n    let {\n      label\n    } = _ref2;\n    return !!label;\n  }));\n  const data = {\n    activeThumbRef,\n    color: toRef(props, 'color'),\n    decimals,\n    disabled,\n    direction: toRef(props, 'direction'),\n    elevation: toRef(props, 'elevation'),\n    hasLabels,\n    isReversed,\n    indexFromEnd,\n    min,\n    max,\n    mousePressed,\n    numTicks,\n    onSliderMousedown,\n    onSliderTouchstart,\n    parsedTicks,\n    parseMouseMove,\n    position,\n    readonly: toRef(props, 'readonly'),\n    rounded: toRef(props, 'rounded'),\n    roundValue,\n    showTicks,\n    startOffset,\n    step,\n    thumbSize,\n    thumbColor,\n    thumbLabel: toRef(props, 'thumbLabel'),\n    ticks: toRef(props, 'ticks'),\n    tickSize,\n    trackColor,\n    trackContainerRef,\n    trackFillColor,\n    trackSize,\n    vertical\n  };\n  provide(VSliderSymbol, data);\n  return data;\n};","map":{"version":3,"mappings":"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","names":["makeElevationProps","useRtl","makeRoundedProps","computed","nextTick","provide","ref","shallowRef","toRef","clamp","createRange","getDecimals","propsFactory","VSliderSymbol","Symbol","for","getOffset","e","el","direction","vertical","rect","getBoundingClientRect","touch","touches","clientY","top","height","clientX","left","width","getPosition","position","length","changedTouches","makeSliderProps","disabled","type","Boolean","default","error","readonly","max","Number","String","min","step","thumbColor","thumbLabel","undefined","validator","v","thumbSize","showTicks","ticks","Array","Object","tickSize","color","trackColor","trackFillColor","trackSize","includes","reverse","elevation","ripple","useSteps","props","parseFloat","decimals","Math","value","roundValue","clamped","offset","newValue","round","toFixed","useSlider","_ref","steps","onSliderStart","onSliderMove","onSliderEnd","getActiveThumb","isRtl","isReversed","indexFromEnd","parseInt","numTicks","mousePressed","startOffset","trackContainerRef","activeThumbRef","parseMouseMove","$el","start","trackStart","trackLength","clickOffset","clickPos","handleStop","handleStart","contains","target","focus","moveListenerOptions","passive","capture","onMouseMove","onSliderMouseUp","stopPropagation","preventDefault","window","removeEventListener","onSliderTouchend","onSliderTouchstart","addEventListener","onSliderMousedown","button","val","percentage","isNaN","parsedTicks","Infinity","map","t","isArray","label","toString","keys","key","hasLabels","some","_ref2","data","rounded"],"sources":["../../../src/components/VSlider/slider.ts"],"sourcesContent":["/* eslint-disable max-statements */\n// Composables\nimport { makeElevationProps } from '@/composables/elevation'\nimport { useRtl } from '@/composables/locale'\nimport { makeRoundedProps } from '@/composables/rounded'\n\n// Utilities\nimport { computed, nextTick, provide, ref, shallowRef, toRef } from 'vue'\nimport { clamp, createRange, getDecimals, propsFactory } from '@/util'\n\n// Types\nimport type { ExtractPropTypes, InjectionKey, PropType, Ref } from 'vue'\nimport type { VSliderTrack } from './VSliderTrack'\n\nexport type Tick = {\n  value: number\n  position: number\n  label?: string\n}\n\ntype SliderProvide = {\n  activeThumbRef: Ref<HTMLElement | undefined>\n  color: Ref<string | undefined>\n  decimals: Ref<number>\n  direction: Ref<'vertical' | 'horizontal'>\n  disabled: Ref<boolean | null | undefined>\n  elevation: Ref<number | string | undefined>\n  min: Ref<number>\n  max: Ref<number>\n  mousePressed: Ref<boolean>\n  numTicks: Ref<number>\n  onSliderMousedown: (e: MouseEvent) => void\n  onSliderTouchstart: (e: TouchEvent) => void\n  parseMouseMove: (e: MouseEvent | TouchEvent) => number | void\n  position: (val: number) => number\n  readonly: Ref<boolean | null | undefined>\n  rounded: Ref<boolean | number | string | undefined>\n  roundValue: (value: number) => number\n  thumbLabel: Ref<boolean | string | undefined>\n  showTicks: Ref<boolean | 'always'>\n  startOffset: Ref<number>\n  step: Ref<number>\n  thumbSize: Ref<number>\n  thumbColor: Ref<string | undefined>\n  trackColor: Ref<string | undefined>\n  trackFillColor: Ref<string | undefined>\n  trackSize: Ref<number>\n  ticks: Ref<readonly number[] | Record<string, string> | undefined>\n  tickSize: Ref<number>\n  trackContainerRef: Ref<VSliderTrack | undefined>\n  vertical: Ref<boolean>\n  parsedTicks: Ref<Tick[]>\n  hasLabels: Ref<boolean>\n  isReversed: Ref<boolean>\n  indexFromEnd: Ref<boolean>\n}\n\nexport const VSliderSymbol: InjectionKey<SliderProvide> = Symbol.for('vuetify:v-slider')\n\nexport function getOffset (e: MouseEvent | TouchEvent, el: HTMLElement, direction: string) {\n  const vertical = direction === 'vertical'\n  const rect = el.getBoundingClientRect()\n  const touch = 'touches' in e ? e.touches[0] : e\n  return vertical\n    ? touch.clientY - (rect.top + rect.height / 2)\n    : touch.clientX - (rect.left + rect.width / 2)\n}\n\nfunction getPosition (e: MouseEvent | TouchEvent, position: 'clientX' | 'clientY'): number {\n  if ('touches' in e && e.touches.length) return e.touches[0][position]\n  else if ('changedTouches' in e && e.changedTouches.length) return e.changedTouches[0][position]\n  else return (e as MouseEvent)[position]\n}\n\nexport const makeSliderProps = propsFactory({\n  disabled: {\n    type: Boolean as PropType<boolean | null>,\n    default: null,\n  },\n  error: Boolean,\n  readonly: {\n    type: Boolean as PropType<boolean | null>,\n    default: null,\n  },\n  max: {\n    type: [Number, String],\n    default: 100,\n  },\n  min: {\n    type: [Number, String],\n    default: 0,\n  },\n  step: {\n    type: [Number, String],\n    default: 0,\n  },\n  thumbColor: String,\n  thumbLabel: {\n    type: [Boolean, String] as PropType<boolean | 'always' | undefined>,\n    default: undefined,\n    validator: (v: any) => typeof v === 'boolean' || v === 'always',\n  },\n  thumbSize: {\n    type: [Number, String],\n    default: 20,\n  },\n  showTicks: {\n    type: [Boolean, String] as PropType<boolean | 'always'>,\n    default: false,\n    validator: (v: any) => typeof v === 'boolean' || v === 'always',\n  },\n  ticks: {\n    type: [Array, Object] as PropType<readonly number[] | Record<number, string>>,\n  },\n  tickSize: {\n    type: [Number, String],\n    default: 2,\n  },\n  color: String,\n  trackColor: String,\n  trackFillColor: String,\n  trackSize: {\n    type: [Number, String],\n    default: 4,\n  },\n  direction: {\n    type: String as PropType<'horizontal' | 'vertical'>,\n    default: 'horizontal',\n    validator: (v: any) => ['vertical', 'horizontal'].includes(v),\n  },\n  reverse: Boolean,\n\n  ...makeRoundedProps(),\n  ...makeElevationProps({\n    elevation: 2,\n  }),\n  ripple: {\n    type: Boolean,\n    default: true,\n  },\n}, 'Slider')\n\ntype SliderProps = ExtractPropTypes<ReturnType<typeof makeSliderProps>>\n\ntype SliderData = {\n  value: number\n}\n\nexport const useSteps = (props: SliderProps) => {\n  const min = computed(() => parseFloat(props.min))\n  const max = computed(() => parseFloat(props.max))\n  const step = computed(() => Number(props.step) > 0 ? parseFloat(props.step) : 0)\n  const decimals = computed(() => Math.max(getDecimals(step.value), getDecimals(min.value)))\n\n  function roundValue (value: string | number) {\n    value = parseFloat(value)\n\n    if (step.value <= 0) return value\n\n    const clamped = clamp(value, min.value, max.value)\n    const offset = min.value % step.value\n    const newValue = Math.round((clamped - offset) / step.value) * step.value + offset\n\n    return parseFloat(Math.min(newValue, max.value).toFixed(decimals.value))\n  }\n\n  return { min, max, step, decimals, roundValue }\n}\n\nexport const useSlider = ({\n  props,\n  steps,\n  onSliderStart,\n  onSliderMove,\n  onSliderEnd,\n  getActiveThumb,\n}: {\n  props: SliderProps\n  steps: ReturnType<typeof useSteps>\n  onSliderEnd: (data: SliderData) => void\n  onSliderStart: (data: SliderData) => void\n  onSliderMove: (data: SliderData) => void\n  getActiveThumb: (e: MouseEvent | TouchEvent) => HTMLElement\n}) => {\n  const { isRtl } = useRtl()\n  const isReversed = toRef(props, 'reverse')\n  const vertical = computed(() => props.direction === 'vertical')\n  const indexFromEnd = computed(() => vertical.value !== isReversed.value)\n\n  const { min, max, step, decimals, roundValue } = steps\n\n  const thumbSize = computed(() => parseInt(props.thumbSize, 10))\n  const tickSize = computed(() => parseInt(props.tickSize, 10))\n  const trackSize = computed(() => parseInt(props.trackSize, 10))\n  const numTicks = computed(() => (max.value - min.value) / step.value)\n  const disabled = toRef(props, 'disabled')\n\n  const thumbColor = computed(() => props.error || props.disabled ? undefined : props.thumbColor ?? props.color)\n  const trackColor = computed(() => props.error || props.disabled ? undefined : props.trackColor ?? props.color)\n  const trackFillColor = computed(() => props.error || props.disabled ? undefined : props.trackFillColor ?? props.color)\n\n  const mousePressed = shallowRef(false)\n\n  const startOffset = shallowRef(0)\n  const trackContainerRef = ref<VSliderTrack | undefined>()\n  const activeThumbRef = ref<HTMLElement | undefined>()\n\n  function parseMouseMove (e: MouseEvent | TouchEvent): number | void {\n    const el: HTMLElement = trackContainerRef.value?.$el\n\n    if (!el) return\n\n    const vertical = props.direction === 'vertical'\n    const start = vertical ? 'top' : 'left'\n    const length = vertical ? 'height' : 'width'\n    const position = vertical ? 'clientY' : 'clientX'\n\n    const {\n      [start]: trackStart,\n      [length]: trackLength,\n    } = el.getBoundingClientRect()\n    const clickOffset = getPosition(e, position)\n\n    // It is possible for left to be NaN, force to number\n    let clickPos = Math.min(Math.max((clickOffset - trackStart - startOffset.value) / trackLength, 0), 1) || 0\n\n    if (vertical ? indexFromEnd.value : indexFromEnd.value !== isRtl.value) clickPos = 1 - clickPos\n\n    return roundValue(min.value + clickPos * (max.value - min.value))\n  }\n\n  const handleStop = (e: MouseEvent | TouchEvent) => {\n    const value = parseMouseMove(e)\n    if (value != null) {\n      onSliderEnd({ value })\n    }\n\n    mousePressed.value = false\n    startOffset.value = 0\n  }\n\n  const handleStart = (e: MouseEvent | TouchEvent) => {\n    const value = parseMouseMove(e)\n    activeThumbRef.value = getActiveThumb(e)\n\n    if (!activeThumbRef.value) return\n\n    mousePressed.value = true\n\n    if (activeThumbRef.value.contains(e.target as Node)) {\n      startOffset.value = getOffset(e, activeThumbRef.value, props.direction)\n    } else {\n      startOffset.value = 0\n      if (value != null) {\n        onSliderMove({ value })\n      }\n    }\n\n    if (value != null) {\n      onSliderStart({ value })\n    }\n    nextTick(() => activeThumbRef.value?.focus())\n  }\n\n  const moveListenerOptions = { passive: true, capture: true }\n\n  function onMouseMove (e: MouseEvent | TouchEvent) {\n    const value = parseMouseMove(e)\n    if (value != null) {\n      onSliderMove({ value })\n    }\n  }\n\n  function onSliderMouseUp (e: MouseEvent) {\n    e.stopPropagation()\n    e.preventDefault()\n\n    handleStop(e)\n\n    window.removeEventListener('mousemove', onMouseMove, moveListenerOptions)\n    window.removeEventListener('mouseup', onSliderMouseUp)\n  }\n\n  function onSliderTouchend (e: TouchEvent) {\n    handleStop(e)\n\n    window.removeEventListener('touchmove', onMouseMove, moveListenerOptions)\n    e.target?.removeEventListener('touchend', onSliderTouchend as EventListener)\n  }\n\n  function onSliderTouchstart (e: TouchEvent) {\n    handleStart(e)\n\n    window.addEventListener('touchmove', onMouseMove, moveListenerOptions)\n    e.target?.addEventListener('touchend', onSliderTouchend as EventListener, { passive: false })\n  }\n\n  function onSliderMousedown (e: MouseEvent) {\n    if (e.button !== 0) return\n\n    e.preventDefault()\n\n    handleStart(e)\n\n    window.addEventListener('mousemove', onMouseMove, moveListenerOptions)\n    window.addEventListener('mouseup', onSliderMouseUp, { passive: false })\n  }\n\n  const position = (val: number) => {\n    const percentage = (val - min.value) / (max.value - min.value) * 100\n    return clamp(isNaN(percentage) ? 0 : percentage, 0, 100)\n  }\n\n  const showTicks = toRef(props, 'showTicks')\n  const parsedTicks = computed<Tick[]>(() => {\n    if (!showTicks.value) return []\n\n    if (!props.ticks) {\n      return numTicks.value !== Infinity ? createRange(numTicks.value + 1).map(t => {\n        const value = min.value + (t * step.value)\n        return {\n          value,\n          position: position(value),\n        }\n      }) : []\n    }\n    if (Array.isArray(props.ticks)) return props.ticks.map(t => ({ value: t, position: position(t), label: t.toString() }))\n    return Object.keys(props.ticks).map(key => ({\n      value: parseFloat(key),\n      position: position(parseFloat(key)),\n      label: (props.ticks as Record<string, string>)[key],\n    }))\n  })\n\n  const hasLabels = computed(() => parsedTicks.value.some(({ label }) => !!label))\n\n  const data: SliderProvide = {\n    activeThumbRef,\n    color: toRef(props, 'color'),\n    decimals,\n    disabled,\n    direction: toRef(props, 'direction'),\n    elevation: toRef(props, 'elevation'),\n    hasLabels,\n    isReversed,\n    indexFromEnd,\n    min,\n    max,\n    mousePressed,\n    numTicks,\n    onSliderMousedown,\n    onSliderTouchstart,\n    parsedTicks,\n    parseMouseMove,\n    position,\n    readonly: toRef(props, 'readonly'),\n    rounded: toRef(props, 'rounded'),\n    roundValue,\n    showTicks,\n    startOffset,\n    step,\n    thumbSize,\n    thumbColor,\n    thumbLabel: toRef(props, 'thumbLabel'),\n    ticks: toRef(props, 'ticks'),\n    tickSize,\n    trackColor,\n    trackContainerRef,\n    trackFillColor,\n    trackSize,\n    vertical,\n  }\n\n  provide(VSliderSymbol, data)\n\n  return data\n}\n"]},"metadata":{},"sourceType":"module"}