{"ast":null,"code":"import _objectSpread from \"/Users/antoniotorres/Documents/tony/tonyweb/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport { mergeProps as _mergeProps, createVNode as _createVNode } from \"vue\"; // Styles\n\nimport \"./VChipGroup.css\"; // Components\n\nimport { makeVSlideGroupProps, VSlideGroup } from \"../VSlideGroup/VSlideGroup.js\"; // Composables\n\nimport { makeComponentProps } from \"../../composables/component.js\";\nimport { provideDefaults } from \"../../composables/defaults.js\";\nimport { makeGroupProps, useGroup } from \"../../composables/group.js\";\nimport { makeTagProps } from \"../../composables/tag.js\";\nimport { makeThemeProps, provideTheme } from \"../../composables/theme.js\";\nimport { makeVariantProps } from \"../../composables/variant.js\"; // Utilities\n\nimport { toRef } from 'vue';\nimport { deepEqual, genericComponent, propsFactory, useRender } from \"../../util/index.js\"; // Types\n\nexport var VChipGroupSymbol = Symbol.for('vuetify:v-chip-group');\nexport var makeVChipGroupProps = propsFactory(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({\n  baseColor: String,\n  column: Boolean,\n  filter: Boolean,\n  valueComparator: {\n    type: Function,\n    default: deepEqual\n  }\n}, makeVSlideGroupProps()), makeComponentProps()), makeGroupProps({\n  selectedClass: 'v-chip--selected'\n})), makeTagProps()), makeThemeProps()), makeVariantProps({\n  variant: 'tonal'\n})), 'VChipGroup');\nexport var VChipGroup = genericComponent()({\n  name: 'VChipGroup',\n  props: makeVChipGroupProps(),\n  emits: {\n    'update:modelValue': function updateModelValue(value) {\n      return true;\n    }\n  },\n  setup: function setup(props, _ref) {\n    var slots = _ref.slots;\n\n    var _provideTheme = provideTheme(props),\n        themeClasses = _provideTheme.themeClasses;\n\n    var _useGroup = useGroup(props, VChipGroupSymbol),\n        isSelected = _useGroup.isSelected,\n        select = _useGroup.select,\n        next = _useGroup.next,\n        prev = _useGroup.prev,\n        selected = _useGroup.selected;\n\n    provideDefaults({\n      VChip: {\n        baseColor: toRef(props, 'baseColor'),\n        color: toRef(props, 'color'),\n        disabled: toRef(props, 'disabled'),\n        filter: toRef(props, 'filter'),\n        variant: toRef(props, 'variant')\n      }\n    });\n    useRender(function () {\n      var slideGroupProps = VSlideGroup.filterProps(props);\n      return _createVNode(VSlideGroup, _mergeProps(slideGroupProps, {\n        \"class\": ['v-chip-group', {\n          'v-chip-group--column': props.column\n        }, themeClasses.value, props.class],\n        \"style\": props.style\n      }), {\n        default: function _default() {\n          var _slots$default;\n\n          return [(_slots$default = slots.default) === null || _slots$default === void 0 ? void 0 : _slots$default.call(slots, {\n            isSelected: isSelected,\n            select: select,\n            next: next,\n            prev: prev,\n            selected: selected.value\n          })];\n        }\n      });\n    });\n    return {};\n  }\n});","map":{"version":3,"mappings":"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","names":["makeVSlideGroupProps","VSlideGroup","makeComponentProps","provideDefaults","makeGroupProps","useGroup","makeTagProps","makeThemeProps","provideTheme","makeVariantProps","toRef","deepEqual","genericComponent","propsFactory","useRender","VChipGroupSymbol","Symbol","for","makeVChipGroupProps","baseColor","String","column","Boolean","filter","valueComparator","type","Function","default","selectedClass","variant","VChipGroup","name","props","emits","value","setup","_ref","slots","themeClasses","isSelected","select","next","prev","selected","VChip","color","disabled","slideGroupProps","filterProps","class","style"],"sources":["../../../src/components/VChipGroup/VChipGroup.tsx"],"sourcesContent":["// Styles\nimport './VChipGroup.sass'\n\n// Components\nimport { makeVSlideGroupProps, VSlideGroup } from '@/components/VSlideGroup/VSlideGroup'\n\n// Composables\nimport { makeComponentProps } from '@/composables/component'\nimport { provideDefaults } from '@/composables/defaults'\nimport { makeGroupProps, useGroup } from '@/composables/group'\nimport { makeTagProps } from '@/composables/tag'\nimport { makeThemeProps, provideTheme } from '@/composables/theme'\nimport { makeVariantProps } from '@/composables/variant'\n\n// Utilities\nimport { toRef } from 'vue'\nimport { deepEqual, genericComponent, propsFactory, useRender } from '@/util'\n\n// Types\nimport type { PropType } from 'vue'\nimport type { GenericProps } from '@/util'\n\nexport const VChipGroupSymbol = Symbol.for('vuetify:v-chip-group')\n\nexport const makeVChipGroupProps = propsFactory({\n  baseColor: String,\n  column: Boolean,\n  filter: Boolean,\n  valueComparator: {\n    type: Function as PropType<typeof deepEqual>,\n    default: deepEqual,\n  },\n\n  ...makeVSlideGroupProps(),\n  ...makeComponentProps(),\n  ...makeGroupProps({ selectedClass: 'v-chip--selected' }),\n  ...makeTagProps(),\n  ...makeThemeProps(),\n  ...makeVariantProps({ variant: 'tonal' } as const),\n}, 'VChipGroup')\n\ntype VChipGroupSlots = {\n  default: {\n    isSelected: (id: string) => boolean\n    select: (id: string, value: boolean) => void\n    next: () => void\n    prev: () => void\n    selected: readonly string[]\n  }\n}\n\nexport const VChipGroup = genericComponent<new <T>(\n  props: {\n    modelValue?: T\n    'onUpdate:modelValue'?: (value: T) => void\n  },\n  slots: VChipGroupSlots,\n) => GenericProps<typeof props, typeof slots>>()({\n  name: 'VChipGroup',\n\n  props: makeVChipGroupProps(),\n\n  emits: {\n    'update:modelValue': (value: any) => true,\n  },\n\n  setup (props, { slots }) {\n    const { themeClasses } = provideTheme(props)\n    const { isSelected, select, next, prev, selected } = useGroup(props, VChipGroupSymbol)\n\n    provideDefaults({\n      VChip: {\n        baseColor: toRef(props, 'baseColor'),\n        color: toRef(props, 'color'),\n        disabled: toRef(props, 'disabled'),\n        filter: toRef(props, 'filter'),\n        variant: toRef(props, 'variant'),\n      },\n    })\n\n    useRender(() => {\n      const slideGroupProps = VSlideGroup.filterProps(props)\n\n      return (\n        <VSlideGroup\n          { ...slideGroupProps }\n          class={[\n            'v-chip-group',\n            {\n              'v-chip-group--column': props.column,\n            },\n            themeClasses.value,\n            props.class,\n          ]}\n          style={ props.style }\n        >\n          { slots.default?.({\n            isSelected,\n            select,\n            next,\n            prev,\n            selected: selected.value,\n          })}\n        </VSlideGroup>\n      )\n    })\n\n    return {}\n  },\n})\n\nexport type VChipGroup = InstanceType<typeof VChipGroup>\n"]},"metadata":{},"sourceType":"module"}