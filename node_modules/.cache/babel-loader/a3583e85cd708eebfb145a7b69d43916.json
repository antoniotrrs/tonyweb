{"ast":null,"code":"import { createVNode as _createVNode } from \"vue\"; // Styles\n\nimport \"./VSelectionControlGroup.css\"; // Composables\n\nimport { makeComponentProps } from \"../../composables/component.js\";\nimport { provideDefaults } from \"../../composables/defaults.js\";\nimport { makeDensityProps } from \"../../composables/density.js\";\nimport { IconValue } from \"../../composables/icons.js\";\nimport { useProxiedModel } from \"../../composables/proxiedModel.js\";\nimport { makeThemeProps } from \"../../composables/theme.js\"; // Utilities\n\nimport { computed, onScopeDispose, provide, toRef, useId } from 'vue';\nimport { deepEqual, genericComponent, propsFactory, useRender } from \"../../util/index.js\"; // Types\n\nexport const VSelectionControlGroupSymbol = Symbol.for('vuetify:selection-control-group');\nexport const makeSelectionControlGroupProps = propsFactory({\n  color: String,\n  disabled: {\n    type: Boolean,\n    default: null\n  },\n  defaultsTarget: String,\n  error: Boolean,\n  id: String,\n  inline: Boolean,\n  falseIcon: IconValue,\n  trueIcon: IconValue,\n  ripple: {\n    type: [Boolean, Object],\n    default: true\n  },\n  multiple: {\n    type: Boolean,\n    default: null\n  },\n  name: String,\n  readonly: {\n    type: Boolean,\n    default: null\n  },\n  modelValue: null,\n  type: String,\n  valueComparator: {\n    type: Function,\n    default: deepEqual\n  },\n  ...makeComponentProps(),\n  ...makeDensityProps(),\n  ...makeThemeProps()\n}, 'SelectionControlGroup');\nexport const makeVSelectionControlGroupProps = propsFactory({ ...makeSelectionControlGroupProps({\n    defaultsTarget: 'VSelectionControl'\n  })\n}, 'VSelectionControlGroup');\nexport const VSelectionControlGroup = genericComponent()({\n  name: 'VSelectionControlGroup',\n  props: makeVSelectionControlGroupProps(),\n  emits: {\n    'update:modelValue': value => true\n  },\n\n  setup(props, _ref) {\n    let {\n      slots\n    } = _ref;\n    const modelValue = useProxiedModel(props, 'modelValue');\n    const uid = useId();\n    const id = computed(() => props.id || `v-selection-control-group-${uid}`);\n    const name = computed(() => props.name || id.value);\n    const updateHandlers = new Set();\n    provide(VSelectionControlGroupSymbol, {\n      modelValue,\n      forceUpdate: () => {\n        updateHandlers.forEach(fn => fn());\n      },\n      onForceUpdate: cb => {\n        updateHandlers.add(cb);\n        onScopeDispose(() => {\n          updateHandlers.delete(cb);\n        });\n      }\n    });\n    provideDefaults({\n      [props.defaultsTarget]: {\n        color: toRef(props, 'color'),\n        disabled: toRef(props, 'disabled'),\n        density: toRef(props, 'density'),\n        error: toRef(props, 'error'),\n        inline: toRef(props, 'inline'),\n        modelValue,\n        multiple: computed(() => !!props.multiple || props.multiple == null && Array.isArray(modelValue.value)),\n        name,\n        falseIcon: toRef(props, 'falseIcon'),\n        trueIcon: toRef(props, 'trueIcon'),\n        readonly: toRef(props, 'readonly'),\n        ripple: toRef(props, 'ripple'),\n        type: toRef(props, 'type'),\n        valueComparator: toRef(props, 'valueComparator')\n      }\n    });\n    useRender(() => _createVNode(\"div\", {\n      \"class\": ['v-selection-control-group', {\n        'v-selection-control-group--inline': props.inline\n      }, props.class],\n      \"style\": props.style,\n      \"role\": props.type === 'radio' ? 'radiogroup' : undefined\n    }, [slots.default?.()]));\n    return {};\n  }\n\n});","map":{"version":3,"mappings":"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","names":["makeComponentProps","provideDefaults","makeDensityProps","IconValue","useProxiedModel","makeThemeProps","computed","onScopeDispose","provide","toRef","useId","deepEqual","genericComponent","propsFactory","useRender","VSelectionControlGroupSymbol","Symbol","for","makeSelectionControlGroupProps","color","String","disabled","type","Boolean","default","defaultsTarget","error","id","inline","falseIcon","trueIcon","ripple","Object","multiple","name","readonly","modelValue","valueComparator","Function","makeVSelectionControlGroupProps","VSelectionControlGroup","props","emits","value","setup","_ref","slots","uid","updateHandlers","Set","forceUpdate","forEach","fn","onForceUpdate","cb","add","delete","density","Array","isArray","class","style","undefined"],"sources":["../../../src/components/VSelectionControlGroup/VSelectionControlGroup.tsx"],"sourcesContent":["// Styles\nimport './VSelectionControlGroup.sass'\n\n// Composables\nimport { makeComponentProps } from '@/composables/component'\nimport { provideDefaults } from '@/composables/defaults'\nimport { makeDensityProps } from '@/composables/density'\nimport { IconValue } from '@/composables/icons'\nimport { useProxiedModel } from '@/composables/proxiedModel'\nimport { makeThemeProps } from '@/composables/theme'\n\n// Utilities\nimport { computed, onScopeDispose, provide, toRef, useId } from 'vue'\nimport { deepEqual, genericComponent, propsFactory, useRender } from '@/util'\n\n// Types\nimport type { InjectionKey, PropType, Ref } from 'vue'\nimport type { RippleDirectiveBinding } from '@/directives/ripple'\nimport type { GenericProps } from '@/util'\n\nexport interface VSelectionGroupContext {\n  modelValue: Ref<any>\n  forceUpdate: () => void\n  onForceUpdate: (fn: () => void) => void\n}\n\nexport const VSelectionControlGroupSymbol: InjectionKey<VSelectionGroupContext> = Symbol.for('vuetify:selection-control-group')\n\nexport const makeSelectionControlGroupProps = propsFactory({\n  color: String,\n  disabled: {\n    type: Boolean as PropType<boolean | null>,\n    default: null,\n  },\n  defaultsTarget: String,\n  error: Boolean,\n  id: String,\n  inline: Boolean,\n  falseIcon: IconValue,\n  trueIcon: IconValue,\n  ripple: {\n    type: [Boolean, Object] as PropType<RippleDirectiveBinding['value']>,\n    default: true,\n  },\n  multiple: {\n    type: Boolean as PropType<boolean | null>,\n    default: null,\n  },\n  name: String,\n  readonly: {\n    type: Boolean as PropType<boolean | null>,\n    default: null,\n  },\n  modelValue: null,\n  type: String,\n  valueComparator: {\n    type: Function as PropType<typeof deepEqual>,\n    default: deepEqual,\n  },\n\n  ...makeComponentProps(),\n  ...makeDensityProps(),\n  ...makeThemeProps(),\n}, 'SelectionControlGroup')\n\nexport const makeVSelectionControlGroupProps = propsFactory({\n  ...makeSelectionControlGroupProps({\n    defaultsTarget: 'VSelectionControl',\n  }),\n}, 'VSelectionControlGroup')\n\nexport const VSelectionControlGroup = genericComponent<new <T>(\n  props: {\n    modelValue?: T\n    'onUpdate:modelValue'?: (value: T) => void\n  },\n  slots: { default: never },\n) => GenericProps<typeof props, typeof slots>>()({\n  name: 'VSelectionControlGroup',\n\n  props: makeVSelectionControlGroupProps(),\n\n  emits: {\n    'update:modelValue': (value: any) => true,\n  },\n\n  setup (props, { slots }) {\n    const modelValue = useProxiedModel(props, 'modelValue')\n    const uid = useId()\n    const id = computed(() => props.id || `v-selection-control-group-${uid}`)\n    const name = computed(() => props.name || id.value)\n\n    const updateHandlers = new Set<() => void>()\n    provide(VSelectionControlGroupSymbol, {\n      modelValue,\n      forceUpdate: () => {\n        updateHandlers.forEach(fn => fn())\n      },\n      onForceUpdate: cb => {\n        updateHandlers.add(cb)\n        onScopeDispose(() => {\n          updateHandlers.delete(cb)\n        })\n      },\n    })\n\n    provideDefaults({\n      [props.defaultsTarget]: {\n        color: toRef(props, 'color'),\n        disabled: toRef(props, 'disabled'),\n        density: toRef(props, 'density'),\n        error: toRef(props, 'error'),\n        inline: toRef(props, 'inline'),\n        modelValue,\n        multiple: computed(() => !!props.multiple || (props.multiple == null && Array.isArray(modelValue.value))),\n        name,\n        falseIcon: toRef(props, 'falseIcon'),\n        trueIcon: toRef(props, 'trueIcon'),\n        readonly: toRef(props, 'readonly'),\n        ripple: toRef(props, 'ripple'),\n        type: toRef(props, 'type'),\n        valueComparator: toRef(props, 'valueComparator'),\n      },\n    })\n\n    useRender(() => (\n      <div\n        class={[\n          'v-selection-control-group',\n          { 'v-selection-control-group--inline': props.inline },\n          props.class,\n        ]}\n        style={ props.style }\n        role={ props.type === 'radio' ? 'radiogroup' : undefined }\n      >\n        { slots.default?.() }\n      </div>\n    ))\n\n    return {}\n  },\n})\n\nexport type VSelectionControlGroup = InstanceType<typeof VSelectionControlGroup>\n"]},"metadata":{},"sourceType":"module"}