{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n// Composables\nimport { useProxiedModel } from \"../../../composables/proxiedModel.js\"; // Utilities\n\nimport { inject, provide, toRef } from 'vue';\nimport { propsFactory } from \"../../../util/index.js\"; // Types\n\nexport const makeDataTableExpandProps = propsFactory({\n  expandOnClick: Boolean,\n  showExpand: Boolean,\n  expanded: {\n    type: Array,\n    default: () => []\n  }\n}, 'DataTable-expand');\nexport const VDataTableExpandedKey = Symbol.for('vuetify:datatable:expanded');\nexport function provideExpanded(props) {\n  const expandOnClick = toRef(props, 'expandOnClick');\n  const expanded = useProxiedModel(props, 'expanded', props.expanded, v => {\n    return new Set(v);\n  }, v => {\n    return [...v.values()];\n  });\n\n  function expand(item, value) {\n    const newExpanded = new Set(expanded.value);\n\n    if (!value) {\n      newExpanded.delete(item.value);\n    } else {\n      newExpanded.add(item.value);\n    }\n\n    expanded.value = newExpanded;\n  }\n\n  function isExpanded(item) {\n    return expanded.value.has(item.value);\n  }\n\n  function toggleExpand(item) {\n    expand(item, !isExpanded(item));\n  }\n\n  const data = {\n    expand,\n    expanded,\n    expandOnClick,\n    isExpanded,\n    toggleExpand\n  };\n  provide(VDataTableExpandedKey, data);\n  return data;\n}\nexport function useExpanded() {\n  const data = inject(VDataTableExpandedKey);\n  if (!data) throw new Error('foo');\n  return data;\n}","map":{"version":3,"mappings":";AAAA;AAAA,SACSA,eADT,QACwB,sCADxB,C,CAGA;;AACA,SAASC,MAAT,EAAiBC,OAAjB,EAA0BC,KAA1B,QAAuC,KAAvC;AAA4C,SACnCC,YADmC,QACvB,wBADuB,C,CAG5C;;AAIA,OAAO,MAAMC,wBAAwB,GAAGD,YAAY,CAAC;AACnDE,eAAa,EAAEC,OADoC;AAEnDC,YAAU,EAAED,OAFuC;AAGnDE,UAAQ,EAAE;AACRC,QAAI,EAAEC,KADE;AAERC,WAAO,EAAEA,MAAO;AAFR;AAHyC,CAAD,EAOjD,kBAPiD,CAA7C;AASP,OAAO,MAAMC,qBAMX,GAAGC,MAAM,CAACC,GAAPD,CAAW,4BAAXA,CANE;AAcP,OAAO,SAASE,eAAT,CAA0BC,KAA1B,EAA8C;AACnD,QAAMX,aAAa,GAAGH,KAAK,CAACc,KAAD,EAAQ,eAAR,CAA3B;AACA,QAAMR,QAAQ,GAAGT,eAAe,CAACiB,KAAD,EAAQ,UAAR,EAAoBA,KAAK,CAACR,QAA1B,EAAoCS,CAAC,IAAI;AACvE,WAAO,IAAIC,GAAJ,CAAQD,CAAR,CAAP;AACD,GAF+B,EAE7BA,CAAC,IAAI;AACN,WAAO,CAAC,GAAGA,CAAC,CAACE,MAAFF,EAAJ,CAAP;AACD,GAJ+B,CAAhC;;AAMA,WAASG,MAAT,CAAiBC,IAAjB,EAAsCC,KAAtC,EAAsD;AACpD,UAAMC,WAAW,GAAG,IAAIL,GAAJ,CAAQV,QAAQ,CAACc,KAAjB,CAApB;;AAEA,QAAI,CAACA,KAAL,EAAY;AACVC,iBAAW,CAACC,MAAZD,CAAmBF,IAAI,CAACC,KAAxBC;AACD,KAFD,MAEO;AACLA,iBAAW,CAACE,GAAZF,CAAgBF,IAAI,CAACC,KAArBC;AACF;;AAEAf,YAAQ,CAACc,KAATd,GAAiBe,WAAjBf;AACF;;AAEA,WAASkB,UAAT,CAAqBL,IAArB,EAA0C;AACxC,WAAOb,QAAQ,CAACc,KAATd,CAAemB,GAAfnB,CAAmBa,IAAI,CAACC,KAAxBd,CAAP;AACF;;AAEA,WAASoB,YAAT,CAAuBP,IAAvB,EAA4C;AAC1CD,UAAM,CAACC,IAAD,EAAO,CAACK,UAAU,CAACL,IAAD,CAAlB,CAAND;AACF;;AAEA,QAAMS,IAAI,GAAG;AAAET,UAAF;AAAUZ,YAAV;AAAoBH,iBAApB;AAAmCqB,cAAnC;AAA+CE;AAA/C,GAAb;AAEA3B,SAAO,CAACW,qBAAD,EAAwBiB,IAAxB,CAAP5B;AAEA,SAAO4B,IAAP;AACF;AAEA,OAAO,SAASC,WAAT,GAAwB;AAC7B,QAAMD,IAAI,GAAG7B,MAAM,CAACY,qBAAD,CAAnB;AAEA,MAAI,CAACiB,IAAL,EAAW,MAAM,IAAIE,KAAJ,CAAU,KAAV,CAAN;AAEX,SAAOF,IAAP;AACF","names":["useProxiedModel","inject","provide","toRef","propsFactory","makeDataTableExpandProps","expandOnClick","Boolean","showExpand","expanded","type","Array","default","VDataTableExpandedKey","Symbol","for","provideExpanded","props","v","Set","values","expand","item","value","newExpanded","delete","add","isExpanded","has","toggleExpand","data","useExpanded","Error"],"sources":["../../../../src/components/VDataTable/composables/expand.ts"],"sourcesContent":["// Composables\nimport { useProxiedModel } from '@/composables/proxiedModel'\n\n// Utilities\nimport { inject, provide, toRef } from 'vue'\nimport { propsFactory } from '@/util'\n\n// Types\nimport type { InjectionKey, PropType, Ref } from 'vue'\nimport type { DataTableItem } from '../types'\n\nexport const makeDataTableExpandProps = propsFactory({\n  expandOnClick: Boolean,\n  showExpand: Boolean,\n  expanded: {\n    type: Array as PropType<readonly string[]>,\n    default: () => ([]),\n  },\n}, 'DataTable-expand')\n\nexport const VDataTableExpandedKey: InjectionKey<{\n  expand: (item: DataTableItem, value: boolean) => void\n  expanded: Ref<Set<string>>\n  expandOnClick: Ref<boolean | undefined>\n  isExpanded: (item: DataTableItem) => boolean\n  toggleExpand: (item: DataTableItem) => void\n}> = Symbol.for('vuetify:datatable:expanded')\n\ntype ExpandProps = {\n  expandOnClick: boolean\n  expanded: readonly string[]\n  'onUpdate:expanded': ((value: any[]) => void) | undefined\n}\n\nexport function provideExpanded (props: ExpandProps) {\n  const expandOnClick = toRef(props, 'expandOnClick')\n  const expanded = useProxiedModel(props, 'expanded', props.expanded, v => {\n    return new Set(v)\n  }, v => {\n    return [...v.values()]\n  })\n\n  function expand (item: DataTableItem, value: boolean) {\n    const newExpanded = new Set(expanded.value)\n\n    if (!value) {\n      newExpanded.delete(item.value)\n    } else {\n      newExpanded.add(item.value)\n    }\n\n    expanded.value = newExpanded\n  }\n\n  function isExpanded (item: DataTableItem) {\n    return expanded.value.has(item.value)\n  }\n\n  function toggleExpand (item: DataTableItem) {\n    expand(item, !isExpanded(item))\n  }\n\n  const data = { expand, expanded, expandOnClick, isExpanded, toggleExpand }\n\n  provide(VDataTableExpandedKey, data)\n\n  return data\n}\n\nexport function useExpanded () {\n  const data = inject(VDataTableExpandedKey)\n\n  if (!data) throw new Error('foo')\n\n  return data\n}\n"]},"metadata":{},"sourceType":"module"}