{"ast":null,"code":"import _objectSpread from \"/Users/antoniotorres/Documents/tony/tonyweb/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"/Users/antoniotorres/Documents/tony/tonyweb/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _createForOfIteratorHelper from \"/Users/antoniotorres/Documents/tony/tonyweb/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nvar _excluded = [\"activated\", \"id\"],\n    _excluded2 = [\"id\", \"activated\", \"children\"],\n    _excluded3 = [\"id\", \"activated\", \"children\"];\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.set.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.array.slice.js\";\n\n/* eslint-disable sonarjs/no-identical-functions */\n// Utilities\nimport { toRaw } from 'vue';\nimport { wrapInArray } from \"../../util/index.js\";\nexport var independentActiveStrategy = function independentActiveStrategy(mandatory) {\n  var strategy = {\n    activate: function activate(_ref) {\n      var id = _ref.id,\n          value = _ref.value,\n          activated = _ref.activated;\n      id = toRaw(id); // When mandatory and we're trying to deselect when id\n      // is the only currently selected item then do nothing\n\n      if (mandatory && !value && activated.size === 1 && activated.has(id)) return activated;\n\n      if (value) {\n        activated.add(id);\n      } else {\n        activated.delete(id);\n      }\n\n      return activated;\n    },\n    in: function _in(v, children, parents) {\n      var set = new Set();\n\n      if (v != null) {\n        var _iterator = _createForOfIteratorHelper(wrapInArray(v)),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var id = _step.value;\n            set = strategy.activate({\n              id: id,\n              value: true,\n              activated: new Set(set),\n              children: children,\n              parents: parents\n            });\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n\n      return set;\n    },\n    out: function out(v) {\n      return Array.from(v);\n    }\n  };\n  return strategy;\n};\nexport var independentSingleActiveStrategy = function independentSingleActiveStrategy(mandatory) {\n  var parentStrategy = independentActiveStrategy(mandatory);\n  var strategy = {\n    activate: function activate(_ref2) {\n      var activated = _ref2.activated,\n          id = _ref2.id,\n          rest = _objectWithoutProperties(_ref2, _excluded);\n\n      id = toRaw(id);\n      var singleSelected = activated.has(id) ? new Set([id]) : new Set();\n      return parentStrategy.activate(_objectSpread(_objectSpread({}, rest), {}, {\n        id: id,\n        activated: singleSelected\n      }));\n    },\n    in: function _in(v, children, parents) {\n      var set = new Set();\n\n      if (v != null) {\n        var arr = wrapInArray(v);\n\n        if (arr.length) {\n          set = parentStrategy.in(arr.slice(0, 1), children, parents);\n        }\n      }\n\n      return set;\n    },\n    out: function out(v, children, parents) {\n      return parentStrategy.out(v, children, parents);\n    }\n  };\n  return strategy;\n};\nexport var leafActiveStrategy = function leafActiveStrategy(mandatory) {\n  var parentStrategy = independentActiveStrategy(mandatory);\n  var strategy = {\n    activate: function activate(_ref3) {\n      var id = _ref3.id,\n          activated = _ref3.activated,\n          children = _ref3.children,\n          rest = _objectWithoutProperties(_ref3, _excluded2);\n\n      id = toRaw(id);\n      if (children.has(id)) return activated;\n      return parentStrategy.activate(_objectSpread({\n        id: id,\n        activated: activated,\n        children: children\n      }, rest));\n    },\n    in: parentStrategy.in,\n    out: parentStrategy.out\n  };\n  return strategy;\n};\nexport var leafSingleActiveStrategy = function leafSingleActiveStrategy(mandatory) {\n  var parentStrategy = independentSingleActiveStrategy(mandatory);\n  var strategy = {\n    activate: function activate(_ref4) {\n      var id = _ref4.id,\n          activated = _ref4.activated,\n          children = _ref4.children,\n          rest = _objectWithoutProperties(_ref4, _excluded3);\n\n      id = toRaw(id);\n      if (children.has(id)) return activated;\n      return parentStrategy.activate(_objectSpread({\n        id: id,\n        activated: activated,\n        children: children\n      }, rest));\n    },\n    in: parentStrategy.in,\n    out: parentStrategy.out\n  };\n  return strategy;\n};","map":{"version":3,"mappings":"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","names":["toRaw","wrapInArray","independentActiveStrategy","mandatory","strategy","activate","_ref","id","value","activated","size","has","add","delete","in","v","children","parents","set","Set","out","Array","from","independentSingleActiveStrategy","parentStrategy","_ref2","rest","singleSelected","arr","length","slice","leafActiveStrategy","_ref3","leafSingleActiveStrategy","_ref4"],"sources":["../../../src/composables/nested/activeStrategies.ts"],"sourcesContent":["/* eslint-disable sonarjs/no-identical-functions */\n// Utilities\nimport { toRaw } from 'vue'\nimport { wrapInArray } from '@/util'\n\ntype ActiveStrategyFunction = (data: {\n  id: unknown\n  value: boolean\n  activated: Set<unknown>\n  children: Map<unknown, unknown[]>\n  parents: Map<unknown, unknown>\n  event?: Event\n}) => Set<unknown>\n\ntype ActiveStrategyTransformInFunction = (\n  v: unknown | undefined,\n  children: Map<unknown, unknown[]>,\n  parents: Map<unknown, unknown>,\n) => Set<unknown>\n\ntype ActiveStrategyTransformOutFunction = (\n  v: Set<unknown>,\n  children: Map<unknown, unknown[]>,\n  parents: Map<unknown, unknown>,\n) => unknown\n\nexport type ActiveStrategy = {\n  activate: ActiveStrategyFunction\n  in: ActiveStrategyTransformInFunction\n  out: ActiveStrategyTransformOutFunction\n}\n\nexport const independentActiveStrategy = (mandatory?: boolean): ActiveStrategy => {\n  const strategy: ActiveStrategy = {\n    activate: ({ id, value, activated }) => {\n      id = toRaw(id)\n\n      // When mandatory and we're trying to deselect when id\n      // is the only currently selected item then do nothing\n      if (mandatory && !value && activated.size === 1 && activated.has(id)) return activated\n\n      if (value) {\n        activated.add(id)\n      } else {\n        activated.delete(id)\n      }\n\n      return activated\n    },\n    in: (v, children, parents) => {\n      let set = new Set()\n\n      if (v != null) {\n        for (const id of wrapInArray(v)) {\n          set = strategy.activate({\n            id,\n            value: true,\n            activated: new Set(set),\n            children,\n            parents,\n          })\n        }\n      }\n\n      return set\n    },\n    out: v => {\n      return Array.from(v)\n    },\n  }\n\n  return strategy\n}\n\nexport const independentSingleActiveStrategy = (mandatory?: boolean): ActiveStrategy => {\n  const parentStrategy = independentActiveStrategy(mandatory)\n\n  const strategy: ActiveStrategy = {\n    activate: ({ activated, id, ...rest }) => {\n      id = toRaw(id)\n      const singleSelected = activated.has(id) ? new Set([id]) : new Set()\n      return parentStrategy.activate({ ...rest, id, activated: singleSelected })\n    },\n    in: (v, children, parents) => {\n      let set = new Set()\n\n      if (v != null) {\n        const arr = wrapInArray(v)\n        if (arr.length) {\n          set = parentStrategy.in(arr.slice(0, 1), children, parents)\n        }\n      }\n\n      return set\n    },\n    out: (v, children, parents) => {\n      return parentStrategy.out(v, children, parents)\n    },\n  }\n\n  return strategy\n}\n\nexport const leafActiveStrategy = (mandatory?: boolean): ActiveStrategy => {\n  const parentStrategy = independentActiveStrategy(mandatory)\n\n  const strategy: ActiveStrategy = {\n    activate: ({ id, activated, children, ...rest }) => {\n      id = toRaw(id)\n      if (children.has(id)) return activated\n\n      return parentStrategy.activate({ id, activated, children, ...rest })\n    },\n    in: parentStrategy.in,\n    out: parentStrategy.out,\n  }\n\n  return strategy\n}\n\nexport const leafSingleActiveStrategy = (mandatory?: boolean): ActiveStrategy => {\n  const parentStrategy = independentSingleActiveStrategy(mandatory)\n\n  const strategy: ActiveStrategy = {\n    activate: ({ id, activated, children, ...rest }) => {\n      id = toRaw(id)\n      if (children.has(id)) return activated\n\n      return parentStrategy.activate({ id, activated, children, ...rest })\n    },\n    in: parentStrategy.in,\n    out: parentStrategy.out,\n  }\n\n  return strategy\n}\n"]},"metadata":{},"sourceType":"module"}