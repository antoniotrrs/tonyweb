{"ast":null,"code":"import { createVNode as _createVNode, Fragment as _Fragment, mergeProps as _mergeProps } from \"vue\"; // Styles\n\nimport \"./VSwitch.css\"; // Components\n\nimport { VScaleTransition } from \"../transitions/index.js\";\nimport { VDefaultsProvider } from \"../VDefaultsProvider/VDefaultsProvider.js\";\nimport { VIcon } from \"../VIcon/index.js\";\nimport { makeVInputProps, VInput } from \"../VInput/VInput.js\";\nimport { VProgressCircular } from \"../VProgressCircular/index.js\";\nimport { makeVSelectionControlProps, VSelectionControl } from \"../VSelectionControl/VSelectionControl.js\"; // Composables\n\nimport { useFocus } from \"../../composables/focus.js\";\nimport { LoaderSlot, useLoader } from \"../../composables/loader.js\";\nimport { useProxiedModel } from \"../../composables/proxiedModel.js\"; // Utilities\n\nimport { computed, ref, useId } from 'vue';\nimport { filterInputAttrs, genericComponent, IN_BROWSER, propsFactory, useRender } from \"../../util/index.js\"; // Types\n\nexport const makeVSwitchProps = propsFactory({\n  indeterminate: Boolean,\n  inset: Boolean,\n  flat: Boolean,\n  loading: {\n    type: [Boolean, String],\n    default: false\n  },\n  ...makeVInputProps(),\n  ...makeVSelectionControlProps()\n}, 'VSwitch');\nexport const VSwitch = genericComponent()({\n  name: 'VSwitch',\n  inheritAttrs: false,\n  props: makeVSwitchProps(),\n  emits: {\n    'update:focused': focused => true,\n    'update:modelValue': value => true,\n    'update:indeterminate': value => true\n  },\n\n  setup(props, _ref) {\n    let {\n      attrs,\n      slots\n    } = _ref;\n    const indeterminate = useProxiedModel(props, 'indeterminate');\n    const model = useProxiedModel(props, 'modelValue');\n    const {\n      loaderClasses\n    } = useLoader(props);\n    const {\n      isFocused,\n      focus,\n      blur\n    } = useFocus(props);\n    const control = ref();\n    const isForcedColorsModeActive = IN_BROWSER && window.matchMedia('(forced-colors: active)').matches;\n    const loaderColor = computed(() => {\n      return typeof props.loading === 'string' && props.loading !== '' ? props.loading : props.color;\n    });\n    const uid = useId();\n    const id = computed(() => props.id || `switch-${uid}`);\n\n    function onChange() {\n      if (indeterminate.value) {\n        indeterminate.value = false;\n      }\n    }\n\n    function onTrackClick(e) {\n      e.stopPropagation();\n      e.preventDefault();\n      control.value?.input?.click();\n    }\n\n    useRender(() => {\n      const [rootAttrs, controlAttrs] = filterInputAttrs(attrs);\n      const inputProps = VInput.filterProps(props);\n      const controlProps = VSelectionControl.filterProps(props);\n      return _createVNode(VInput, _mergeProps({\n        \"class\": ['v-switch', {\n          'v-switch--flat': props.flat\n        }, {\n          'v-switch--inset': props.inset\n        }, {\n          'v-switch--indeterminate': indeterminate.value\n        }, loaderClasses.value, props.class]\n      }, rootAttrs, inputProps, {\n        \"modelValue\": model.value,\n        \"onUpdate:modelValue\": $event => model.value = $event,\n        \"id\": id.value,\n        \"focused\": isFocused.value,\n        \"style\": props.style\n      }), { ...slots,\n        default: _ref2 => {\n          let {\n            id,\n            messagesId,\n            isDisabled,\n            isReadonly,\n            isValid\n          } = _ref2;\n          const slotProps = {\n            model,\n            isValid\n          };\n          return _createVNode(VSelectionControl, _mergeProps({\n            \"ref\": control\n          }, controlProps, {\n            \"modelValue\": model.value,\n            \"onUpdate:modelValue\": [$event => model.value = $event, onChange],\n            \"id\": id.value,\n            \"aria-describedby\": messagesId.value,\n            \"type\": \"checkbox\",\n            \"aria-checked\": indeterminate.value ? 'mixed' : undefined,\n            \"disabled\": isDisabled.value,\n            \"readonly\": isReadonly.value,\n            \"onFocus\": focus,\n            \"onBlur\": blur\n          }, controlAttrs), { ...slots,\n            default: _ref3 => {\n              let {\n                backgroundColorClasses,\n                backgroundColorStyles\n              } = _ref3;\n              return _createVNode(\"div\", {\n                \"class\": ['v-switch__track', !isForcedColorsModeActive ? backgroundColorClasses.value : undefined],\n                \"style\": backgroundColorStyles.value,\n                \"onClick\": onTrackClick\n              }, [slots['track-true'] && _createVNode(\"div\", {\n                \"key\": \"prepend\",\n                \"class\": \"v-switch__track-true\"\n              }, [slots['track-true'](slotProps)]), slots['track-false'] && _createVNode(\"div\", {\n                \"key\": \"append\",\n                \"class\": \"v-switch__track-false\"\n              }, [slots['track-false'](slotProps)])]);\n            },\n            input: _ref4 => {\n              let {\n                inputNode,\n                icon,\n                backgroundColorClasses,\n                backgroundColorStyles\n              } = _ref4;\n              return _createVNode(_Fragment, null, [inputNode, _createVNode(\"div\", {\n                \"class\": ['v-switch__thumb', {\n                  'v-switch__thumb--filled': icon || props.loading\n                }, props.inset || isForcedColorsModeActive ? undefined : backgroundColorClasses.value],\n                \"style\": props.inset ? undefined : backgroundColorStyles.value\n              }, [slots.thumb ? _createVNode(VDefaultsProvider, {\n                \"defaults\": {\n                  VIcon: {\n                    icon,\n                    size: 'x-small'\n                  }\n                }\n              }, {\n                default: () => [slots.thumb({ ...slotProps,\n                  icon\n                })]\n              }) : _createVNode(VScaleTransition, null, {\n                default: () => [!props.loading ? icon && _createVNode(VIcon, {\n                  \"key\": String(icon),\n                  \"icon\": icon,\n                  \"size\": \"x-small\"\n                }, null) : _createVNode(LoaderSlot, {\n                  \"name\": \"v-switch\",\n                  \"active\": true,\n                  \"color\": isValid.value === false ? undefined : loaderColor.value\n                }, {\n                  default: slotProps => slots.loader ? slots.loader(slotProps) : _createVNode(VProgressCircular, {\n                    \"active\": slotProps.isActive,\n                    \"color\": slotProps.color,\n                    \"indeterminate\": true,\n                    \"size\": \"16\",\n                    \"width\": \"2\"\n                  }, null)\n                })]\n              })])]);\n            }\n          });\n        }\n      });\n    });\n    return {};\n  }\n\n});","map":{"version":3,"mappings":"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","names":["VScaleTransition","VDefaultsProvider","VIcon","makeVInputProps","VInput","VProgressCircular","makeVSelectionControlProps","VSelectionControl","useFocus","LoaderSlot","useLoader","useProxiedModel","computed","ref","useId","filterInputAttrs","genericComponent","IN_BROWSER","propsFactory","useRender","makeVSwitchProps","indeterminate","Boolean","inset","flat","loading","type","String","default","VSwitch","name","inheritAttrs","props","emits","focused","value","setup","_ref","attrs","slots","model","loaderClasses","isFocused","focus","blur","control","isForcedColorsModeActive","window","matchMedia","matches","loaderColor","color","uid","id","onChange","onTrackClick","e","stopPropagation","preventDefault","input","click","rootAttrs","controlAttrs","inputProps","filterProps","controlProps","class","$event","style","_ref2","messagesId","isDisabled","isReadonly","isValid","slotProps","undefined","_ref3","backgroundColorClasses","backgroundColorStyles","_createVNode","_ref4","inputNode","icon","thumb","size","loader","isActive"],"sources":["../../../src/components/VSwitch/VSwitch.tsx"],"sourcesContent":["// Styles\nimport './VSwitch.sass'\n\n// Components\nimport { VScaleTransition } from '@/components/transitions'\nimport { VDefaultsProvider } from '@/components/VDefaultsProvider/VDefaultsProvider'\nimport { VIcon } from '@/components/VIcon'\nimport { makeVInputProps, VInput } from '@/components/VInput/VInput'\nimport { VProgressCircular } from '@/components/VProgressCircular'\nimport { makeVSelectionControlProps, VSelectionControl } from '@/components/VSelectionControl/VSelectionControl'\n\n// Composables\nimport { useFocus } from '@/composables/focus'\nimport { LoaderSlot, useLoader } from '@/composables/loader'\nimport { useProxiedModel } from '@/composables/proxiedModel'\n\n// Utilities\nimport { computed, ref, useId } from 'vue'\nimport { filterInputAttrs, genericComponent, IN_BROWSER, propsFactory, useRender } from '@/util'\n\n// Types\nimport type { ComputedRef, Ref } from 'vue'\nimport type { VInputSlots } from '@/components/VInput/VInput'\nimport type { VSelectionControlSlots } from '@/components/VSelectionControl/VSelectionControl'\nimport type { IconValue } from '@/composables/icons'\nimport type { LoaderSlotProps } from '@/composables/loader'\nimport type { GenericProps } from '@/util'\n\nexport type VSwitchSlot = {\n  model: Ref<boolean>\n  isValid: ComputedRef<boolean | null>\n}\n\nexport type VSwitchSlots =\n  & VInputSlots\n  & VSelectionControlSlots\n  & {\n    loader: LoaderSlotProps\n    thumb: { icon: IconValue | undefined } & VSwitchSlot\n    'track-false': VSwitchSlot\n    'track-true': VSwitchSlot\n  }\n\nexport const makeVSwitchProps = propsFactory({\n  indeterminate: Boolean,\n  inset: Boolean,\n  flat: Boolean,\n  loading: {\n    type: [Boolean, String],\n    default: false,\n  },\n\n  ...makeVInputProps(),\n  ...makeVSelectionControlProps(),\n}, 'VSwitch')\n\nexport const VSwitch = genericComponent<new <T>(\n  props: {\n    modelValue?: T | null\n    'onUpdate:modelValue'?: (value: T | null) => void\n  },\n  slots: VSwitchSlots,\n) => GenericProps<typeof props, typeof slots>>()({\n  name: 'VSwitch',\n\n  inheritAttrs: false,\n\n  props: makeVSwitchProps(),\n\n  emits: {\n    'update:focused': (focused: boolean) => true,\n    'update:modelValue': (value: any) => true,\n    'update:indeterminate': (value: boolean) => true,\n  },\n\n  setup (props, { attrs, slots }) {\n    const indeterminate = useProxiedModel(props, 'indeterminate')\n    const model = useProxiedModel(props, 'modelValue')\n    const { loaderClasses } = useLoader(props)\n    const { isFocused, focus, blur } = useFocus(props)\n    const control = ref<VSelectionControl>()\n    const isForcedColorsModeActive = IN_BROWSER && window.matchMedia('(forced-colors: active)').matches\n\n    const loaderColor = computed(() => {\n      return typeof props.loading === 'string' && props.loading !== ''\n        ? props.loading\n        : props.color\n    })\n\n    const uid = useId()\n    const id = computed(() => props.id || `switch-${uid}`)\n\n    function onChange () {\n      if (indeterminate.value) {\n        indeterminate.value = false\n      }\n    }\n    function onTrackClick (e: Event) {\n      e.stopPropagation()\n      e.preventDefault()\n      control.value?.input?.click()\n    }\n\n    useRender(() => {\n      const [rootAttrs, controlAttrs] = filterInputAttrs(attrs)\n      const inputProps = VInput.filterProps(props)\n      const controlProps = VSelectionControl.filterProps(props)\n\n      return (\n        <VInput\n          class={[\n            'v-switch',\n            { 'v-switch--flat': props.flat },\n            { 'v-switch--inset': props.inset },\n            { 'v-switch--indeterminate': indeterminate.value },\n            loaderClasses.value,\n            props.class,\n          ]}\n          { ...rootAttrs }\n          { ...inputProps }\n          v-model={ model.value }\n          id={ id.value }\n          focused={ isFocused.value }\n          style={ props.style }\n        >\n          {{\n            ...slots,\n            default: ({\n              id,\n              messagesId,\n              isDisabled,\n              isReadonly,\n              isValid,\n            }) => {\n              const slotProps = {\n                model,\n                isValid,\n              }\n\n              return (\n                <VSelectionControl\n                  ref={ control }\n                  { ...controlProps }\n                  v-model={ model.value }\n                  id={ id.value }\n                  aria-describedby={ messagesId.value }\n                  type=\"checkbox\"\n                  onUpdate:modelValue={ onChange }\n                  aria-checked={ indeterminate.value ? 'mixed' : undefined }\n                  disabled={ isDisabled.value }\n                  readonly={ isReadonly.value }\n                  onFocus={ focus }\n                  onBlur={ blur }\n                  { ...controlAttrs }\n                >\n                  {{\n                    ...slots,\n                    default: ({ backgroundColorClasses, backgroundColorStyles }) => (\n                      <div\n                        class={[\n                          'v-switch__track',\n                          !isForcedColorsModeActive ? backgroundColorClasses.value : undefined,\n                        ]}\n                        style={ backgroundColorStyles.value }\n                        onClick={ onTrackClick }\n                      >\n                        { slots['track-true'] && (\n                          <div key=\"prepend\" class=\"v-switch__track-true\">\n                            { slots['track-true'](slotProps) }\n                          </div>\n                        )}\n\n                        { slots['track-false'] && (\n                          <div key=\"append\" class=\"v-switch__track-false\">\n                            { slots['track-false'](slotProps) }\n                          </div>\n                        )}\n                      </div>\n                    ),\n                    input: ({ inputNode, icon, backgroundColorClasses, backgroundColorStyles }) => (\n                      <>\n                        { inputNode }\n                        <div\n                          class={[\n                            'v-switch__thumb',\n                            { 'v-switch__thumb--filled': icon || props.loading },\n                            props.inset || isForcedColorsModeActive ? undefined : backgroundColorClasses.value,\n                          ]}\n                          style={ props.inset ? undefined : backgroundColorStyles.value }\n                        >\n                          { slots.thumb ? (\n                            <VDefaultsProvider\n                              defaults={{\n                                VIcon: {\n                                  icon,\n                                  size: 'x-small',\n                                },\n                              }}\n                            >\n                              { slots.thumb({ ...slotProps, icon }) }\n                            </VDefaultsProvider>\n                          ) : (\n                            <VScaleTransition>\n                              { !props.loading ? (\n                                (icon && (\n                                  <VIcon\n                                    key={ String(icon) }\n                                    icon={ icon }\n                                    size=\"x-small\"\n                                  />\n                                ))) : (\n                                <LoaderSlot\n                                  name=\"v-switch\"\n                                  active\n                                  color={ isValid.value === false ? undefined : loaderColor.value }\n                                >\n                                  { slotProps => (\n                                    slots.loader\n                                      ? slots.loader(slotProps)\n                                      : (\n                                        <VProgressCircular\n                                          active={ slotProps.isActive }\n                                          color={ slotProps.color }\n                                          indeterminate\n                                          size=\"16\"\n                                          width=\"2\"\n                                        />\n                                      )\n                                  )}\n                                </LoaderSlot>\n                              )}\n                            </VScaleTransition>\n                          )}\n                        </div>\n                      </>\n                    ),\n                  }}\n                </VSelectionControl>\n              )\n            },\n          }}\n        </VInput>\n      )\n    })\n\n    return {}\n  },\n})\n\nexport type VSwitch = InstanceType<typeof VSwitch>\n"]},"metadata":{},"sourceType":"module"}