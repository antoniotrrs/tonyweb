{"ast":null,"code":"import \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.object.to-string.js\";\n// Utilities\nimport { onBeforeUnmount, ref, shallowRef, watch } from 'vue';\nimport { SUPPORTS_INTERSECTION } from \"../util/index.js\";\nexport function useIntersectionObserver(callback, options) {\n  var intersectionRef = ref();\n  var isIntersecting = shallowRef(false);\n\n  if (SUPPORTS_INTERSECTION) {\n    var observer = new IntersectionObserver(function (entries) {\n      callback === null || callback === void 0 ? void 0 : callback(entries, observer);\n      isIntersecting.value = !!entries.find(function (entry) {\n        return entry.isIntersecting;\n      });\n    }, options);\n    onBeforeUnmount(function () {\n      observer.disconnect();\n    });\n    watch(intersectionRef, function (newValue, oldValue) {\n      if (oldValue) {\n        observer.unobserve(oldValue);\n        isIntersecting.value = false;\n      }\n\n      if (newValue) observer.observe(newValue);\n    }, {\n      flush: 'post'\n    });\n  }\n\n  return {\n    intersectionRef: intersectionRef,\n    isIntersecting: isIntersecting\n  };\n}","map":{"version":3,"mappings":";;AAAA;AACA,SAASA,eAAT,EAA0BC,GAA1B,EAA+BC,UAA/B,EAA2CC,KAA3C,QAAwD,KAAxD;AAA6D,SACpDC,qBADoD,QAC/B,kBAD+B;AAG7D,OAAO,SAASC,uBAAT,CAAkCC,QAAlC,EAA2EC,OAA3E,EAA+G;AACpH,MAAMC,eAAe,GAAGP,GAAG,EAA3B;AACA,MAAMQ,cAAc,GAAGP,UAAU,CAAC,KAAD,CAAjC;;AAEA,MAAIE,qBAAJ,EAA2B;AACzB,QAAMM,QAAQ,GAAG,IAAIC,oBAAJ,CAA0BC,iBAAoC,EAAK;AAClFN,cAAQ,SAARA,YAAQ,WAARA,oBAAQ,CAAGM,OAAH,EAAYF,QAAZ,CAARJ;AAEAG,oBAAc,CAACI,KAAfJ,GAAuB,CAAC,CAACG,OAAO,CAACE,IAARF,CAAaG,eAAK;AAAA,eAAIA,KAAK,CAACN,cAAV;AAAA,OAAlBG,CAAzBH;AACD,KAJgB,EAIdF,OAJc,CAAjB;AAMAP,mBAAe,CAAC,YAAM;AACpBU,cAAQ,CAACM,UAATN;AACD,KAFc,CAAfV;AAIAG,SAAK,CAACK,eAAD,EAAkB,UAACS,QAAD,EAAWC,QAAX,EAAwB;AAC7C,UAAIA,QAAJ,EAAc;AACZR,gBAAQ,CAACS,SAATT,CAAmBQ,QAAnBR;AACAD,sBAAc,CAACI,KAAfJ,GAAuB,KAAvBA;AACF;;AAEA,UAAIQ,QAAJ,EAAcP,QAAQ,CAACU,OAATV,CAAiBO,QAAjBP;AACf,KAPI,EAOF;AACDW,WAAK,EAAE;AADN,KAPE,CAALlB;AAUF;;AAEA,SAAO;AAAEK,mBAAe,EAAfA,eAAF;AAAmBC;AAAnB,GAAP;AACF","names":["onBeforeUnmount","ref","shallowRef","watch","SUPPORTS_INTERSECTION","useIntersectionObserver","callback","options","intersectionRef","isIntersecting","observer","IntersectionObserver","entries","value","find","entry","disconnect","newValue","oldValue","unobserve","observe","flush"],"sources":["../../src/composables/intersectionObserver.ts"],"sourcesContent":["// Utilities\nimport { onBeforeUnmount, ref, shallowRef, watch } from 'vue'\nimport { SUPPORTS_INTERSECTION } from '@/util'\n\nexport function useIntersectionObserver (callback?: IntersectionObserverCallback, options?: IntersectionObserverInit) {\n  const intersectionRef = ref<HTMLElement>()\n  const isIntersecting = shallowRef(false)\n\n  if (SUPPORTS_INTERSECTION) {\n    const observer = new IntersectionObserver((entries: IntersectionObserverEntry[]) => {\n      callback?.(entries, observer)\n\n      isIntersecting.value = !!entries.find(entry => entry.isIntersecting)\n    }, options)\n\n    onBeforeUnmount(() => {\n      observer.disconnect()\n    })\n\n    watch(intersectionRef, (newValue, oldValue) => {\n      if (oldValue) {\n        observer.unobserve(oldValue)\n        isIntersecting.value = false\n      }\n\n      if (newValue) observer.observe(newValue)\n    }, {\n      flush: 'post',\n    })\n  }\n\n  return { intersectionRef, isIntersecting }\n}\n"]},"metadata":{},"sourceType":"module"}