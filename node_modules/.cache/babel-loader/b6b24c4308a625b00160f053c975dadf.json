{"ast":null,"code":"import _objectSpread from \"/Users/antoniotorres/Documents/tony/tonyweb/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport { createVNode as _createVNode } from \"vue\"; // Styles\n\nimport \"./VMessages.css\"; // Components\n\nimport { VSlideYTransition } from \"../transitions/index.js\"; // Composables\n\nimport { useTextColor } from \"../../composables/color.js\";\nimport { makeComponentProps } from \"../../composables/component.js\";\nimport { makeTransitionProps, MaybeTransition } from \"../../composables/transition.js\"; // Utilities\n\nimport { computed } from 'vue';\nimport { genericComponent, propsFactory, useRender, wrapInArray } from \"../../util/index.js\"; // Types\n\nexport var makeVMessagesProps = propsFactory(_objectSpread(_objectSpread({\n  active: Boolean,\n  color: String,\n  messages: {\n    type: [Array, String],\n    default: function _default() {\n      return [];\n    }\n  }\n}, makeComponentProps()), makeTransitionProps({\n  transition: {\n    component: VSlideYTransition,\n    leaveAbsolute: true,\n    group: true\n  }\n})), 'VMessages');\nexport var VMessages = genericComponent()({\n  name: 'VMessages',\n  props: makeVMessagesProps(),\n  setup: function setup(props, _ref) {\n    var slots = _ref.slots;\n    var messages = computed(function () {\n      return wrapInArray(props.messages);\n    });\n\n    var _useTextColor = useTextColor(computed(function () {\n      return props.color;\n    })),\n        textColorClasses = _useTextColor.textColorClasses,\n        textColorStyles = _useTextColor.textColorStyles;\n\n    useRender(function () {\n      return _createVNode(MaybeTransition, {\n        \"transition\": props.transition,\n        \"tag\": \"div\",\n        \"class\": ['v-messages', textColorClasses.value, props.class],\n        \"style\": [textColorStyles.value, props.style]\n      }, {\n        default: function _default() {\n          return [props.active && messages.value.map(function (message, i) {\n            return _createVNode(\"div\", {\n              \"class\": \"v-messages__message\",\n              \"key\": \"\".concat(i, \"-\").concat(messages.value)\n            }, [slots.message ? slots.message({\n              message: message\n            }) : message]);\n          })];\n        }\n      });\n    });\n    return {};\n  }\n});","map":{"version":3,"mappings":";;;mDAAA;;AACA,yB,CAEA;;AAAA,SACSA,iBADT,QAC0B,yBAD1B,C,CAGA;;AAAA,SACSC,YADT,QACqB,4BADrB;AACqB,SACZC,kBADY,QACM,gCADN;AACM,SAClBC,mBADkB,EACGC,eADH,QACkB,iCADlB,C,CAG3B;;AACA,SAASC,QAAT,QAAyB,KAAzB;AAA8B,SACrBC,gBADqB,EACHC,YADG,EACWC,SADX,EACsBC,WADtB,QACiC,qBADjC,C,CAG9B;;AAWA,OAAO,IAAMC,kBAAkB,GAAGH,YAAY;AAC5CI,QAAM,EAAEC,OADoC;AAE5CC,OAAK,EAAEC,MAFqC;AAG5CC,UAAQ,EAAE;AACRC,QAAI,EAAE,CAACC,KAAD,EAAQH,MAAR,CADE;AAERI,WAAO,EAAEA;AAAAA,aAAO,EAAPA;AAAAA;AAFD;AAHkC,GAQzChB,kBAAkB,EARuB,GASzCC,mBAAmB,CAAC;AACrBgB,YAAU,EAAE;AACVC,aAAS,EAAEpB,iBADD;AAEVqB,iBAAa,EAAE,IAFL;AAGVC,SAAK,EAAE;AAHG;AADS,CAAD,CATsB,GAgB3C,WAhB2C,CAAvC;AAkBP,OAAO,IAAMC,SAAS,GAAGjB,gBAAgB,GAAmB;AAC1DkB,MAAI,EAAE,WADoD;AAG1DC,OAAK,EAAEf,kBAAkB,EAHiC;AAK1DgB,OAL0D,iBAKnDD,KALmD,EAK9CE,IAL8C,EAKjC;AAAA,QAATC,KAAS,GAAFD,IAAE,CAATC,KAAS;AACvB,QAAMb,QAAQ,GAAGV,QAAQ,CAAC;AAAA,aAAMI,WAAW,CAACgB,KAAK,CAACV,QAAP,CAAjB;AAAA,KAAD,CAAzB;;AACA,wBAA8Cd,YAAY,CAACI,QAAQ,CAAC;AAAA,aAAMoB,KAAK,CAACZ,KAAZ;AAAA,KAAD,CAAT,CAA1D;AAAA,QAAQgB,gBAAR,iBAAQA,gBAAR;AAAA,QAA0BC,eAA1B,iBAA0BA,eAA1B;;AAEAtB,aAAS,CAAC;AAAA;AAAA,sBAEOiB,KAAK,CAACN,UAFb;AAEuB,oBAFvB;AAEuB,iBAEtB,CACL,YADK,EAELU,gBAAgB,CAACE,KAFZ,EAGLN,KAAK,CAACO,KAHD,CAJD;AAQL,iBACM,CACLF,eAAe,CAACC,KADX,EAELN,KAAK,CAACQ,KAFD;AATD,SAYL;AAAAf;AAAAA,kBAECO,KAAK,CAACd,MAANc,IACAV,QAAQ,CAACgB,KAAThB,CAAemB,GAAfnB,CAAmB,UAACoB,OAAD,EAAUC,CAAV;AAAA,mBAAWC;AAAA;AAAA,+BAGjBD,CAHiB,cAGZrB,QAAQ,CAACgB,KAHG;AAAA,eAGI,CAE5BH,KAAK,CAACO,OAANP,GAAgBA,KAAK,CAACO,OAANP,CAAc;AAAEO;AAAF,aAAdP,CAAhBA,GAA6CO,OAFjB,CAHJ,CAAX;AAAA,WAAnBpB,CAHD;AAAAG;AAAA,OAZK;AAAA,KAAD,CAATV;AA2BA,WAAO,EAAP;AACF;AArC0D,CAAnB,CAAlC","names":["VSlideYTransition","useTextColor","makeComponentProps","makeTransitionProps","MaybeTransition","computed","genericComponent","propsFactory","useRender","wrapInArray","makeVMessagesProps","active","Boolean","color","String","messages","type","Array","default","transition","component","leaveAbsolute","group","VMessages","name","props","setup","_ref","slots","textColorClasses","textColorStyles","value","class","style","map","message","i","_createVNode"],"sources":["../../../src/components/VMessages/VMessages.tsx"],"sourcesContent":["// Styles\nimport './VMessages.sass'\n\n// Components\nimport { VSlideYTransition } from '@/components/transitions'\n\n// Composables\nimport { useTextColor } from '@/composables/color'\nimport { makeComponentProps } from '@/composables/component'\nimport { makeTransitionProps, MaybeTransition } from '@/composables/transition'\n\n// Utilities\nimport { computed } from 'vue'\nimport { genericComponent, propsFactory, useRender, wrapInArray } from '@/util'\n\n// Types\nimport type { Component, PropType } from 'vue'\n\nexport type VMessageSlot = {\n  message: string\n}\n\nexport type VMessagesSlots = {\n  message: VMessageSlot\n}\n\nexport const makeVMessagesProps = propsFactory({\n  active: Boolean,\n  color: String,\n  messages: {\n    type: [Array, String] as PropType<string | readonly string[]>,\n    default: () => ([]),\n  },\n\n  ...makeComponentProps(),\n  ...makeTransitionProps({\n    transition: {\n      component: VSlideYTransition as Component,\n      leaveAbsolute: true,\n      group: true,\n    },\n  }),\n}, 'VMessages')\n\nexport const VMessages = genericComponent<VMessagesSlots>()({\n  name: 'VMessages',\n\n  props: makeVMessagesProps(),\n\n  setup (props, { slots }) {\n    const messages = computed(() => wrapInArray(props.messages))\n    const { textColorClasses, textColorStyles } = useTextColor(computed(() => props.color))\n\n    useRender(() => (\n      <MaybeTransition\n        transition={ props.transition }\n        tag=\"div\"\n        class={[\n          'v-messages',\n          textColorClasses.value,\n          props.class,\n        ]}\n        style={[\n          textColorStyles.value,\n          props.style,\n        ]}\n      >\n        { props.active && (\n          messages.value.map((message, i) => (\n            <div\n              class=\"v-messages__message\"\n              key={ `${i}-${messages.value}` }\n            >\n              { slots.message ? slots.message({ message }) : message }\n            </div>\n          ))\n        )}\n      </MaybeTransition>\n    ))\n\n    return {}\n  },\n})\n\nexport type VMessages = InstanceType<typeof VMessages>\n"]},"metadata":{},"sourceType":"module"}