{"ast":null,"code":"import { createVNode as _createVNode } from \"vue\"; // Styles\n\nimport \"./VItemGroup.css\"; // Composables\n\nimport { makeComponentProps } from \"../../composables/component.js\";\nimport { makeGroupProps, useGroup } from \"../../composables/group.js\";\nimport { makeTagProps } from \"../../composables/tag.js\";\nimport { makeThemeProps, provideTheme } from \"../../composables/theme.js\"; // Utilities\n\nimport { genericComponent, propsFactory } from \"../../util/index.js\"; // Types\n\nexport const VItemGroupSymbol = Symbol.for('vuetify:v-item-group');\nexport const makeVItemGroupProps = propsFactory({ ...makeComponentProps(),\n  ...makeGroupProps({\n    selectedClass: 'v-item--selected'\n  }),\n  ...makeTagProps(),\n  ...makeThemeProps()\n}, 'VItemGroup');\nexport const VItemGroup = genericComponent()({\n  name: 'VItemGroup',\n  props: makeVItemGroupProps(),\n  emits: {\n    'update:modelValue': value => true\n  },\n\n  setup(props, _ref) {\n    let {\n      slots\n    } = _ref;\n    const {\n      themeClasses\n    } = provideTheme(props);\n    const {\n      isSelected,\n      select,\n      next,\n      prev,\n      selected\n    } = useGroup(props, VItemGroupSymbol);\n    return () => _createVNode(props.tag, {\n      \"class\": ['v-item-group', themeClasses.value, props.class],\n      \"style\": props.style\n    }, {\n      default: () => [slots.default?.({\n        isSelected,\n        select,\n        next,\n        prev,\n        selected: selected.value\n      })]\n    });\n  }\n\n});","map":{"version":3,"mappings":"mDAAA;;AACA,0B,CAEA;;AAAA,SACSA,kBADT,QAC2B,gCAD3B;AAC2B,SAClBC,cADkB,EACFC,QADE,QACM,4BADN;AACM,SACxBC,YADwB,QACZ,0BADY;AACZ,SACZC,cADY,EACIC,YADJ,QACgB,4BADhB,C,CAGrB;;AAAA,SACSC,gBADT,EAC2BC,YAD3B,QACuC,qBADvC,C,CAGA;;AAGA,OAAO,MAAMC,gBAAgB,GAAGC,MAAM,CAACC,GAAPD,CAAW,sBAAXA,CAAzB;AAEP,OAAO,MAAME,mBAAmB,GAAGJ,YAAY,CAAC,EAC9C,GAAGP,kBAAkB,EADyB;AAE9C,KAAGC,cAAc,CAAC;AAChBW,iBAAa,EAAE;AADC,GAAD,CAF6B;AAK9C,KAAGT,YAAY,EAL+B;AAM9C,KAAGC,cAAc;AAN6B,CAAD,EAO5C,YAP4C,CAAxC;AAmBP,OAAO,MAAMS,UAAU,GAAGP,gBAAgB,GAMO;AAC/CQ,MAAI,EAAE,YADyC;AAG/CC,OAAK,EAAEJ,mBAAmB,EAHqB;AAK/CK,OAAK,EAAE;AACL,yBAAsBC,KAAU,IAAK;AADhC,GALwC;;AAS/CC,OAAKA,CAAEH,KAAFG,EAAOC,IAAPD,EAAoB;AAAA,QAAX;AAAEE;AAAF,QAASD,IAAE;AACvB,UAAM;AAAEE;AAAF,QAAmBhB,YAAY,CAACU,KAAD,CAArC;AACA,UAAM;AAAEO,gBAAF;AAAcC,YAAd;AAAsBC,UAAtB;AAA4BC,UAA5B;AAAkCC;AAAlC,QAA+CxB,QAAQ,CAACa,KAAD,EAAQP,gBAAR,CAA7D;AAEA,WAAO;AAAA,eAEI,CACL,cADK,EAELa,YAAY,CAACJ,KAFR,EAGLF,KAAK,CAACY,KAHD,CAFJ;AAMF,eACOZ,KAAK,CAACa;AAPX,OAOgB;AAAAC,sBAEjBT,KAAK,CAACS,OAANT,GAAgB;AAChBE,kBADgB;AAEhBC,cAFgB;AAGhBC,YAHgB;AAIhBC,YAJgB;AAKhBC,gBAAQ,EAAEA,QAAQ,CAACT;AALH,OAAhBG,CAFiB;AAAA,KAPhB,CAAP;AAkBF;;AA/B+C,CANP,CAAnC","names":["makeComponentProps","makeGroupProps","useGroup","makeTagProps","makeThemeProps","provideTheme","genericComponent","propsFactory","VItemGroupSymbol","Symbol","for","makeVItemGroupProps","selectedClass","VItemGroup","name","props","emits","value","setup","_ref","slots","themeClasses","isSelected","select","next","prev","selected","class","style","default"],"sources":["../../../src/components/VItemGroup/VItemGroup.tsx"],"sourcesContent":["// Styles\nimport './VItemGroup.sass'\n\n// Composables\nimport { makeComponentProps } from '@/composables/component'\nimport { makeGroupProps, useGroup } from '@/composables/group'\nimport { makeTagProps } from '@/composables/tag'\nimport { makeThemeProps, provideTheme } from '@/composables/theme'\n\n// Utilities\nimport { genericComponent, propsFactory } from '@/util'\n\n// Types\nimport type { GenericProps } from '@/util'\n\nexport const VItemGroupSymbol = Symbol.for('vuetify:v-item-group')\n\nexport const makeVItemGroupProps = propsFactory({\n  ...makeComponentProps(),\n  ...makeGroupProps({\n    selectedClass: 'v-item--selected',\n  }),\n  ...makeTagProps(),\n  ...makeThemeProps(),\n}, 'VItemGroup')\n\ntype VItemGroupSlots = {\n  default: {\n    isSelected: (id: string) => boolean\n    select: (id: string, value: boolean) => void\n    next: () => void\n    prev: () => void\n    selected: readonly string[]\n  }\n}\n\nexport const VItemGroup = genericComponent<new <T>(\n  props: {\n    modelValue?: T\n    'onUpdate:modelValue'?: (value: T) => void\n  },\n  slots: VItemGroupSlots,\n) => GenericProps<typeof props, typeof slots>>()({\n  name: 'VItemGroup',\n\n  props: makeVItemGroupProps(),\n\n  emits: {\n    'update:modelValue': (value: any) => true,\n  },\n\n  setup (props, { slots }) {\n    const { themeClasses } = provideTheme(props)\n    const { isSelected, select, next, prev, selected } = useGroup(props, VItemGroupSymbol)\n\n    return () => (\n      <props.tag\n        class={[\n          'v-item-group',\n          themeClasses.value,\n          props.class,\n        ]}\n        style={ props.style }\n      >\n        { slots.default?.({\n          isSelected,\n          select,\n          next,\n          prev,\n          selected: selected.value,\n        })}\n      </props.tag>\n    )\n  },\n})\n\nexport type VItemGroup = InstanceType<typeof VItemGroup>\n"]},"metadata":{},"sourceType":"module"}