{"ast":null,"code":"// Utilities\nimport { computed } from 'vue';\nimport { getPropertyFromItem, propsFactory } from \"../../../util/index.js\"; // Types\n// Composables\n\nexport const makeDataTableItemsProps = propsFactory({\n  items: {\n    type: Array,\n    default: () => []\n  },\n  itemValue: {\n    type: [String, Array, Function],\n    default: 'id'\n  },\n  itemSelectable: {\n    type: [String, Array, Function],\n    default: null\n  },\n  rowProps: [Object, Function],\n  cellProps: [Object, Function],\n  returnObject: Boolean\n}, 'DataTable-items');\nexport function transformItem(props, item, index, columns) {\n  const value = props.returnObject ? item : getPropertyFromItem(item, props.itemValue);\n  const selectable = getPropertyFromItem(item, props.itemSelectable, true);\n  const itemColumns = columns.reduce((obj, column) => {\n    if (column.key != null) obj[column.key] = getPropertyFromItem(item, column.value);\n    return obj;\n  }, {});\n  return {\n    type: 'item',\n    key: props.returnObject ? getPropertyFromItem(item, props.itemValue) : value,\n    index,\n    value,\n    selectable,\n    columns: itemColumns,\n    raw: item\n  };\n}\nexport function transformItems(props, items, columns) {\n  return items.map((item, index) => transformItem(props, item, index, columns));\n}\nexport function useDataTableItems(props, columns) {\n  const items = computed(() => transformItems(props, props.items, columns.value));\n  return {\n    items\n  };\n}","map":{"version":3,"mappings":"AAAA;AACA,SAASA,QAAT,QAAyB,KAAzB;AAA8B,SACrBC,mBADqB,EACAC,YADA,QACY,wBADZ,C,CAG9B;AAYA;;AACA,OAAO,MAAMC,uBAAuB,GAAGD,YAAY,CAAC;AAClDE,OAAK,EAAE;AACLC,QAAI,EAAEC,KADD;AAELC,WAAO,EAAEA,MAAO;AAFX,GAD2C;AAKlDC,WAAS,EAAE;AACTH,QAAI,EAAE,CAACI,MAAD,EAASH,KAAT,EAAgBI,QAAhB,CADG;AAETH,WAAO,EAAE;AAFA,GALuC;AASlDI,gBAAc,EAAE;AACdN,QAAI,EAAE,CAACI,MAAD,EAASH,KAAT,EAAgBI,QAAhB,CADQ;AAEdH,WAAO,EAAE;AAFK,GATkC;AAalDK,UAAQ,EAAE,CAACC,MAAD,EAASH,QAAT,CAbwC;AAclDI,WAAS,EAAE,CAACD,MAAD,EAASH,QAAT,CAduC;AAelDK,cAAY,EAAEC;AAfoC,CAAD,EAgBhD,iBAhBgD,CAA5C;AAkBP,OAAO,SAASC,aAAT,CACLC,KADK,EAELC,IAFK,EAGLC,KAHK,EAILC,OAJK,EAKU;AACf,QAAMC,KAAK,GAAGJ,KAAK,CAACH,YAANG,GAAqBC,IAArBD,GAA4BjB,mBAAmB,CAACkB,IAAD,EAAOD,KAAK,CAACV,SAAb,CAA7D;AACA,QAAMe,UAAU,GAAGtB,mBAAmB,CAACkB,IAAD,EAAOD,KAAK,CAACP,cAAb,EAA6B,IAA7B,CAAtC;AACA,QAAMa,WAAW,GAAGH,OAAO,CAACI,MAARJ,CAAe,CAACK,GAAD,EAAMC,MAAN,KAAiB;AAClD,QAAIA,MAAM,CAACC,GAAPD,IAAc,IAAlB,EAAwBD,GAAG,CAACC,MAAM,CAACC,GAAR,CAAHF,GAAkBzB,mBAAmB,CAACkB,IAAD,EAAOQ,MAAM,CAACL,KAAd,CAArCI;AACxB,WAAOA,GAAP;AACD,GAHmBL,EAGjB,EAHiBA,CAApB;AAKA,SAAO;AACLhB,QAAI,EAAE,MADD;AAELuB,OAAG,EAAEV,KAAK,CAACH,YAANG,GAAqBjB,mBAAmB,CAACkB,IAAD,EAAOD,KAAK,CAACV,SAAb,CAAxCU,GAAkEI,KAFlE;AAGLF,SAHK;AAILE,SAJK;AAKLC,cALK;AAMLF,WAAO,EAAEG,WANJ;AAOLK,OAAG,EAAEV;AAPA,GAAP;AASF;AAEA,OAAO,SAASW,cAAT,CACLZ,KADK,EAELd,KAFK,EAGLiB,OAHK,EAIY;AACjB,SAAOjB,KAAK,CAAC2B,GAAN3B,CAAU,CAACe,IAAD,EAAOC,KAAP,KAAiBH,aAAa,CAACC,KAAD,EAAQC,IAAR,EAAcC,KAAd,EAAqBC,OAArB,CAAxCjB,CAAP;AACF;AAEA,OAAO,SAAS4B,iBAAT,CAA4Bd,KAA5B,EAAuDG,OAAvD,EAAgG;AACrG,QAAMjB,KAAK,GAAGJ,QAAQ,CAAC,MAAM8B,cAAc,CAACZ,KAAD,EAAQA,KAAK,CAACd,KAAd,EAAqBiB,OAAO,CAACC,KAA7B,CAArB,CAAtB;AAEA,SAAO;AAAElB;AAAF,GAAP;AACF","names":["computed","getPropertyFromItem","propsFactory","makeDataTableItemsProps","items","type","Array","default","itemValue","String","Function","itemSelectable","rowProps","Object","cellProps","returnObject","Boolean","transformItem","props","item","index","columns","value","selectable","itemColumns","reduce","obj","column","key","raw","transformItems","map","useDataTableItems"],"sources":["../../../../src/components/VDataTable/composables/items.ts"],"sourcesContent":["// Utilities\nimport { computed } from 'vue'\nimport { getPropertyFromItem, propsFactory } from '@/util'\n\n// Types\nimport type { PropType, Ref } from 'vue'\nimport type { CellProps, DataTableItem, InternalDataTableHeader, RowProps } from '../types'\nimport type { SelectItemKey } from '@/util'\n\nexport interface DataTableItemProps {\n  items: any[]\n  itemValue: SelectItemKey\n  itemSelectable: SelectItemKey\n  returnObject: boolean\n}\n\n// Composables\nexport const makeDataTableItemsProps = propsFactory({\n  items: {\n    type: Array as PropType<DataTableItemProps['items']>,\n    default: () => ([]),\n  },\n  itemValue: {\n    type: [String, Array, Function] as PropType<SelectItemKey>,\n    default: 'id',\n  },\n  itemSelectable: {\n    type: [String, Array, Function] as PropType<SelectItemKey>,\n    default: null,\n  },\n  rowProps: [Object, Function] as PropType<RowProps<any>>,\n  cellProps: [Object, Function] as PropType<CellProps<any>>,\n  returnObject: Boolean,\n}, 'DataTable-items')\n\nexport function transformItem (\n  props: Omit<DataTableItemProps, 'items'>,\n  item: any,\n  index: number,\n  columns: InternalDataTableHeader[]\n): DataTableItem {\n  const value = props.returnObject ? item : getPropertyFromItem(item, props.itemValue)\n  const selectable = getPropertyFromItem(item, props.itemSelectable, true)\n  const itemColumns = columns.reduce((obj, column) => {\n    if (column.key != null) obj[column.key] = getPropertyFromItem(item, column.value!)\n    return obj\n  }, {} as Record<string, unknown>)\n\n  return {\n    type: 'item',\n    key: props.returnObject ? getPropertyFromItem(item, props.itemValue) : value,\n    index,\n    value,\n    selectable,\n    columns: itemColumns,\n    raw: item,\n  }\n}\n\nexport function transformItems (\n  props: Omit<DataTableItemProps, 'items'>,\n  items: DataTableItemProps['items'],\n  columns: InternalDataTableHeader[]\n): DataTableItem[] {\n  return items.map((item, index) => transformItem(props, item, index, columns))\n}\n\nexport function useDataTableItems (props: DataTableItemProps, columns: Ref<InternalDataTableHeader[]>) {\n  const items = computed(() => transformItems(props, props.items, columns.value))\n\n  return { items }\n}\n"]},"metadata":{},"sourceType":"module"}