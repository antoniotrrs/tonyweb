{"ast":null,"code":"import { createVNode as _createVNode } from \"vue\"; // Styles\n\nimport \"./VColorPickerCanvas.css\"; // Composables\n\nimport { makeComponentProps } from \"../../composables/component.js\";\nimport { useResizeObserver } from \"../../composables/resizeObserver.js\"; // Utilities\n\nimport { computed, onMounted, ref, shallowRef, watch } from 'vue';\nimport { clamp, convertToUnit, defineComponent, getEventCoordinates, propsFactory, useRender } from \"../../util/index.js\"; // Types\n\nexport const makeVColorPickerCanvasProps = propsFactory({\n  color: {\n    type: Object\n  },\n  disabled: Boolean,\n  dotSize: {\n    type: [Number, String],\n    default: 10\n  },\n  height: {\n    type: [Number, String],\n    default: 150\n  },\n  width: {\n    type: [Number, String],\n    default: 300\n  },\n  ...makeComponentProps()\n}, 'VColorPickerCanvas');\nexport const VColorPickerCanvas = defineComponent({\n  name: 'VColorPickerCanvas',\n  props: makeVColorPickerCanvasProps(),\n  emits: {\n    'update:color': color => true,\n    'update:position': hue => true\n  },\n\n  setup(props, _ref) {\n    let {\n      emit\n    } = _ref;\n    const isInteracting = shallowRef(false);\n    const canvasRef = ref();\n    const canvasWidth = shallowRef(parseFloat(props.width));\n    const canvasHeight = shallowRef(parseFloat(props.height));\n\n    const _dotPosition = ref({\n      x: 0,\n      y: 0\n    });\n\n    const dotPosition = computed({\n      get: () => _dotPosition.value,\n\n      set(val) {\n        if (!canvasRef.value) return;\n        const {\n          x,\n          y\n        } = val;\n        _dotPosition.value = val;\n        emit('update:color', {\n          h: props.color?.h ?? 0,\n          s: clamp(x, 0, canvasWidth.value) / canvasWidth.value,\n          v: 1 - clamp(y, 0, canvasHeight.value) / canvasHeight.value,\n          a: props.color?.a ?? 1\n        });\n      }\n\n    });\n    const dotStyles = computed(() => {\n      const {\n        x,\n        y\n      } = dotPosition.value;\n      const radius = parseInt(props.dotSize, 10) / 2;\n      return {\n        width: convertToUnit(props.dotSize),\n        height: convertToUnit(props.dotSize),\n        transform: `translate(${convertToUnit(x - radius)}, ${convertToUnit(y - radius)})`\n      };\n    });\n    const {\n      resizeRef\n    } = useResizeObserver(entries => {\n      if (!resizeRef.el?.offsetParent) return;\n      const {\n        width,\n        height\n      } = entries[0].contentRect;\n      canvasWidth.value = width;\n      canvasHeight.value = height;\n    });\n\n    function updateDotPosition(x, y, rect) {\n      const {\n        left,\n        top,\n        width,\n        height\n      } = rect;\n      dotPosition.value = {\n        x: clamp(x - left, 0, width),\n        y: clamp(y - top, 0, height)\n      };\n    }\n\n    function handleMouseDown(e) {\n      if (e.type === 'mousedown') {\n        // Prevent text selection while dragging\n        e.preventDefault();\n      }\n\n      if (props.disabled) return;\n      handleMouseMove(e);\n      window.addEventListener('mousemove', handleMouseMove);\n      window.addEventListener('mouseup', handleMouseUp);\n      window.addEventListener('touchmove', handleMouseMove);\n      window.addEventListener('touchend', handleMouseUp);\n    }\n\n    function handleMouseMove(e) {\n      if (props.disabled || !canvasRef.value) return;\n      isInteracting.value = true;\n      const coords = getEventCoordinates(e);\n      updateDotPosition(coords.clientX, coords.clientY, canvasRef.value.getBoundingClientRect());\n    }\n\n    function handleMouseUp() {\n      window.removeEventListener('mousemove', handleMouseMove);\n      window.removeEventListener('mouseup', handleMouseUp);\n      window.removeEventListener('touchmove', handleMouseMove);\n      window.removeEventListener('touchend', handleMouseUp);\n    }\n\n    function updateCanvas() {\n      if (!canvasRef.value) return;\n      const canvas = canvasRef.value;\n      const ctx = canvas.getContext('2d');\n      if (!ctx) return;\n      const saturationGradient = ctx.createLinearGradient(0, 0, canvas.width, 0);\n      saturationGradient.addColorStop(0, 'hsla(0, 0%, 100%, 1)'); // white\n\n      saturationGradient.addColorStop(1, `hsla(${props.color?.h ?? 0}, 100%, 50%, 1)`);\n      ctx.fillStyle = saturationGradient;\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n      const valueGradient = ctx.createLinearGradient(0, 0, 0, canvas.height);\n      valueGradient.addColorStop(0, 'hsla(0, 0%, 0%, 0)'); // transparent\n\n      valueGradient.addColorStop(1, 'hsla(0, 0%, 0%, 1)'); // black\n\n      ctx.fillStyle = valueGradient;\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n    }\n\n    watch(() => props.color?.h, updateCanvas, {\n      immediate: true\n    });\n    watch(() => [canvasWidth.value, canvasHeight.value], (newVal, oldVal) => {\n      updateCanvas();\n      _dotPosition.value = {\n        x: dotPosition.value.x * newVal[0] / oldVal[0],\n        y: dotPosition.value.y * newVal[1] / oldVal[1]\n      };\n    }, {\n      flush: 'post'\n    });\n    watch(() => props.color, () => {\n      if (isInteracting.value) {\n        isInteracting.value = false;\n        return;\n      }\n\n      _dotPosition.value = props.color ? {\n        x: props.color.s * canvasWidth.value,\n        y: (1 - props.color.v) * canvasHeight.value\n      } : {\n        x: 0,\n        y: 0\n      };\n    }, {\n      deep: true,\n      immediate: true\n    });\n    onMounted(() => updateCanvas());\n    useRender(() => _createVNode(\"div\", {\n      \"ref\": resizeRef,\n      \"class\": ['v-color-picker-canvas', props.class],\n      \"style\": props.style,\n      \"onMousedown\": handleMouseDown,\n      \"onTouchstartPassive\": handleMouseDown\n    }, [_createVNode(\"canvas\", {\n      \"ref\": canvasRef,\n      \"width\": canvasWidth.value,\n      \"height\": canvasHeight.value\n    }, null), props.color && _createVNode(\"div\", {\n      \"class\": ['v-color-picker-canvas__dot', {\n        'v-color-picker-canvas__dot--disabled': props.disabled\n      }],\n      \"style\": dotStyles.value\n    }, null)]));\n    return {};\n  }\n\n});","map":{"version":3,"mappings":"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","names":["makeComponentProps","useResizeObserver","computed","onMounted","ref","shallowRef","watch","clamp","convertToUnit","defineComponent","getEventCoordinates","propsFactory","useRender","makeVColorPickerCanvasProps","color","type","Object","disabled","Boolean","dotSize","Number","String","default","height","width","VColorPickerCanvas","name","props","emits","hue","setup","_ref","emit","isInteracting","canvasRef","canvasWidth","parseFloat","canvasHeight","_dotPosition","x","y","dotPosition","get","value","set","val","h","s","v","a","dotStyles","radius","parseInt","transform","resizeRef","entries","el","offsetParent","contentRect","updateDotPosition","rect","left","top","handleMouseDown","e","preventDefault","handleMouseMove","window","addEventListener","handleMouseUp","coords","clientX","clientY","getBoundingClientRect","removeEventListener","updateCanvas","canvas","ctx","getContext","saturationGradient","createLinearGradient","addColorStop","fillStyle","fillRect","valueGradient","immediate","newVal","oldVal","flush","deep","class","style","_createVNode"],"sources":["../../../src/components/VColorPicker/VColorPickerCanvas.tsx"],"sourcesContent":["// Styles\nimport './VColorPickerCanvas.sass'\n\n// Composables\nimport { makeComponentProps } from '@/composables/component'\nimport { useResizeObserver } from '@/composables/resizeObserver'\n\n// Utilities\nimport { computed, onMounted, ref, shallowRef, watch } from 'vue'\nimport { clamp, convertToUnit, defineComponent, getEventCoordinates, propsFactory, useRender } from '@/util'\n\n// Types\nimport type { PropType } from 'vue'\nimport type { HSV } from '@/util'\n\nexport const makeVColorPickerCanvasProps = propsFactory({\n  color: {\n    type: Object as PropType<HSV | null>,\n  },\n  disabled: Boolean,\n  dotSize: {\n    type: [Number, String],\n    default: 10,\n  },\n  height: {\n    type: [Number, String],\n    default: 150,\n  },\n  width: {\n    type: [Number, String],\n    default: 300,\n  },\n\n  ...makeComponentProps(),\n}, 'VColorPickerCanvas')\n\nexport const VColorPickerCanvas = defineComponent({\n  name: 'VColorPickerCanvas',\n\n  props: makeVColorPickerCanvasProps(),\n\n  emits: {\n    'update:color': (color: HSV) => true,\n    'update:position': (hue: any) => true,\n  },\n\n  setup (props, { emit }) {\n    const isInteracting = shallowRef(false)\n    const canvasRef = ref<HTMLCanvasElement | null>()\n    const canvasWidth = shallowRef(parseFloat(props.width))\n    const canvasHeight = shallowRef(parseFloat(props.height))\n\n    const _dotPosition = ref({ x: 0, y: 0 })\n    const dotPosition = computed({\n      get: () => _dotPosition.value,\n      set (val) {\n        if (!canvasRef.value) return\n\n        const { x, y } = val\n        _dotPosition.value = val\n\n        emit('update:color', {\n          h: props.color?.h ?? 0,\n          s: clamp(x, 0, canvasWidth.value) / canvasWidth.value,\n          v: 1 - clamp(y, 0, canvasHeight.value) / canvasHeight.value,\n          a: props.color?.a ?? 1,\n        })\n      },\n    })\n\n    const dotStyles = computed(() => {\n      const { x, y } = dotPosition.value\n      const radius = parseInt(props.dotSize, 10) / 2\n\n      return {\n        width: convertToUnit(props.dotSize),\n        height: convertToUnit(props.dotSize),\n        transform: `translate(${convertToUnit(x - radius)}, ${convertToUnit(y - radius)})`,\n      }\n    })\n\n    const { resizeRef } = useResizeObserver(entries => {\n      if (!resizeRef.el?.offsetParent) return\n\n      const { width, height } = entries[0].contentRect\n\n      canvasWidth.value = width\n      canvasHeight.value = height\n    })\n\n    function updateDotPosition (x: number, y: number, rect: DOMRect) {\n      const { left, top, width, height } = rect\n      dotPosition.value = {\n        x: clamp(x - left, 0, width),\n        y: clamp(y - top, 0, height),\n      }\n    }\n\n    function handleMouseDown (e: MouseEvent | TouchEvent) {\n      if (e.type === 'mousedown') {\n        // Prevent text selection while dragging\n        e.preventDefault()\n      }\n\n      if (props.disabled) return\n\n      handleMouseMove(e)\n\n      window.addEventListener('mousemove', handleMouseMove)\n      window.addEventListener('mouseup', handleMouseUp)\n      window.addEventListener('touchmove', handleMouseMove)\n      window.addEventListener('touchend', handleMouseUp)\n    }\n\n    function handleMouseMove (e: MouseEvent | TouchEvent) {\n      if (props.disabled || !canvasRef.value) return\n\n      isInteracting.value = true\n\n      const coords = getEventCoordinates(e)\n\n      updateDotPosition(coords.clientX, coords.clientY, canvasRef.value.getBoundingClientRect())\n    }\n\n    function handleMouseUp () {\n      window.removeEventListener('mousemove', handleMouseMove)\n      window.removeEventListener('mouseup', handleMouseUp)\n      window.removeEventListener('touchmove', handleMouseMove)\n      window.removeEventListener('touchend', handleMouseUp)\n    }\n\n    function updateCanvas () {\n      if (!canvasRef.value) return\n\n      const canvas = canvasRef.value\n      const ctx = canvas.getContext('2d')\n\n      if (!ctx) return\n\n      const saturationGradient = ctx.createLinearGradient(0, 0, canvas.width, 0)\n      saturationGradient.addColorStop(0, 'hsla(0, 0%, 100%, 1)') // white\n      saturationGradient.addColorStop(1, `hsla(${props.color?.h ?? 0}, 100%, 50%, 1)`)\n      ctx.fillStyle = saturationGradient\n      ctx.fillRect(0, 0, canvas.width, canvas.height)\n\n      const valueGradient = ctx.createLinearGradient(0, 0, 0, canvas.height)\n      valueGradient.addColorStop(0, 'hsla(0, 0%, 0%, 0)') // transparent\n      valueGradient.addColorStop(1, 'hsla(0, 0%, 0%, 1)') // black\n      ctx.fillStyle = valueGradient\n      ctx.fillRect(0, 0, canvas.width, canvas.height)\n    }\n\n    watch(() => props.color?.h, updateCanvas, { immediate: true })\n    watch(() => [canvasWidth.value, canvasHeight.value], (newVal, oldVal) => {\n      updateCanvas()\n      _dotPosition.value = {\n        x: dotPosition.value.x * newVal[0] / oldVal[0],\n        y: dotPosition.value.y * newVal[1] / oldVal[1],\n      }\n    }, { flush: 'post' })\n\n    watch(() => props.color, () => {\n      if (isInteracting.value) {\n        isInteracting.value = false\n        return\n      }\n\n      _dotPosition.value = props.color ? {\n        x: props.color.s * canvasWidth.value,\n        y: (1 - props.color.v) * canvasHeight.value,\n      } : { x: 0, y: 0 }\n    }, { deep: true, immediate: true })\n\n    onMounted(() => updateCanvas())\n\n    useRender(() => (\n      <div\n        ref={ resizeRef }\n        class={[\n          'v-color-picker-canvas',\n          props.class,\n        ]}\n        style={ props.style }\n        onMousedown={ handleMouseDown }\n        onTouchstartPassive={ handleMouseDown }\n      >\n        <canvas\n          ref={ canvasRef }\n          width={ canvasWidth.value }\n          height={ canvasHeight.value }\n        />\n        { props.color && (\n          <div\n            class={[\n              'v-color-picker-canvas__dot',\n              {\n                'v-color-picker-canvas__dot--disabled': props.disabled,\n              },\n            ]}\n            style={ dotStyles.value }\n          />\n        )}\n      </div>\n    ))\n\n    return {}\n  },\n})\n\nexport type VColorPickerCanvas = InstanceType<typeof VColorPickerCanvas>\n"]},"metadata":{},"sourceType":"module"}