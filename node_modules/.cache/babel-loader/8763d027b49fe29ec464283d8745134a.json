{"ast":null,"code":"// Utilities\nimport { onBeforeUnmount, readonly, ref, watch } from 'vue';\nimport { templateRef } from \"../util/index.js\";\nimport { IN_BROWSER } from \"../util/globals.js\"; // Types\n\nexport function useResizeObserver(callback) {\n  var box = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'content';\n  var resizeRef = templateRef();\n  var contentRect = ref();\n\n  if (IN_BROWSER) {\n    var observer = new ResizeObserver(function (entries) {\n      callback === null || callback === void 0 ? void 0 : callback(entries, observer);\n      if (!entries.length) return;\n\n      if (box === 'content') {\n        contentRect.value = entries[0].contentRect;\n      } else {\n        contentRect.value = entries[0].target.getBoundingClientRect();\n      }\n    });\n    onBeforeUnmount(function () {\n      observer.disconnect();\n    });\n    watch(function () {\n      return resizeRef.el;\n    }, function (newValue, oldValue) {\n      if (oldValue) {\n        observer.unobserve(oldValue);\n        contentRect.value = undefined;\n      }\n\n      if (newValue) observer.observe(newValue);\n    }, {\n      flush: 'post'\n    });\n  }\n\n  return {\n    resizeRef: resizeRef,\n    contentRect: readonly(contentRect)\n  };\n}","map":{"version":3,"mappings":"AAAA;AACA,SAASA,eAAT,EAA0BC,QAA1B,EAAoCC,GAApC,EAAyCC,KAAzC,QAAsD,KAAtD;AAA2D,SAClDC,WADkD,QACvC,kBADuC;AACvC,SACXC,UADW,QACD,oBADC,C,CAGpB;;AASA,OAAO,SAASC,iBAAT,CAA4BC,QAA5B,EAAmH;AAAA,MAApDC,GAAyB,uEAAG,SAAwB;AACxH,MAAMC,SAAS,GAAGL,WAAW,EAA7B;AACA,MAAMM,WAAW,GAAGR,GAAG,EAAvB;;AAEA,MAAIG,UAAJ,EAAgB;AACd,QAAMM,QAAQ,GAAG,IAAIC,cAAJ,CAAoBC,iBAA8B,EAAK;AACtEN,cAAQ,SAARA,YAAQ,WAARA,oBAAQ,CAAGM,OAAH,EAAYF,QAAZ,CAARJ;AAEA,UAAI,CAACM,OAAO,CAACC,MAAb,EAAqB;;AAErB,UAAIN,GAAG,KAAK,SAAZ,EAAuB;AACrBE,mBAAW,CAACK,KAAZL,GAAoBG,OAAO,CAAC,CAAD,CAAPA,CAAWH,WAA/BA;AACD,OAFD,MAEO;AACLA,mBAAW,CAACK,KAAZL,GAAoBG,OAAO,CAAC,CAAD,CAAPA,CAAWG,MAAXH,CAAkBI,qBAAlBJ,EAApBH;AACF;AACD,KAVgB,CAAjB;AAYAV,mBAAe,CAAC,YAAM;AACpBW,cAAQ,CAACO,UAATP;AACD,KAFc,CAAfX;AAIAG,SAAK,CAAC;AAAA,aAAMM,SAAS,CAACU,EAAhB;AAAA,KAAD,EAAqB,UAACC,QAAD,EAAWC,QAAX,EAAwB;AAChD,UAAIA,QAAJ,EAAc;AACZV,gBAAQ,CAACW,SAATX,CAAmBU,QAAnBV;AACAD,mBAAW,CAACK,KAAZL,GAAoBa,SAApBb;AACF;;AAEA,UAAIU,QAAJ,EAAcT,QAAQ,CAACa,OAATb,CAAiBS,QAAjBT;AACf,KAPI,EAOF;AACDc,WAAK,EAAE;AADN,KAPE,CAALtB;AAUF;;AAEA,SAAO;AACLM,aAAS,EAATA,SADK;AAELC,eAAW,EAAET,QAAQ,CAACS,WAAD;AAFhB,GAAP;AAIF","names":["onBeforeUnmount","readonly","ref","watch","templateRef","IN_BROWSER","useResizeObserver","callback","box","resizeRef","contentRect","observer","ResizeObserver","entries","length","value","target","getBoundingClientRect","disconnect","el","newValue","oldValue","unobserve","undefined","observe","flush"],"sources":["../../src/composables/resizeObserver.ts"],"sourcesContent":["// Utilities\nimport { onBeforeUnmount, readonly, ref, watch } from 'vue'\nimport { templateRef } from '@/util'\nimport { IN_BROWSER } from '@/util/globals'\n\n// Types\nimport type { DeepReadonly, Ref } from 'vue'\nimport type { TemplateRef } from '@/util'\n\ninterface ResizeState {\n  resizeRef: TemplateRef\n  contentRect: DeepReadonly<Ref<DOMRectReadOnly | undefined>>\n}\n\nexport function useResizeObserver (callback?: ResizeObserverCallback, box: 'content' | 'border' = 'content'): ResizeState {\n  const resizeRef = templateRef()\n  const contentRect = ref<DOMRectReadOnly>()\n\n  if (IN_BROWSER) {\n    const observer = new ResizeObserver((entries: ResizeObserverEntry[]) => {\n      callback?.(entries, observer)\n\n      if (!entries.length) return\n\n      if (box === 'content') {\n        contentRect.value = entries[0].contentRect\n      } else {\n        contentRect.value = entries[0].target.getBoundingClientRect()\n      }\n    })\n\n    onBeforeUnmount(() => {\n      observer.disconnect()\n    })\n\n    watch(() => resizeRef.el, (newValue, oldValue) => {\n      if (oldValue) {\n        observer.unobserve(oldValue)\n        contentRect.value = undefined\n      }\n\n      if (newValue) observer.observe(newValue)\n    }, {\n      flush: 'post',\n    })\n  }\n\n  return {\n    resizeRef,\n    contentRect: readonly(contentRect),\n  }\n}\n"]},"metadata":{},"sourceType":"module"}