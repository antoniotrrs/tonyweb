{"ast":null,"code":"import { createVNode as _createVNode, Fragment as _Fragment, mergeProps as _mergeProps } from \"vue\"; // Styles\n\nimport \"./VBreadcrumbs.css\"; // Components\n\nimport { VBreadcrumbsDivider } from \"./VBreadcrumbsDivider.js\";\nimport { VBreadcrumbsItem } from \"./VBreadcrumbsItem.js\";\nimport { VDefaultsProvider } from \"../VDefaultsProvider/index.js\";\nimport { VIcon } from \"../VIcon/index.js\"; // Composables\n\nimport { useBackgroundColor } from \"../../composables/color.js\";\nimport { makeComponentProps } from \"../../composables/component.js\";\nimport { provideDefaults } from \"../../composables/defaults.js\";\nimport { makeDensityProps, useDensity } from \"../../composables/density.js\";\nimport { IconValue } from \"../../composables/icons.js\";\nimport { makeRoundedProps, useRounded } from \"../../composables/rounded.js\";\nimport { makeTagProps } from \"../../composables/tag.js\"; // Utilities\n\nimport { computed, toRef } from 'vue';\nimport { genericComponent, propsFactory, useRender } from \"../../util/index.js\"; // Types\n\nexport const makeVBreadcrumbsProps = propsFactory({\n  activeClass: String,\n  activeColor: String,\n  bgColor: String,\n  color: String,\n  disabled: Boolean,\n  divider: {\n    type: String,\n    default: '/'\n  },\n  icon: IconValue,\n  items: {\n    type: Array,\n    default: () => []\n  },\n  ...makeComponentProps(),\n  ...makeDensityProps(),\n  ...makeRoundedProps(),\n  ...makeTagProps({\n    tag: 'ul'\n  })\n}, 'VBreadcrumbs');\nexport const VBreadcrumbs = genericComponent()({\n  name: 'VBreadcrumbs',\n  props: makeVBreadcrumbsProps(),\n\n  setup(props, _ref) {\n    let {\n      slots\n    } = _ref;\n    const {\n      backgroundColorClasses,\n      backgroundColorStyles\n    } = useBackgroundColor(toRef(props, 'bgColor'));\n    const {\n      densityClasses\n    } = useDensity(props);\n    const {\n      roundedClasses\n    } = useRounded(props);\n    provideDefaults({\n      VBreadcrumbsDivider: {\n        divider: toRef(props, 'divider')\n      },\n      VBreadcrumbsItem: {\n        activeClass: toRef(props, 'activeClass'),\n        activeColor: toRef(props, 'activeColor'),\n        color: toRef(props, 'color'),\n        disabled: toRef(props, 'disabled')\n      }\n    });\n    const items = computed(() => props.items.map(item => {\n      return typeof item === 'string' ? {\n        item: {\n          title: item\n        },\n        raw: item\n      } : {\n        item,\n        raw: item\n      };\n    }));\n    useRender(() => {\n      const hasPrepend = !!(slots.prepend || props.icon);\n      return _createVNode(props.tag, {\n        \"class\": ['v-breadcrumbs', backgroundColorClasses.value, densityClasses.value, roundedClasses.value, props.class],\n        \"style\": [backgroundColorStyles.value, props.style]\n      }, {\n        default: () => [hasPrepend && _createVNode(\"li\", {\n          \"key\": \"prepend\",\n          \"class\": \"v-breadcrumbs__prepend\"\n        }, [!slots.prepend ? _createVNode(VIcon, {\n          \"key\": \"prepend-icon\",\n          \"start\": true,\n          \"icon\": props.icon\n        }, null) : _createVNode(VDefaultsProvider, {\n          \"key\": \"prepend-defaults\",\n          \"disabled\": !props.icon,\n          \"defaults\": {\n            VIcon: {\n              icon: props.icon,\n              start: true\n            }\n          }\n        }, slots.prepend)]), items.value.map((_ref2, index, array) => {\n          let {\n            item,\n            raw\n          } = _ref2;\n          return _createVNode(_Fragment, null, [slots.item?.({\n            item,\n            index\n          }) ?? _createVNode(VBreadcrumbsItem, _mergeProps({\n            \"key\": index,\n            \"disabled\": index >= array.length - 1\n          }, typeof item === 'string' ? {\n            title: item\n          } : item), {\n            default: slots.title ? () => slots.title?.({\n              item,\n              index\n            }) : undefined\n          }), index < array.length - 1 && _createVNode(VBreadcrumbsDivider, null, {\n            default: slots.divider ? () => slots.divider?.({\n              item: raw,\n              index\n            }) : undefined\n          })]);\n        }), slots.default?.()]\n      });\n    });\n    return {};\n  }\n\n});","map":{"version":3,"mappings":"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","names":["VBreadcrumbsDivider","VBreadcrumbsItem","VDefaultsProvider","VIcon","useBackgroundColor","makeComponentProps","provideDefaults","makeDensityProps","useDensity","IconValue","makeRoundedProps","useRounded","makeTagProps","computed","toRef","genericComponent","propsFactory","useRender","makeVBreadcrumbsProps","activeClass","String","activeColor","bgColor","color","disabled","Boolean","divider","type","default","icon","items","Array","tag","VBreadcrumbs","name","props","setup","_ref","slots","backgroundColorClasses","backgroundColorStyles","densityClasses","roundedClasses","map","item","title","raw","hasPrepend","prepend","value","class","style","_createVNode","start","index","array","_ref2","length","undefined"],"sources":["../../../src/components/VBreadcrumbs/VBreadcrumbs.tsx"],"sourcesContent":["// Styles\nimport './VBreadcrumbs.sass'\n\n// Components\nimport { VBreadcrumbsDivider } from './VBreadcrumbsDivider'\nimport { VBreadcrumbsItem } from './VBreadcrumbsItem'\nimport { VDefaultsProvider } from '@/components/VDefaultsProvider'\nimport { VIcon } from '@/components/VIcon'\n\n// Composables\nimport { useBackgroundColor } from '@/composables/color'\nimport { makeComponentProps } from '@/composables/component'\nimport { provideDefaults } from '@/composables/defaults'\nimport { makeDensityProps, useDensity } from '@/composables/density'\nimport { IconValue } from '@/composables/icons'\nimport { makeRoundedProps, useRounded } from '@/composables/rounded'\nimport { makeTagProps } from '@/composables/tag'\n\n// Utilities\nimport { computed, toRef } from 'vue'\nimport { genericComponent, propsFactory, useRender } from '@/util'\n\n// Types\nimport type { PropType } from 'vue'\nimport type { LinkProps } from '@/composables/router'\nimport type { GenericProps } from '@/util'\n\nexport type InternalBreadcrumbItem = Partial<LinkProps> & {\n  title: string\n  disabled?: boolean\n}\n\nexport type BreadcrumbItem = string | InternalBreadcrumbItem\n\nexport const makeVBreadcrumbsProps = propsFactory({\n  activeClass: String,\n  activeColor: String,\n  bgColor: String,\n  color: String,\n  disabled: Boolean,\n  divider: {\n    type: String,\n    default: '/',\n  },\n  icon: IconValue,\n  items: {\n    type: Array as PropType<readonly BreadcrumbItem[]>,\n    default: () => ([]),\n  },\n\n  ...makeComponentProps(),\n  ...makeDensityProps(),\n  ...makeRoundedProps(),\n  ...makeTagProps({ tag: 'ul' }),\n}, 'VBreadcrumbs')\n\nexport const VBreadcrumbs = genericComponent<new <T extends BreadcrumbItem>(\n  props: {\n    items?: T[]\n  },\n  slots: {\n    prepend: never\n    title: { item: InternalBreadcrumbItem, index: number }\n    divider: { item: T, index: number }\n    item: { item: InternalBreadcrumbItem, index: number }\n    default: never\n  }\n) => GenericProps<typeof props, typeof slots>>()({\n  name: 'VBreadcrumbs',\n\n  props: makeVBreadcrumbsProps(),\n\n  setup (props, { slots }) {\n    const { backgroundColorClasses, backgroundColorStyles } = useBackgroundColor(toRef(props, 'bgColor'))\n    const { densityClasses } = useDensity(props)\n    const { roundedClasses } = useRounded(props)\n\n    provideDefaults({\n      VBreadcrumbsDivider: {\n        divider: toRef(props, 'divider'),\n      },\n      VBreadcrumbsItem: {\n        activeClass: toRef(props, 'activeClass'),\n        activeColor: toRef(props, 'activeColor'),\n        color: toRef(props, 'color'),\n        disabled: toRef(props, 'disabled'),\n      },\n    })\n\n    const items = computed(() => props.items.map(item => {\n      return typeof item === 'string' ? { item: { title: item }, raw: item } : { item, raw: item }\n    }))\n\n    useRender(() => {\n      const hasPrepend = !!(slots.prepend || props.icon)\n\n      return (\n        <props.tag\n          class={[\n            'v-breadcrumbs',\n            backgroundColorClasses.value,\n            densityClasses.value,\n            roundedClasses.value,\n            props.class,\n          ]}\n          style={[\n            backgroundColorStyles.value,\n            props.style,\n          ]}\n        >\n          { hasPrepend && (\n            <li key=\"prepend\" class=\"v-breadcrumbs__prepend\">\n              { !slots.prepend ? (\n                <VIcon\n                  key=\"prepend-icon\"\n                  start\n                  icon={ props.icon }\n                />\n              ) : (\n                <VDefaultsProvider\n                  key=\"prepend-defaults\"\n                  disabled={ !props.icon }\n                  defaults={{\n                    VIcon: {\n                      icon: props.icon,\n                      start: true,\n                    },\n                  }}\n                  v-slots:default={ slots.prepend }\n                />\n              )}\n            </li>\n          )}\n\n          { items.value.map(({ item, raw }, index, array) => (\n            <>\n              { slots.item?.({ item, index }) ?? (\n                <VBreadcrumbsItem\n                  key={ index }\n                  disabled={ index >= array.length - 1 }\n                  { ...(typeof item === 'string' ? { title: item } : item) }\n                  v-slots={{\n                    default: slots.title ? () => slots.title?.({ item, index }) : undefined,\n                  }}\n                />\n              )}\n\n              { index < array.length - 1 && (\n                <VBreadcrumbsDivider\n                  v-slots={{\n                    default: slots.divider ? () => slots.divider?.({ item: raw, index }) : undefined,\n                  }}\n                />\n              )}\n            </>\n          ))}\n\n          { slots.default?.() }\n        </props.tag>\n      )\n    })\n\n    return {}\n  },\n})\n\nexport type VBreadcrumbs = InstanceType<typeof VBreadcrumbs>\n"]},"metadata":{},"sourceType":"module"}