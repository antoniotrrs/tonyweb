{"ast":null,"code":"import _objectSpread from \"/Users/antoniotorres/Documents/tony/tonyweb/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _typeof from \"/Users/antoniotorres/Documents/tony/tonyweb/node_modules/@babel/runtime/helpers/esm/typeof.js\";\nimport _objectWithoutProperties from \"/Users/antoniotorres/Documents/tony/tonyweb/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\n\nvar _rgba$inputs;\n\nvar _excluded = [\"a\"];\nimport \"core-js/modules/es.string.starts-with.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.number.constructor.js\";\n// Utilities\nimport { HexToHSV, HSLtoHSV, HSVtoHex, HSVtoHSL, HSVtoRGB, RGBtoHSV } from \"../../../util/colorUtils.js\";\nimport { has } from \"../../../util/helpers.js\"; // Types\n\nfunction stripAlpha(color, stripAlpha) {\n  if (stripAlpha) {\n    var a = color.a,\n        rest = _objectWithoutProperties(color, _excluded);\n\n    return rest;\n  }\n\n  return color;\n}\n\nexport function extractColor(color, input) {\n  if (input == null || typeof input === 'string') {\n    var hasA = color.a !== 1;\n\n    if (input !== null && input !== void 0 && input.startsWith('rgb(')) {\n      var _HSVtoRGB = HSVtoRGB(color),\n          r = _HSVtoRGB.r,\n          g = _HSVtoRGB.g,\n          b = _HSVtoRGB.b,\n          a = _HSVtoRGB.a;\n\n      return \"rgb(\".concat(r, \" \").concat(g, \" \").concat(b) + (hasA ? \" / \".concat(a, \")\") : ')');\n    } else if (input !== null && input !== void 0 && input.startsWith('hsl(')) {\n      var _HSVtoHSL = HSVtoHSL(color),\n          h = _HSVtoHSL.h,\n          s = _HSVtoHSL.s,\n          l = _HSVtoHSL.l,\n          _a = _HSVtoHSL.a;\n\n      return \"hsl(\".concat(h, \" \").concat(Math.round(s * 100), \" \").concat(Math.round(l * 100)) + (hasA ? \" / \".concat(_a, \")\") : ')');\n    }\n\n    var _hex = HSVtoHex(color);\n\n    if (color.a === 1) return _hex.slice(0, 7);else return _hex;\n  }\n\n  if (_typeof(input) === 'object') {\n    var converted;\n    if (has(input, ['r', 'g', 'b'])) converted = HSVtoRGB(color);else if (has(input, ['h', 's', 'l'])) converted = HSVtoHSL(color);else if (has(input, ['h', 's', 'v'])) converted = color;\n    return stripAlpha(converted, !has(input, ['a']) && color.a === 1);\n  }\n\n  return color;\n}\nexport function hasAlpha(color) {\n  if (!color) return false;\n\n  if (typeof color === 'string') {\n    return color.length > 7;\n  }\n\n  if (_typeof(color) === 'object') {\n    return has(color, ['a']) || has(color, ['alpha']);\n  }\n\n  return false;\n}\nexport var nullColor = {\n  h: 0,\n  s: 0,\n  v: 0,\n  a: 1\n};\nvar rgba = {\n  inputProps: {\n    type: 'number',\n    min: 0\n  },\n  inputs: [{\n    label: 'R',\n    max: 255,\n    step: 1,\n    getValue: function getValue(c) {\n      return Math.round(c.r);\n    },\n    getColor: function getColor(c, v) {\n      return _objectSpread(_objectSpread({}, c), {}, {\n        r: Number(v)\n      });\n    }\n  }, {\n    label: 'G',\n    max: 255,\n    step: 1,\n    getValue: function getValue(c) {\n      return Math.round(c.g);\n    },\n    getColor: function getColor(c, v) {\n      return _objectSpread(_objectSpread({}, c), {}, {\n        g: Number(v)\n      });\n    }\n  }, {\n    label: 'B',\n    max: 255,\n    step: 1,\n    getValue: function getValue(c) {\n      return Math.round(c.b);\n    },\n    getColor: function getColor(c, v) {\n      return _objectSpread(_objectSpread({}, c), {}, {\n        b: Number(v)\n      });\n    }\n  }, {\n    label: 'A',\n    max: 1,\n    step: 0.01,\n    getValue: function getValue(_ref) {\n      var a = _ref.a;\n      return a != null ? Math.round(a * 100) / 100 : 1;\n    },\n    getColor: function getColor(c, v) {\n      return _objectSpread(_objectSpread({}, c), {}, {\n        a: Number(v)\n      });\n    }\n  }],\n  to: HSVtoRGB,\n  from: RGBtoHSV\n};\n\nvar rgb = _objectSpread(_objectSpread({}, rgba), {}, {\n  inputs: (_rgba$inputs = rgba.inputs) === null || _rgba$inputs === void 0 ? void 0 : _rgba$inputs.slice(0, 3)\n});\n\nvar hsla = {\n  inputProps: {\n    type: 'number',\n    min: 0\n  },\n  inputs: [{\n    label: 'H',\n    max: 360,\n    step: 1,\n    getValue: function getValue(c) {\n      return Math.round(c.h);\n    },\n    getColor: function getColor(c, v) {\n      return _objectSpread(_objectSpread({}, c), {}, {\n        h: Number(v)\n      });\n    }\n  }, {\n    label: 'S',\n    max: 1,\n    step: 0.01,\n    getValue: function getValue(c) {\n      return Math.round(c.s * 100) / 100;\n    },\n    getColor: function getColor(c, v) {\n      return _objectSpread(_objectSpread({}, c), {}, {\n        s: Number(v)\n      });\n    }\n  }, {\n    label: 'L',\n    max: 1,\n    step: 0.01,\n    getValue: function getValue(c) {\n      return Math.round(c.l * 100) / 100;\n    },\n    getColor: function getColor(c, v) {\n      return _objectSpread(_objectSpread({}, c), {}, {\n        l: Number(v)\n      });\n    }\n  }, {\n    label: 'A',\n    max: 1,\n    step: 0.01,\n    getValue: function getValue(_ref2) {\n      var a = _ref2.a;\n      return a != null ? Math.round(a * 100) / 100 : 1;\n    },\n    getColor: function getColor(c, v) {\n      return _objectSpread(_objectSpread({}, c), {}, {\n        a: Number(v)\n      });\n    }\n  }],\n  to: HSVtoHSL,\n  from: HSLtoHSV\n};\n\nvar hsl = _objectSpread(_objectSpread({}, hsla), {}, {\n  inputs: hsla.inputs.slice(0, 3)\n});\n\nvar hexa = {\n  inputProps: {\n    type: 'text'\n  },\n  inputs: [{\n    label: 'HEXA',\n    getValue: function getValue(c) {\n      return c;\n    },\n    getColor: function getColor(c, v) {\n      return v;\n    }\n  }],\n  to: HSVtoHex,\n  from: HexToHSV\n};\n\nvar hex = _objectSpread(_objectSpread({}, hexa), {}, {\n  inputs: [{\n    label: 'HEX',\n    getValue: function getValue(c) {\n      return c.slice(0, 7);\n    },\n    getColor: function getColor(c, v) {\n      return v;\n    }\n  }]\n});\n\nexport var modes = {\n  rgb: rgb,\n  rgba: rgba,\n  hsl: hsl,\n  hsla: hsla,\n  hex: hex,\n  hexa: hexa\n};","map":{"version":3,"mappings":"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","names":["HexToHSV","HSLtoHSV","HSVtoHex","HSVtoHSL","HSVtoRGB","RGBtoHSV","has","stripAlpha","color","a","rest","extractColor","input","hasA","startsWith","r","g","b","h","s","l","Math","round","hex","slice","converted","hasAlpha","length","nullColor","v","rgba","inputProps","type","min","inputs","label","max","step","getValue","c","getColor","Number","_ref","to","from","rgb","hsla","_ref2","hsl","hexa","modes"],"sources":["../../../../src/components/VColorPicker/util/index.ts"],"sourcesContent":["// Utilities\nimport {\n  HexToHSV,\n  HSLtoHSV,\n  HSVtoHex,\n  HSVtoHSL,\n  HSVtoRGB,\n  RGBtoHSV,\n} from '@/util/colorUtils'\nimport { has } from '@/util/helpers'\n\n// Types\nimport type { HSL, HSV, RGB } from '@/util/colorUtils'\n\nfunction stripAlpha (color: any, stripAlpha: boolean) {\n  if (stripAlpha) {\n    const { a, ...rest } = color\n\n    return rest\n  }\n\n  return color\n}\n\nexport function extractColor (color: HSV, input: any) {\n  if (input == null || typeof input === 'string') {\n    const hasA = color.a !== 1\n    if (input?.startsWith('rgb(')) {\n      const { r, g, b, a } = HSVtoRGB(color)\n      return `rgb(${r} ${g} ${b}` + (hasA ? ` / ${a})` : ')')\n    } else if (input?.startsWith('hsl(')) {\n      const { h, s, l, a } = HSVtoHSL(color)\n      return `hsl(${h} ${Math.round(s * 100)} ${Math.round(l * 100)}` + (hasA ? ` / ${a})` : ')')\n    }\n\n    const hex = HSVtoHex(color)\n\n    if (color.a === 1) return hex.slice(0, 7)\n    else return hex\n  }\n\n  if (typeof input === 'object') {\n    let converted\n\n    if (has(input, ['r', 'g', 'b'])) converted = HSVtoRGB(color)\n    else if (has(input, ['h', 's', 'l'])) converted = HSVtoHSL(color)\n    else if (has(input, ['h', 's', 'v'])) converted = color\n\n    return stripAlpha(converted, !has(input, ['a']) && color.a === 1)\n  }\n\n  return color\n}\n\nexport function hasAlpha (color: any) {\n  if (!color) return false\n\n  if (typeof color === 'string') {\n    return color.length > 7\n  }\n\n  if (typeof color === 'object') {\n    return has(color, ['a']) || has(color, ['alpha'])\n  }\n\n  return false\n}\n\nexport const nullColor = { h: 0, s: 0, v: 0, a: 1 }\n\nexport type ColorPickerMode = {\n  inputProps: Record<string, unknown>\n  inputs: {\n    [key: string]: any\n    getValue: (color: any) => number | string\n    getColor: (color: any, v: string) => any\n  }[]\n  from: (color: any) => HSV\n  to: (color: HSV) => any\n}\n\nconst rgba: ColorPickerMode = {\n  inputProps: {\n    type: 'number',\n    min: 0,\n  },\n  inputs: [\n    {\n      label: 'R',\n      max: 255,\n      step: 1,\n      getValue: (c: RGB) => Math.round(c.r),\n      getColor: (c: RGB, v: string): RGB => ({ ...c, r: Number(v) }),\n    },\n    {\n      label: 'G',\n      max: 255,\n      step: 1,\n      getValue: (c: RGB) => Math.round(c.g),\n      getColor: (c: RGB, v: string): RGB => ({ ...c, g: Number(v) }),\n    },\n    {\n      label: 'B',\n      max: 255,\n      step: 1,\n      getValue: (c: RGB) => Math.round(c.b),\n      getColor: (c: RGB, v: string): RGB => ({ ...c, b: Number(v) }),\n    },\n    {\n      label: 'A',\n      max: 1,\n      step: 0.01,\n      getValue: ({ a }: RGB) => a != null ? Math.round(a * 100) / 100 : 1,\n      getColor: (c: RGB, v: string): RGB => ({ ...c, a: Number(v) }),\n    },\n  ],\n  to: HSVtoRGB,\n  from: RGBtoHSV,\n}\n\nconst rgb = {\n  ...rgba,\n  inputs: rgba.inputs?.slice(0, 3),\n}\n\nconst hsla: ColorPickerMode = {\n  inputProps: {\n    type: 'number',\n    min: 0,\n  },\n  inputs: [\n    {\n      label: 'H',\n      max: 360,\n      step: 1,\n      getValue: (c: HSL) => Math.round(c.h),\n      getColor: (c: HSL, v: string): HSL => ({ ...c, h: Number(v) }),\n    },\n    {\n      label: 'S',\n      max: 1,\n      step: 0.01,\n      getValue: (c: HSL) => Math.round(c.s * 100) / 100,\n      getColor: (c: HSL, v: string): HSL => ({ ...c, s: Number(v) }),\n    },\n    {\n      label: 'L',\n      max: 1,\n      step: 0.01,\n      getValue: (c: HSL) => Math.round(c.l * 100) / 100,\n      getColor: (c: HSL, v: string): HSL => ({ ...c, l: Number(v) }),\n    },\n    {\n      label: 'A',\n      max: 1,\n      step: 0.01,\n      getValue: ({ a }: HSL) => a != null ? Math.round(a * 100) / 100 : 1,\n      getColor: (c: HSL, v: string): HSL => ({ ...c, a: Number(v) }),\n    },\n  ],\n  to: HSVtoHSL,\n  from: HSLtoHSV,\n}\n\nconst hsl = {\n  ...hsla,\n  inputs: hsla.inputs.slice(0, 3),\n}\n\nconst hexa: ColorPickerMode = {\n  inputProps: {\n    type: 'text',\n  },\n  inputs: [\n    {\n      label: 'HEXA',\n      getValue: (c: string) => c,\n      getColor: (c: string, v: string) => v,\n    },\n  ],\n  to: HSVtoHex,\n  from: HexToHSV,\n}\n\nconst hex = {\n  ...hexa,\n  inputs: [\n    {\n      label: 'HEX',\n      getValue: (c: string) => c.slice(0, 7),\n      getColor: (c: string, v: string) => v,\n    },\n  ],\n}\n\nexport const modes = {\n  rgb,\n  rgba,\n  hsl,\n  hsla,\n  hex,\n  hexa,\n} satisfies Record<string, ColorPickerMode>\n"]},"metadata":{},"sourceType":"module"}