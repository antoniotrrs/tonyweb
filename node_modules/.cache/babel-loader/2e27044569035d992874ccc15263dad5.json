{"ast":null,"code":"import { mergeProps as _mergeProps, createVNode as _createVNode } from \"vue\"; // Components\n\nimport { makeVBarlineProps, VBarline } from \"./VBarline.js\";\nimport { makeVTrendlineProps, VTrendline } from \"./VTrendline.js\"; // Composables\n\nimport { useTextColor } from \"../../composables/color.js\"; // Utilities\n\nimport { computed, toRef } from 'vue';\nimport { genericComponent, propsFactory, useRender } from \"../../util/index.js\"; // Types\n// Types\n\nexport const makeVSparklineProps = propsFactory({\n  type: {\n    type: String,\n    default: 'trend'\n  },\n  ...makeVBarlineProps(),\n  ...makeVTrendlineProps()\n}, 'VSparkline');\nexport const VSparkline = genericComponent()({\n  name: 'VSparkline',\n  props: makeVSparklineProps(),\n\n  setup(props, _ref) {\n    let {\n      slots\n    } = _ref;\n    const {\n      textColorClasses,\n      textColorStyles\n    } = useTextColor(toRef(props, 'color'));\n    const hasLabels = computed(() => {\n      return Boolean(props.showLabels || props.labels.length > 0 || !!slots?.label);\n    });\n    const totalHeight = computed(() => {\n      let height = parseInt(props.height, 10);\n      if (hasLabels.value) height += parseInt(props.labelSize, 10) * 1.5;\n      return height;\n    });\n    useRender(() => {\n      const Tag = props.type === 'trend' ? VTrendline : VBarline;\n      const lineProps = props.type === 'trend' ? VTrendline.filterProps(props) : VBarline.filterProps(props);\n      return _createVNode(Tag, _mergeProps({\n        \"key\": props.type,\n        \"class\": textColorClasses.value,\n        \"style\": textColorStyles.value,\n        \"viewBox\": `0 0 ${props.width} ${parseInt(totalHeight.value, 10)}`\n      }, lineProps), slots);\n    });\n  }\n\n});","map":{"version":3,"mappings":"8EAAA;;AAAA,SACSA,iBADT,EAC4BC,QAD5B,QACoC,eADpC;AACoC,SAC3BC,mBAD2B,EACNC,UADM,QACI,iBADJ,C,CAGpC;;AAAA,SACSC,YADT,QACqB,4BADrB,C,CAGA;;AACA,SAASC,QAAT,EAAmBC,KAAnB,QAAgC,KAAhC;AAAqC,SAC5BC,gBAD4B,EACVC,YADU,EACIC,SADJ,QACa,qBADb,C,CAGrC;AAGA;;AAEA,OAAO,MAAMC,mBAAmB,GAAGF,YAAY,CAAC;AAC9CG,MAAI,EAAE;AACJA,QAAI,EAAEC,MADF;AAEJC,WAAO,EAAE;AAFL,GADwC;AAM9C,KAAGb,iBAAiB,EAN0B;AAO9C,KAAGE,mBAAmB;AAPwB,CAAD,EAQ5C,YAR4C,CAAxC;AAeP,OAAO,MAAMY,UAAU,GAAGP,gBAAgB,GAAoB;AAC5DQ,MAAI,EAAE,YADsD;AAG5DC,OAAK,EAAEN,mBAAmB,EAHkC;;AAK5DO,OAAKA,CAAED,KAAFC,EAAOC,IAAPD,EAAoB;AAAA,QAAX;AAAEE;AAAF,QAASD,IAAE;AACvB,UAAM;AAAEE,sBAAF;AAAoBC;AAApB,QAAwCjB,YAAY,CAACE,KAAK,CAACU,KAAD,EAAQ,OAAR,CAAN,CAA1D;AACA,UAAMM,SAAS,GAAGjB,QAAQ,CAAC,MAAM;AAC/B,aAAOkB,OAAO,CACZP,KAAK,CAACQ,UAANR,IACAA,KAAK,CAACS,MAANT,CAAaU,MAAbV,GAAsB,CADtBA,IAEA,CAAC,CAACG,KAAK,EAAEQ,KAHG,CAAd;AAKD,KANyB,CAA1B;AAOA,UAAMC,WAAW,GAAGvB,QAAQ,CAAC,MAAM;AACjC,UAAIwB,MAAM,GAAGC,QAAQ,CAACd,KAAK,CAACa,MAAP,EAAe,EAAf,CAArB;AAEA,UAAIP,SAAS,CAACS,KAAd,EAAqBF,MAAM,IAAIC,QAAQ,CAACd,KAAK,CAACgB,SAAP,EAAkB,EAAlB,CAARF,GAAgC,GAA1CD;AAErB,aAAOA,MAAP;AACD,KAN2B,CAA5B;AAQApB,aAAS,CAAC,MAAM;AACd,YAAMwB,GAAG,GAAGjB,KAAK,CAACL,IAANK,KAAe,OAAfA,GAAyBb,UAAzBa,GAAsCf,QAAlD;AACA,YAAMiC,SAAS,GAAGlB,KAAK,CAACL,IAANK,KAAe,OAAfA,GAAyBb,UAAU,CAACgC,WAAXhC,CAAuBa,KAAvBb,CAAzBa,GAAyDf,QAAQ,CAACkC,WAATlC,CAAqBe,KAArBf,CAA3E;AAEA;AAAA,eAEUe,KAAK,CAACL,IAFhB;AAEoB,iBACRS,gBAAgB,CAACW,KAH7B;AAGkC,iBACtBV,eAAe,CAACU,KAJ5B;AAIiC,mBACnB,OAAOf,KAAK,CAACoB,KAAK,IAAIN,QAAQ,CAACF,WAAW,CAACG,KAAb,EAAoB,EAApB,CAAuB;AALnE,SAMSG,SANT,GAOcf,KAPd;AAUD,KAdQ,CAATV;AAeF;;AArC4D,CAApB,CAAnC","names":["makeVBarlineProps","VBarline","makeVTrendlineProps","VTrendline","useTextColor","computed","toRef","genericComponent","propsFactory","useRender","makeVSparklineProps","type","String","default","VSparkline","name","props","setup","_ref","slots","textColorClasses","textColorStyles","hasLabels","Boolean","showLabels","labels","length","label","totalHeight","height","parseInt","value","labelSize","Tag","lineProps","filterProps","width"],"sources":["../../../src/components/VSparkline/VSparkline.tsx"],"sourcesContent":["// Components\nimport { makeVBarlineProps, VBarline } from './VBarline'\nimport { makeVTrendlineProps, VTrendline } from './VTrendline'\n\n// Composables\nimport { useTextColor } from '@/composables/color'\n\n// Utilities\nimport { computed, toRef } from 'vue'\nimport { genericComponent, propsFactory, useRender } from '@/util'\n\n// Types\nimport type { PropType } from 'vue'\n\n// Types\n\nexport const makeVSparklineProps = propsFactory({\n  type: {\n    type: String as PropType<'trend' | 'bar'>,\n    default: 'trend',\n  },\n\n  ...makeVBarlineProps(),\n  ...makeVTrendlineProps(),\n}, 'VSparkline')\n\nexport type VSparklineSlots = {\n  default: void\n  label: { index: number, value: string }\n}\n\nexport const VSparkline = genericComponent<VSparklineSlots>()({\n  name: 'VSparkline',\n\n  props: makeVSparklineProps(),\n\n  setup (props, { slots }) {\n    const { textColorClasses, textColorStyles } = useTextColor(toRef(props, 'color'))\n    const hasLabels = computed(() => {\n      return Boolean(\n        props.showLabels ||\n        props.labels.length > 0 ||\n        !!slots?.label\n      )\n    })\n    const totalHeight = computed(() => {\n      let height = parseInt(props.height, 10)\n\n      if (hasLabels.value) height += parseInt(props.labelSize, 10) * 1.5\n\n      return height\n    })\n\n    useRender(() => {\n      const Tag = props.type === 'trend' ? VTrendline : VBarline\n      const lineProps = props.type === 'trend' ? VTrendline.filterProps(props) : VBarline.filterProps(props)\n\n      return (\n        <Tag\n          key={ props.type }\n          class={ textColorClasses.value }\n          style={ textColorStyles.value }\n          viewBox={ `0 0 ${props.width} ${parseInt(totalHeight.value, 10)}` }\n          { ...lineProps }\n          v-slots={ slots }\n        />\n      )\n    })\n  },\n})\n\nexport type VSparkline = InstanceType<typeof VSparkline>\n"]},"metadata":{},"sourceType":"module"}