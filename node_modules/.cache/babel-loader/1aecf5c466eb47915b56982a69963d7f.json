{"ast":null,"code":"// Utilities\nimport { HexToHSV, HSLtoHSV, HSVtoHex, HSVtoHSL, HSVtoRGB, RGBtoHSV } from \"../../../util/colorUtils.js\";\nimport { has } from \"../../../util/helpers.js\"; // Types\n\nfunction stripAlpha(color, stripAlpha) {\n  if (stripAlpha) {\n    const {\n      a,\n      ...rest\n    } = color;\n    return rest;\n  }\n\n  return color;\n}\n\nexport function extractColor(color, input) {\n  if (input == null || typeof input === 'string') {\n    const hasA = color.a !== 1;\n\n    if (input?.startsWith('rgb(')) {\n      const {\n        r,\n        g,\n        b,\n        a\n      } = HSVtoRGB(color);\n      return `rgb(${r} ${g} ${b}` + (hasA ? ` / ${a})` : ')');\n    } else if (input?.startsWith('hsl(')) {\n      const {\n        h,\n        s,\n        l,\n        a\n      } = HSVtoHSL(color);\n      return `hsl(${h} ${Math.round(s * 100)} ${Math.round(l * 100)}` + (hasA ? ` / ${a})` : ')');\n    }\n\n    const hex = HSVtoHex(color);\n    if (color.a === 1) return hex.slice(0, 7);else return hex;\n  }\n\n  if (typeof input === 'object') {\n    let converted;\n    if (has(input, ['r', 'g', 'b'])) converted = HSVtoRGB(color);else if (has(input, ['h', 's', 'l'])) converted = HSVtoHSL(color);else if (has(input, ['h', 's', 'v'])) converted = color;\n    return stripAlpha(converted, !has(input, ['a']) && color.a === 1);\n  }\n\n  return color;\n}\nexport function hasAlpha(color) {\n  if (!color) return false;\n\n  if (typeof color === 'string') {\n    return color.length > 7;\n  }\n\n  if (typeof color === 'object') {\n    return has(color, ['a']) || has(color, ['alpha']);\n  }\n\n  return false;\n}\nexport const nullColor = {\n  h: 0,\n  s: 0,\n  v: 0,\n  a: 1\n};\nconst rgba = {\n  inputProps: {\n    type: 'number',\n    min: 0\n  },\n  inputs: [{\n    label: 'R',\n    max: 255,\n    step: 1,\n    getValue: c => Math.round(c.r),\n    getColor: (c, v) => ({ ...c,\n      r: Number(v)\n    })\n  }, {\n    label: 'G',\n    max: 255,\n    step: 1,\n    getValue: c => Math.round(c.g),\n    getColor: (c, v) => ({ ...c,\n      g: Number(v)\n    })\n  }, {\n    label: 'B',\n    max: 255,\n    step: 1,\n    getValue: c => Math.round(c.b),\n    getColor: (c, v) => ({ ...c,\n      b: Number(v)\n    })\n  }, {\n    label: 'A',\n    max: 1,\n    step: 0.01,\n    getValue: _ref => {\n      let {\n        a\n      } = _ref;\n      return a != null ? Math.round(a * 100) / 100 : 1;\n    },\n    getColor: (c, v) => ({ ...c,\n      a: Number(v)\n    })\n  }],\n  to: HSVtoRGB,\n  from: RGBtoHSV\n};\nconst rgb = { ...rgba,\n  inputs: rgba.inputs?.slice(0, 3)\n};\nconst hsla = {\n  inputProps: {\n    type: 'number',\n    min: 0\n  },\n  inputs: [{\n    label: 'H',\n    max: 360,\n    step: 1,\n    getValue: c => Math.round(c.h),\n    getColor: (c, v) => ({ ...c,\n      h: Number(v)\n    })\n  }, {\n    label: 'S',\n    max: 1,\n    step: 0.01,\n    getValue: c => Math.round(c.s * 100) / 100,\n    getColor: (c, v) => ({ ...c,\n      s: Number(v)\n    })\n  }, {\n    label: 'L',\n    max: 1,\n    step: 0.01,\n    getValue: c => Math.round(c.l * 100) / 100,\n    getColor: (c, v) => ({ ...c,\n      l: Number(v)\n    })\n  }, {\n    label: 'A',\n    max: 1,\n    step: 0.01,\n    getValue: _ref2 => {\n      let {\n        a\n      } = _ref2;\n      return a != null ? Math.round(a * 100) / 100 : 1;\n    },\n    getColor: (c, v) => ({ ...c,\n      a: Number(v)\n    })\n  }],\n  to: HSVtoHSL,\n  from: HSLtoHSV\n};\nconst hsl = { ...hsla,\n  inputs: hsla.inputs.slice(0, 3)\n};\nconst hexa = {\n  inputProps: {\n    type: 'text'\n  },\n  inputs: [{\n    label: 'HEXA',\n    getValue: c => c,\n    getColor: (c, v) => v\n  }],\n  to: HSVtoHex,\n  from: HexToHSV\n};\nconst hex = { ...hexa,\n  inputs: [{\n    label: 'HEX',\n    getValue: c => c.slice(0, 7),\n    getColor: (c, v) => v\n  }]\n};\nexport const modes = {\n  rgb,\n  rgba,\n  hsl,\n  hsla,\n  hex,\n  hexa\n};","map":{"version":3,"mappings":"AAAA;AAAA,SAEEA,QAFF,EAGEC,QAHF,EAIEC,QAJF,EAKEC,QALF,EAMEC,QANF,EAOEC,QAPF,QAOU,6BAPV;AAOU,SAEDC,GAFC,QAEE,0BAFF,C,CAIV;;AAGA,SAASC,UAAT,CAAqBC,KAArB,EAAiCD,UAAjC,EAAsD;AACpD,MAAIA,UAAJ,EAAgB;AACd,UAAM;AAAEE,OAAF;AAAK,SAAGC;AAAR,QAAiBF,KAAvB;AAEA,WAAOE,IAAP;AACF;;AAEA,SAAOF,KAAP;AACF;;AAEA,OAAO,SAASG,YAAT,CAAuBH,KAAvB,EAAmCI,KAAnC,EAA+C;AACpD,MAAIA,KAAK,IAAI,IAATA,IAAiB,OAAOA,KAAP,KAAiB,QAAtC,EAAgD;AAC9C,UAAMC,IAAI,GAAGL,KAAK,CAACC,CAAND,KAAY,CAAzB;;AACA,QAAII,KAAK,EAAEE,UAAPF,CAAkB,MAAlBA,CAAJ,EAA+B;AAC7B,YAAM;AAAEG,SAAF;AAAKC,SAAL;AAAQC,SAAR;AAAWR;AAAX,UAAiBL,QAAQ,CAACI,KAAD,CAA/B;AACA,aAAO,OAAOO,CAAC,IAAIC,CAAC,IAAIC,CAAC,EAAlB,IAAwBJ,IAAI,GAAG,MAAMJ,CAAC,GAAV,GAAgB,GAA5C,CAAP;AACD,KAHD,MAGO,IAAIG,KAAK,EAAEE,UAAPF,CAAkB,MAAlBA,CAAJ,EAA+B;AACpC,YAAM;AAAEM,SAAF;AAAKC,SAAL;AAAQC,SAAR;AAAWX;AAAX,UAAiBN,QAAQ,CAACK,KAAD,CAA/B;AACA,aAAO,OAAOU,CAAC,IAAIG,IAAI,CAACC,KAALD,CAAWF,CAAC,GAAG,GAAfE,CAAmB,IAAIA,IAAI,CAACC,KAALD,CAAWD,CAAC,GAAG,GAAfC,CAAmB,EAAtD,IAA4DR,IAAI,GAAG,MAAMJ,CAAC,GAAV,GAAgB,GAAhF,CAAP;AACF;;AAEA,UAAMc,GAAG,GAAGrB,QAAQ,CAACM,KAAD,CAApB;AAEA,QAAIA,KAAK,CAACC,CAAND,KAAY,CAAhB,EAAmB,OAAOe,GAAG,CAACC,KAAJD,CAAU,CAAVA,EAAa,CAAbA,CAAP,CAAnB,KACK,OAAOA,GAAP;AACP;;AAEA,MAAI,OAAOX,KAAP,KAAiB,QAArB,EAA+B;AAC7B,QAAIa,SAAJ;AAEA,QAAInB,GAAG,CAACM,KAAD,EAAQ,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAAR,CAAP,EAAiCa,SAAS,GAAGrB,QAAQ,CAACI,KAAD,CAApBiB,CAAjC,KACK,IAAInB,GAAG,CAACM,KAAD,EAAQ,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAAR,CAAP,EAAiCa,SAAS,GAAGtB,QAAQ,CAACK,KAAD,CAApBiB,CAAjC,KACA,IAAInB,GAAG,CAACM,KAAD,EAAQ,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAAR,CAAP,EAAiCa,SAAS,GAAGjB,KAAZiB;AAEtC,WAAOlB,UAAU,CAACkB,SAAD,EAAY,CAACnB,GAAG,CAACM,KAAD,EAAQ,CAAC,GAAD,CAAR,CAAJ,IAAsBJ,KAAK,CAACC,CAAND,KAAY,CAA9C,CAAjB;AACF;;AAEA,SAAOA,KAAP;AACF;AAEA,OAAO,SAASkB,QAAT,CAAmBlB,KAAnB,EAA+B;AACpC,MAAI,CAACA,KAAL,EAAY,OAAO,KAAP;;AAEZ,MAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7B,WAAOA,KAAK,CAACmB,MAANnB,GAAe,CAAtB;AACF;;AAEA,MAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7B,WAAOF,GAAG,CAACE,KAAD,EAAQ,CAAC,GAAD,CAAR,CAAHF,IAAqBA,GAAG,CAACE,KAAD,EAAQ,CAAC,OAAD,CAAR,CAA/B;AACF;;AAEA,SAAO,KAAP;AACF;AAEA,OAAO,MAAMoB,SAAS,GAAG;AAAEV,GAAC,EAAE,CAAL;AAAQC,GAAC,EAAE,CAAX;AAAcU,GAAC,EAAE,CAAjB;AAAoBpB,GAAC,EAAE;AAAvB,CAAlB;AAaP,MAAMqB,IAAqB,GAAG;AAC5BC,YAAU,EAAE;AACVC,QAAI,EAAE,QADI;AAEVC,OAAG,EAAE;AAFK,GADgB;AAK5BC,QAAM,EAAE,CACN;AACEC,SAAK,EAAE,GADT;AAEEC,OAAG,EAAE,GAFP;AAGEC,QAAI,EAAE,CAHR;AAIEC,YAAQ,EAAGC,CAAM,IAAKlB,IAAI,CAACC,KAALD,CAAWkB,CAAC,CAACxB,CAAbM,CAJxB;AAKEmB,YAAQ,EAAEA,CAACD,CAADC,EAASX,CAATW,MAA6B,EAAE,GAAGD,CAAL;AAAQxB,OAAC,EAAE0B,MAAM,CAACZ,CAAD;AAAjB,KAA7BW;AALZ,GADM,EAQN;AACEL,SAAK,EAAE,GADT;AAEEC,OAAG,EAAE,GAFP;AAGEC,QAAI,EAAE,CAHR;AAIEC,YAAQ,EAAGC,CAAM,IAAKlB,IAAI,CAACC,KAALD,CAAWkB,CAAC,CAACvB,CAAbK,CAJxB;AAKEmB,YAAQ,EAAEA,CAACD,CAADC,EAASX,CAATW,MAA6B,EAAE,GAAGD,CAAL;AAAQvB,OAAC,EAAEyB,MAAM,CAACZ,CAAD;AAAjB,KAA7BW;AALZ,GARM,EAeN;AACEL,SAAK,EAAE,GADT;AAEEC,OAAG,EAAE,GAFP;AAGEC,QAAI,EAAE,CAHR;AAIEC,YAAQ,EAAGC,CAAM,IAAKlB,IAAI,CAACC,KAALD,CAAWkB,CAAC,CAACtB,CAAbI,CAJxB;AAKEmB,YAAQ,EAAEA,CAACD,CAADC,EAASX,CAATW,MAA6B,EAAE,GAAGD,CAAL;AAAQtB,OAAC,EAAEwB,MAAM,CAACZ,CAAD;AAAjB,KAA7BW;AALZ,GAfM,EAsBN;AACEL,SAAK,EAAE,GADT;AAEEC,OAAG,EAAE,CAFP;AAGEC,QAAI,EAAE,IAHR;AAIEC,YAAQ,EAAEI;AAAA,UAAC;AAAEjC;AAAF,UAAUiC,IAAX;AAAW,aAAKjC,CAAC,IAAI,IAALA,GAAYY,IAAI,CAACC,KAALD,CAAWZ,CAAC,GAAG,GAAfY,IAAsB,GAAlCZ,GAAwC,CAA7C;AAA8C,KAJrE;AAKE+B,YAAQ,EAAEA,CAACD,CAADC,EAASX,CAATW,MAA6B,EAAE,GAAGD,CAAL;AAAQ9B,OAAC,EAAEgC,MAAM,CAACZ,CAAD;AAAjB,KAA7BW;AALZ,GAtBM,CALoB;AAmC5BG,IAAE,EAAEvC,QAnCwB;AAoC5BwC,MAAI,EAAEvC;AApCsB,CAA9B;AAuCA,MAAMwC,GAAG,GAAG,EACV,GAAGf,IADO;AAEVI,QAAM,EAAEJ,IAAI,CAACI,MAALJ,EAAaN,KAAbM,CAAmB,CAAnBA,EAAsB,CAAtBA;AAFE,CAAZ;AAKA,MAAMgB,IAAqB,GAAG;AAC5Bf,YAAU,EAAE;AACVC,QAAI,EAAE,QADI;AAEVC,OAAG,EAAE;AAFK,GADgB;AAK5BC,QAAM,EAAE,CACN;AACEC,SAAK,EAAE,GADT;AAEEC,OAAG,EAAE,GAFP;AAGEC,QAAI,EAAE,CAHR;AAIEC,YAAQ,EAAGC,CAAM,IAAKlB,IAAI,CAACC,KAALD,CAAWkB,CAAC,CAACrB,CAAbG,CAJxB;AAKEmB,YAAQ,EAAEA,CAACD,CAADC,EAASX,CAATW,MAA6B,EAAE,GAAGD,CAAL;AAAQrB,OAAC,EAAEuB,MAAM,CAACZ,CAAD;AAAjB,KAA7BW;AALZ,GADM,EAQN;AACEL,SAAK,EAAE,GADT;AAEEC,OAAG,EAAE,CAFP;AAGEC,QAAI,EAAE,IAHR;AAIEC,YAAQ,EAAGC,CAAM,IAAKlB,IAAI,CAACC,KAALD,CAAWkB,CAAC,CAACpB,CAAFoB,GAAM,GAAjBlB,IAAwB,GAJhD;AAKEmB,YAAQ,EAAEA,CAACD,CAADC,EAASX,CAATW,MAA6B,EAAE,GAAGD,CAAL;AAAQpB,OAAC,EAAEsB,MAAM,CAACZ,CAAD;AAAjB,KAA7BW;AALZ,GARM,EAeN;AACEL,SAAK,EAAE,GADT;AAEEC,OAAG,EAAE,CAFP;AAGEC,QAAI,EAAE,IAHR;AAIEC,YAAQ,EAAGC,CAAM,IAAKlB,IAAI,CAACC,KAALD,CAAWkB,CAAC,CAACnB,CAAFmB,GAAM,GAAjBlB,IAAwB,GAJhD;AAKEmB,YAAQ,EAAEA,CAACD,CAADC,EAASX,CAATW,MAA6B,EAAE,GAAGD,CAAL;AAAQnB,OAAC,EAAEqB,MAAM,CAACZ,CAAD;AAAjB,KAA7BW;AALZ,GAfM,EAsBN;AACEL,SAAK,EAAE,GADT;AAEEC,OAAG,EAAE,CAFP;AAGEC,QAAI,EAAE,IAHR;AAIEC,YAAQ,EAAES;AAAA,UAAC;AAAEtC;AAAF,UAAUsC,KAAX;AAAW,aAAKtC,CAAC,IAAI,IAALA,GAAYY,IAAI,CAACC,KAALD,CAAWZ,CAAC,GAAG,GAAfY,IAAsB,GAAlCZ,GAAwC,CAA7C;AAA8C,KAJrE;AAKE+B,YAAQ,EAAEA,CAACD,CAADC,EAASX,CAATW,MAA6B,EAAE,GAAGD,CAAL;AAAQ9B,OAAC,EAAEgC,MAAM,CAACZ,CAAD;AAAjB,KAA7BW;AALZ,GAtBM,CALoB;AAmC5BG,IAAE,EAAExC,QAnCwB;AAoC5ByC,MAAI,EAAE3C;AApCsB,CAA9B;AAuCA,MAAM+C,GAAG,GAAG,EACV,GAAGF,IADO;AAEVZ,QAAM,EAAEY,IAAI,CAACZ,MAALY,CAAYtB,KAAZsB,CAAkB,CAAlBA,EAAqB,CAArBA;AAFE,CAAZ;AAKA,MAAMG,IAAqB,GAAG;AAC5BlB,YAAU,EAAE;AACVC,QAAI,EAAE;AADI,GADgB;AAI5BE,QAAM,EAAE,CACN;AACEC,SAAK,EAAE,MADT;AAEEG,YAAQ,EAAGC,CAAS,IAAKA,CAF3B;AAGEC,YAAQ,EAAEA,CAACD,CAADC,EAAYX,CAAZW,KAA0BX;AAHtC,GADM,CAJoB;AAW5Bc,IAAE,EAAEzC,QAXwB;AAY5B0C,MAAI,EAAE5C;AAZsB,CAA9B;AAeA,MAAMuB,GAAG,GAAG,EACV,GAAG0B,IADO;AAEVf,QAAM,EAAE,CACN;AACEC,SAAK,EAAE,KADT;AAEEG,YAAQ,EAAGC,CAAS,IAAKA,CAAC,CAACf,KAAFe,CAAQ,CAARA,EAAW,CAAXA,CAF3B;AAGEC,YAAQ,EAAEA,CAACD,CAADC,EAAYX,CAAZW,KAA0BX;AAHtC,GADM;AAFE,CAAZ;AAWA,OAAO,MAAMqB,KAAK,GAAG;AACnBL,KADmB;AAEnBf,MAFmB;AAGnBkB,KAHmB;AAInBF,MAJmB;AAKnBvB,KALmB;AAMnB0B;AANmB,CAAd","names":["HexToHSV","HSLtoHSV","HSVtoHex","HSVtoHSL","HSVtoRGB","RGBtoHSV","has","stripAlpha","color","a","rest","extractColor","input","hasA","startsWith","r","g","b","h","s","l","Math","round","hex","slice","converted","hasAlpha","length","nullColor","v","rgba","inputProps","type","min","inputs","label","max","step","getValue","c","getColor","Number","_ref","to","from","rgb","hsla","_ref2","hsl","hexa","modes"],"sources":["../../../../src/components/VColorPicker/util/index.ts"],"sourcesContent":["// Utilities\nimport {\n  HexToHSV,\n  HSLtoHSV,\n  HSVtoHex,\n  HSVtoHSL,\n  HSVtoRGB,\n  RGBtoHSV,\n} from '@/util/colorUtils'\nimport { has } from '@/util/helpers'\n\n// Types\nimport type { HSL, HSV, RGB } from '@/util/colorUtils'\n\nfunction stripAlpha (color: any, stripAlpha: boolean) {\n  if (stripAlpha) {\n    const { a, ...rest } = color\n\n    return rest\n  }\n\n  return color\n}\n\nexport function extractColor (color: HSV, input: any) {\n  if (input == null || typeof input === 'string') {\n    const hasA = color.a !== 1\n    if (input?.startsWith('rgb(')) {\n      const { r, g, b, a } = HSVtoRGB(color)\n      return `rgb(${r} ${g} ${b}` + (hasA ? ` / ${a})` : ')')\n    } else if (input?.startsWith('hsl(')) {\n      const { h, s, l, a } = HSVtoHSL(color)\n      return `hsl(${h} ${Math.round(s * 100)} ${Math.round(l * 100)}` + (hasA ? ` / ${a})` : ')')\n    }\n\n    const hex = HSVtoHex(color)\n\n    if (color.a === 1) return hex.slice(0, 7)\n    else return hex\n  }\n\n  if (typeof input === 'object') {\n    let converted\n\n    if (has(input, ['r', 'g', 'b'])) converted = HSVtoRGB(color)\n    else if (has(input, ['h', 's', 'l'])) converted = HSVtoHSL(color)\n    else if (has(input, ['h', 's', 'v'])) converted = color\n\n    return stripAlpha(converted, !has(input, ['a']) && color.a === 1)\n  }\n\n  return color\n}\n\nexport function hasAlpha (color: any) {\n  if (!color) return false\n\n  if (typeof color === 'string') {\n    return color.length > 7\n  }\n\n  if (typeof color === 'object') {\n    return has(color, ['a']) || has(color, ['alpha'])\n  }\n\n  return false\n}\n\nexport const nullColor = { h: 0, s: 0, v: 0, a: 1 }\n\nexport type ColorPickerMode = {\n  inputProps: Record<string, unknown>\n  inputs: {\n    [key: string]: any\n    getValue: (color: any) => number | string\n    getColor: (color: any, v: string) => any\n  }[]\n  from: (color: any) => HSV\n  to: (color: HSV) => any\n}\n\nconst rgba: ColorPickerMode = {\n  inputProps: {\n    type: 'number',\n    min: 0,\n  },\n  inputs: [\n    {\n      label: 'R',\n      max: 255,\n      step: 1,\n      getValue: (c: RGB) => Math.round(c.r),\n      getColor: (c: RGB, v: string): RGB => ({ ...c, r: Number(v) }),\n    },\n    {\n      label: 'G',\n      max: 255,\n      step: 1,\n      getValue: (c: RGB) => Math.round(c.g),\n      getColor: (c: RGB, v: string): RGB => ({ ...c, g: Number(v) }),\n    },\n    {\n      label: 'B',\n      max: 255,\n      step: 1,\n      getValue: (c: RGB) => Math.round(c.b),\n      getColor: (c: RGB, v: string): RGB => ({ ...c, b: Number(v) }),\n    },\n    {\n      label: 'A',\n      max: 1,\n      step: 0.01,\n      getValue: ({ a }: RGB) => a != null ? Math.round(a * 100) / 100 : 1,\n      getColor: (c: RGB, v: string): RGB => ({ ...c, a: Number(v) }),\n    },\n  ],\n  to: HSVtoRGB,\n  from: RGBtoHSV,\n}\n\nconst rgb = {\n  ...rgba,\n  inputs: rgba.inputs?.slice(0, 3),\n}\n\nconst hsla: ColorPickerMode = {\n  inputProps: {\n    type: 'number',\n    min: 0,\n  },\n  inputs: [\n    {\n      label: 'H',\n      max: 360,\n      step: 1,\n      getValue: (c: HSL) => Math.round(c.h),\n      getColor: (c: HSL, v: string): HSL => ({ ...c, h: Number(v) }),\n    },\n    {\n      label: 'S',\n      max: 1,\n      step: 0.01,\n      getValue: (c: HSL) => Math.round(c.s * 100) / 100,\n      getColor: (c: HSL, v: string): HSL => ({ ...c, s: Number(v) }),\n    },\n    {\n      label: 'L',\n      max: 1,\n      step: 0.01,\n      getValue: (c: HSL) => Math.round(c.l * 100) / 100,\n      getColor: (c: HSL, v: string): HSL => ({ ...c, l: Number(v) }),\n    },\n    {\n      label: 'A',\n      max: 1,\n      step: 0.01,\n      getValue: ({ a }: HSL) => a != null ? Math.round(a * 100) / 100 : 1,\n      getColor: (c: HSL, v: string): HSL => ({ ...c, a: Number(v) }),\n    },\n  ],\n  to: HSVtoHSL,\n  from: HSLtoHSV,\n}\n\nconst hsl = {\n  ...hsla,\n  inputs: hsla.inputs.slice(0, 3),\n}\n\nconst hexa: ColorPickerMode = {\n  inputProps: {\n    type: 'text',\n  },\n  inputs: [\n    {\n      label: 'HEXA',\n      getValue: (c: string) => c,\n      getColor: (c: string, v: string) => v,\n    },\n  ],\n  to: HSVtoHex,\n  from: HexToHSV,\n}\n\nconst hex = {\n  ...hexa,\n  inputs: [\n    {\n      label: 'HEX',\n      getValue: (c: string) => c.slice(0, 7),\n      getColor: (c: string, v: string) => v,\n    },\n  ],\n}\n\nexport const modes = {\n  rgb,\n  rgba,\n  hsl,\n  hsla,\n  hex,\n  hexa,\n} satisfies Record<string, ColorPickerMode>\n"]},"metadata":{},"sourceType":"module"}