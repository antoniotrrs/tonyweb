{"ast":null,"code":"import _objectSpread from \"/Users/antoniotorres/Documents/tony/tonyweb/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"/Users/antoniotorres/Documents/tony/tonyweb/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"label\"],\n    _excluded2 = [\"getValue\", \"getColor\"];\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.find-index.js\";\nimport { createVNode as _createVNode } from \"vue\"; // Styles\n\nimport \"./VColorPickerEdit.css\"; // Components\n\nimport { VBtn } from \"../VBtn/index.js\"; // Composables\n\nimport { makeComponentProps } from \"../../composables/component.js\"; // Utilities\n\nimport { computed } from 'vue';\nimport { modes, nullColor } from \"./util/index.js\";\nimport { defineComponent, propsFactory, useRender } from \"../../util/index.js\"; // Types\n\nvar VColorPickerInput = function VColorPickerInput(_ref) {\n  var label = _ref.label,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  return _createVNode(\"div\", {\n    \"class\": \"v-color-picker-edit__input\"\n  }, [_createVNode(\"input\", rest, null), _createVNode(\"span\", null, [label])]);\n};\n\nexport var makeVColorPickerEditProps = propsFactory(_objectSpread({\n  color: Object,\n  disabled: Boolean,\n  mode: {\n    type: String,\n    default: 'rgba',\n    validator: function validator(v) {\n      return Object.keys(modes).includes(v);\n    }\n  },\n  modes: {\n    type: Array,\n    default: function _default() {\n      return Object.keys(modes);\n    },\n    validator: function validator(v) {\n      return Array.isArray(v) && v.every(function (m) {\n        return Object.keys(modes).includes(m);\n      });\n    }\n  }\n}, makeComponentProps()), 'VColorPickerEdit');\nexport var VColorPickerEdit = defineComponent({\n  name: 'VColorPickerEdit',\n  props: makeVColorPickerEditProps(),\n  emits: {\n    'update:color': function updateColor(color) {\n      return true;\n    },\n    'update:mode': function updateMode(mode) {\n      return true;\n    }\n  },\n  setup: function setup(props, _ref2) {\n    var emit = _ref2.emit;\n    var enabledModes = computed(function () {\n      return props.modes.map(function (key) {\n        return _objectSpread(_objectSpread({}, modes[key]), {}, {\n          name: key\n        });\n      });\n    });\n    var inputs = computed(function () {\n      var _mode$inputs;\n\n      var mode = enabledModes.value.find(function (m) {\n        return m.name === props.mode;\n      });\n      if (!mode) return [];\n      var color = props.color ? mode.to(props.color) : null;\n      return (_mode$inputs = mode.inputs) === null || _mode$inputs === void 0 ? void 0 : _mode$inputs.map(function (_ref3) {\n        var getValue = _ref3.getValue,\n            getColor = _ref3.getColor,\n            inputProps = _objectWithoutProperties(_ref3, _excluded2);\n\n        return _objectSpread(_objectSpread(_objectSpread({}, mode.inputProps), inputProps), {}, {\n          disabled: props.disabled,\n          value: color && getValue(color),\n          onChange: function onChange(e) {\n            var target = e.target;\n            if (!target) return;\n            emit('update:color', mode.from(getColor(color !== null && color !== void 0 ? color : mode.to(nullColor), target.value)));\n          }\n        });\n      });\n    });\n    useRender(function () {\n      var _inputs$value;\n\n      return _createVNode(\"div\", {\n        \"class\": ['v-color-picker-edit', props.class],\n        \"style\": props.style\n      }, [(_inputs$value = inputs.value) === null || _inputs$value === void 0 ? void 0 : _inputs$value.map(function (props) {\n        return _createVNode(VColorPickerInput, props, null);\n      }), enabledModes.value.length > 1 && _createVNode(VBtn, {\n        \"icon\": \"$unfold\",\n        \"size\": \"x-small\",\n        \"variant\": \"plain\",\n        \"onClick\": function onClick() {\n          var mi = enabledModes.value.findIndex(function (m) {\n            return m.name === props.mode;\n          });\n          emit('update:mode', enabledModes.value[(mi + 1) % enabledModes.value.length].name);\n        }\n      }, null)]);\n    });\n    return {};\n  }\n});","map":{"version":3,"mappings":"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","names":["VBtn","makeComponentProps","computed","modes","nullColor","defineComponent","propsFactory","useRender","VColorPickerInput","_ref","label","rest","_createVNode","makeVColorPickerEditProps","color","Object","disabled","Boolean","mode","type","String","default","validator","v","keys","includes","Array","isArray","every","m","VColorPickerEdit","name","props","emits","setup","_ref2","emit","enabledModes","map","key","inputs","value","find","to","_ref3","getValue","getColor","inputProps","onChange","e","target","from","class","style","length","onClick","mi","findIndex"],"sources":["../../../src/components/VColorPicker/VColorPickerEdit.tsx"],"sourcesContent":["// Styles\nimport './VColorPickerEdit.sass'\n\n// Components\nimport { VBtn } from '@/components/VBtn'\n\n// Composables\nimport { makeComponentProps } from '@/composables/component'\n\n// Utilities\nimport { computed } from 'vue'\nimport { modes, nullColor } from './util'\nimport { defineComponent, propsFactory, useRender } from '@/util'\n\n// Types\nimport type { PropType } from 'vue'\nimport type { HSV } from '@/util/colorUtils'\n\nconst VColorPickerInput = ({ label, ...rest }: any) => {\n  return (\n    <div\n      class=\"v-color-picker-edit__input\"\n    >\n      <input { ...rest } />\n      <span>{ label }</span>\n    </div>\n  )\n}\n\nexport const makeVColorPickerEditProps = propsFactory({\n  color: Object as PropType<HSV | null>,\n  disabled: Boolean,\n  mode: {\n    type: String as PropType<keyof typeof modes>,\n    default: 'rgba',\n    validator: (v: string) => Object.keys(modes).includes(v),\n  },\n  modes: {\n    type: Array as PropType<readonly (keyof typeof modes)[]>,\n    default: () => Object.keys(modes),\n    validator: (v: any) => Array.isArray(v) && v.every(m => Object.keys(modes).includes(m)),\n  },\n\n  ...makeComponentProps(),\n}, 'VColorPickerEdit')\n\nexport const VColorPickerEdit = defineComponent({\n  name: 'VColorPickerEdit',\n\n  props: makeVColorPickerEditProps(),\n\n  emits: {\n    'update:color': (color: HSV) => true,\n    'update:mode': (mode: keyof typeof modes) => true,\n  },\n\n  setup (props, { emit }) {\n    const enabledModes = computed(() => {\n      return props.modes.map(key => ({ ...modes[key], name: key }))\n    })\n\n    const inputs = computed(() => {\n      const mode = enabledModes.value.find(m => m.name === props.mode)\n\n      if (!mode) return []\n\n      const color = props.color ? mode.to(props.color) : null\n\n      return mode.inputs?.map(({ getValue, getColor, ...inputProps }) => {\n        return {\n          ...mode.inputProps,\n          ...inputProps,\n          disabled: props.disabled,\n          value: color && getValue(color),\n          onChange: (e: InputEvent) => {\n            const target = e.target as HTMLInputElement | null\n\n            if (!target) return\n\n            emit('update:color', mode.from(getColor(color ?? mode.to(nullColor), target.value)))\n          },\n        }\n      })\n    })\n\n    useRender(() => (\n      <div\n        class={[\n          'v-color-picker-edit',\n          props.class,\n        ]}\n        style={ props.style }\n      >\n        { inputs.value?.map(props => (\n          <VColorPickerInput { ...props } />\n        ))}\n        { enabledModes.value.length > 1 && (\n          <VBtn\n            icon=\"$unfold\"\n            size=\"x-small\"\n            variant=\"plain\"\n            onClick={ () => {\n              const mi = enabledModes.value.findIndex(m => m.name === props.mode)\n\n              emit('update:mode', enabledModes.value[(mi + 1) % enabledModes.value.length].name)\n            }}\n          />\n        )}\n      </div>\n    ))\n\n    return {}\n  },\n})\n\nexport type VColorPickerEdit = InstanceType<typeof VColorPickerEdit>\n"]},"metadata":{},"sourceType":"module"}