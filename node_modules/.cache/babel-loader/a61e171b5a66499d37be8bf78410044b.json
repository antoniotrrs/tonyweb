{"ast":null,"code":"// Composables\nimport { useToggleScope } from \"./toggleScope.js\"; // Utilities\n\nimport { computed, inject, onScopeDispose, provide, reactive, readonly, shallowRef, toRaw, watchEffect } from 'vue';\nimport { getCurrentInstance } from \"../util/index.js\"; // Types\n\nconst StackSymbol = Symbol.for('vuetify:stack');\nconst globalStack = reactive([]);\nexport function useStack(isActive, zIndex, disableGlobalStack) {\n  const vm = getCurrentInstance('useStack');\n  const createStackEntry = !disableGlobalStack;\n  const parent = inject(StackSymbol, undefined);\n  const stack = reactive({\n    activeChildren: new Set()\n  });\n  provide(StackSymbol, stack);\n\n  const _zIndex = shallowRef(Number(zIndex.value));\n\n  useToggleScope(isActive, () => {\n    const lastZIndex = globalStack.at(-1)?.[1];\n    _zIndex.value = lastZIndex ? lastZIndex + 10 : Number(zIndex.value);\n\n    if (createStackEntry) {\n      globalStack.push([vm.uid, _zIndex.value]);\n    }\n\n    parent?.activeChildren.add(vm.uid);\n    onScopeDispose(() => {\n      if (createStackEntry) {\n        const idx = toRaw(globalStack).findIndex(v => v[0] === vm.uid);\n        globalStack.splice(idx, 1);\n      }\n\n      parent?.activeChildren.delete(vm.uid);\n    });\n  });\n  const globalTop = shallowRef(true);\n\n  if (createStackEntry) {\n    watchEffect(() => {\n      const _isTop = globalStack.at(-1)?.[0] === vm.uid;\n\n      setTimeout(() => globalTop.value = _isTop);\n    });\n  }\n\n  const localTop = computed(() => !stack.activeChildren.size);\n  return {\n    globalTop: readonly(globalTop),\n    localTop,\n    stackStyles: computed(() => ({\n      zIndex: _zIndex.value\n    }))\n  };\n}","map":{"version":3,"mappings":"AAAA;AAAA,SACSA,cADT,QACuB,kBADvB,C,CAGA;;AACA,SAASC,QAAT,EAAmBC,MAAnB,EAA2BC,cAA3B,EAA2CC,OAA3C,EAAoDC,QAApD,EAA8DC,QAA9D,EAAwEC,UAAxE,EAAoFC,KAApF,EAA2FC,WAA3F,QAA8G,KAA9G;AAAmH,SAC1GC,kBAD0G,QACxF,kBADwF,C,CAGnH;;AAGA,MAAMC,WAAuC,GAAGC,MAAM,CAACC,GAAPD,CAAW,eAAXA,CAAhD;AAMA,MAAME,WAAW,GAAGT,QAAQ,CAAkC,EAAlC,CAA5B;AAEA,OAAO,SAASU,QAAT,CACLC,QADK,EAELC,MAFK,EAGLC,kBAHK,EAIL;AACA,QAAMC,EAAE,GAAGT,kBAAkB,CAAC,UAAD,CAA7B;AACA,QAAMU,gBAAgB,GAAG,CAACF,kBAA1B;AAEA,QAAMG,MAAM,GAAGnB,MAAM,CAACS,WAAD,EAAcW,SAAd,CAArB;AACA,QAAMC,KAAmB,GAAGlB,QAAQ,CAAC;AACnCmB,kBAAc,EAAE,IAAIC,GAAJ;AADmB,GAAD,CAApC;AAGArB,SAAO,CAACO,WAAD,EAAcY,KAAd,CAAPnB;;AAEA,QAAMsB,OAAO,GAAGnB,UAAU,CAACoB,MAAM,CAACV,MAAM,CAACW,KAAR,CAAP,CAA1B;;AACA5B,gBAAc,CAACgB,QAAD,EAAW,MAAM;AAC7B,UAAMa,UAAU,GAAGf,WAAW,CAACgB,EAAZhB,CAAe,CAAC,CAAhBA,IAAqB,CAArBA,CAAnB;AACAY,WAAO,CAACE,KAARF,GAAgBG,UAAU,GAAGA,UAAU,GAAG,EAAhB,GAAqBF,MAAM,CAACV,MAAM,CAACW,KAAR,CAArDF;;AAEA,QAAIN,gBAAJ,EAAsB;AACpBN,iBAAW,CAACiB,IAAZjB,CAAiB,CAACK,EAAE,CAACa,GAAJ,EAASN,OAAO,CAACE,KAAjB,CAAjBd;AACF;;AAEAO,UAAM,EAAEG,cAARH,CAAuBY,GAAvBZ,CAA2BF,EAAE,CAACa,GAA9BX;AAEAlB,kBAAc,CAAC,MAAM;AACnB,UAAIiB,gBAAJ,EAAsB;AACpB,cAAMc,GAAG,GAAG1B,KAAK,CAACM,WAAD,CAALN,CAAmB2B,SAAnB3B,CAA6B4B,CAAC,IAAIA,CAAC,CAAC,CAAD,CAADA,KAASjB,EAAE,CAACa,GAA9CxB,CAAZ;AACAM,mBAAW,CAACuB,MAAZvB,CAAmBoB,GAAnBpB,EAAwB,CAAxBA;AACF;;AAEAO,YAAM,EAAEG,cAARH,CAAuBiB,MAAvBjB,CAA8BF,EAAE,CAACa,GAAjCX;AACD,KAPa,CAAdlB;AAQD,GAlBa,CAAdH;AAoBA,QAAMuC,SAAS,GAAGhC,UAAU,CAAC,IAAD,CAA5B;;AACA,MAAIa,gBAAJ,EAAsB;AACpBX,eAAW,CAAC,MAAM;AAChB,YAAM+B,MAAM,GAAG1B,WAAW,CAACgB,EAAZhB,CAAe,CAAC,CAAhBA,IAAqB,CAArBA,MAA4BK,EAAE,CAACa,GAA9C;;AACAS,gBAAU,CAAC,MAAMF,SAAS,CAACX,KAAVW,GAAkBC,MAAzB,CAAVC;AACD,KAHU,CAAXhC;AAIF;;AAEA,QAAMiC,QAAQ,GAAGzC,QAAQ,CAAC,MAAM,CAACsB,KAAK,CAACC,cAAND,CAAqBoB,IAA7B,CAAzB;AAEA,SAAO;AACLJ,aAAS,EAAEjC,QAAQ,CAACiC,SAAD,CADd;AAELG,YAFK;AAGLE,eAAW,EAAE3C,QAAQ,CAAC,OAAO;AAAEgB,YAAM,EAAES,OAAO,CAACE;AAAlB,KAAP,CAAD;AAHhB,GAAP;AAKF","names":["useToggleScope","computed","inject","onScopeDispose","provide","reactive","readonly","shallowRef","toRaw","watchEffect","getCurrentInstance","StackSymbol","Symbol","for","globalStack","useStack","isActive","zIndex","disableGlobalStack","vm","createStackEntry","parent","undefined","stack","activeChildren","Set","_zIndex","Number","value","lastZIndex","at","push","uid","add","idx","findIndex","v","splice","delete","globalTop","_isTop","setTimeout","localTop","size","stackStyles"],"sources":["../../src/composables/stack.ts"],"sourcesContent":["// Composables\nimport { useToggleScope } from '@/composables/toggleScope'\n\n// Utilities\nimport { computed, inject, onScopeDispose, provide, reactive, readonly, shallowRef, toRaw, watchEffect } from 'vue'\nimport { getCurrentInstance } from '@/util'\n\n// Types\nimport type { InjectionKey, Ref } from 'vue'\n\nconst StackSymbol: InjectionKey<StackProvide> = Symbol.for('vuetify:stack')\n\ninterface StackProvide {\n  activeChildren: Set<number>\n}\n\nconst globalStack = reactive<[uid: number, zIndex: number][]>([])\n\nexport function useStack (\n  isActive: Readonly<Ref<boolean>>,\n  zIndex: Readonly<Ref<string | number>>,\n  disableGlobalStack: boolean\n) {\n  const vm = getCurrentInstance('useStack')\n  const createStackEntry = !disableGlobalStack\n\n  const parent = inject(StackSymbol, undefined)\n  const stack: StackProvide = reactive({\n    activeChildren: new Set<number>(),\n  })\n  provide(StackSymbol, stack)\n\n  const _zIndex = shallowRef(Number(zIndex.value))\n  useToggleScope(isActive, () => {\n    const lastZIndex = globalStack.at(-1)?.[1]\n    _zIndex.value = lastZIndex ? lastZIndex + 10 : Number(zIndex.value)\n\n    if (createStackEntry) {\n      globalStack.push([vm.uid, _zIndex.value])\n    }\n\n    parent?.activeChildren.add(vm.uid)\n\n    onScopeDispose(() => {\n      if (createStackEntry) {\n        const idx = toRaw(globalStack).findIndex(v => v[0] === vm.uid)\n        globalStack.splice(idx, 1)\n      }\n\n      parent?.activeChildren.delete(vm.uid)\n    })\n  })\n\n  const globalTop = shallowRef(true)\n  if (createStackEntry) {\n    watchEffect(() => {\n      const _isTop = globalStack.at(-1)?.[0] === vm.uid\n      setTimeout(() => globalTop.value = _isTop)\n    })\n  }\n\n  const localTop = computed(() => !stack.activeChildren.size)\n\n  return {\n    globalTop: readonly(globalTop),\n    localTop,\n    stackStyles: computed(() => ({ zIndex: _zIndex.value })),\n  }\n}\n"]},"metadata":{},"sourceType":"module"}