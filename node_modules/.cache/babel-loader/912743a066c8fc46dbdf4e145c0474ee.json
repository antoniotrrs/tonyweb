{"ast":null,"code":"import _defineProperty from \"/Users/antoniotorres/Documents/tony/tonyweb/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport { Fragment as _Fragment, createVNode as _createVNode } from \"vue\"; // Composables\n\nimport { useColor } from \"./color.js\"; // Utilities\n\nimport { computed, unref } from 'vue';\nimport { getCurrentInstanceName, propsFactory } from \"../util/index.js\"; // Types\n\nexport var allowedVariants = ['elevated', 'flat', 'tonal', 'outlined', 'text', 'plain'];\nexport function genOverlays(isClickable, name) {\n  return _createVNode(_Fragment, null, [isClickable && _createVNode(\"span\", {\n    \"key\": \"overlay\",\n    \"class\": \"\".concat(name, \"__overlay\")\n  }, null), _createVNode(\"span\", {\n    \"key\": \"underlay\",\n    \"class\": \"\".concat(name, \"__underlay\")\n  }, null)]);\n}\nexport var makeVariantProps = propsFactory({\n  color: String,\n  variant: {\n    type: String,\n    default: 'elevated',\n    validator: function validator(v) {\n      return allowedVariants.includes(v);\n    }\n  }\n}, 'variant');\nexport function useVariant(props) {\n  var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : getCurrentInstanceName();\n  var variantClasses = computed(function () {\n    var _unref = unref(props),\n        variant = _unref.variant;\n\n    return \"\".concat(name, \"--variant-\").concat(variant);\n  });\n\n  var _useColor = useColor(computed(function () {\n    var _unref2 = unref(props),\n        variant = _unref2.variant,\n        color = _unref2.color;\n\n    return _defineProperty({}, ['elevated', 'flat'].includes(variant) ? 'background' : 'text', color);\n  })),\n      colorClasses = _useColor.colorClasses,\n      colorStyles = _useColor.colorStyles;\n\n  return {\n    colorClasses: colorClasses,\n    colorStyles: colorStyles,\n    variantClasses: variantClasses\n  };\n}","map":{"version":3,"mappings":";;;0EAAA;;AAAA,SACSA,QADT,QACiB,YADjB,C,CAGA;;AACA,SAASC,QAAT,EAAmBC,KAAnB,QAAgC,KAAhC;AAAqC,SAC5BC,sBAD4B,EACJC,YADI,QACQ,kBADR,C,CAGrC;;AAIA,OAAO,IAAMC,eAAe,GAAG,CAC7B,UAD6B,EAE7B,MAF6B,EAG7B,OAH6B,EAI7B,UAJ6B,EAK7B,MAL6B,EAM7B,OAN6B,CAAxB;AAgBP,OAAO,SAASC,WAAT,CAAsBC,WAAtB,EAA4CC,IAA5C,EAA0D;AAC/D,wCAEMD,WAAW;AAAA;AAAA,uBAAmCC,IAAnC;AAAA,KAAkD,IAAlD,CAFjB,EAEwEC;AAAA;AAAA,uBAEpCD,IAFoC;AAAA,KAEpB,IAFoB,CAFxE;AAOF;AAEA,OAAO,IAAME,gBAAgB,GAAGN,YAAY,CAAC;AAC3CO,OAAK,EAAEC,MADoC;AAE3CC,SAAO,EAAE;AACPC,QAAI,EAAEF,MADC;AAEPG,WAAO,EAAE,UAFF;AAGPC,aAAS,EAAGC,oBAAM;AAAA,aAAKZ,eAAe,CAACa,QAAhBb,CAAyBY,CAAzBZ,CAAL;AAAA;AAHX;AAFkC,CAAD,EAOzC,SAPyC,CAArC;AASP,OAAO,SAASc,UAAT,CACLC,KADK,EAGL;AAAA,MADAZ,IAAI,uEAAGL,sBAAsB,EAC7B;AACA,MAAMkB,cAAc,GAAGpB,QAAQ,CAAC,YAAM;AACpC,iBAAoBC,KAAK,CAACkB,KAAD,CAAzB;AAAA,QAAQP,OAAR,UAAQA,OAAR;;AACA,qBAAUL,IAAV,uBAA2BK,OAA3B;AACD,GAH8B,CAA/B;;AAKA,kBAAsCb,QAAQ,CAACC,QAAQ,CAAC,YAAM;AAC5D,kBAA2BC,KAAK,CAACkB,KAAD,CAAhC;AAAA,QAAQP,OAAR,WAAQA,OAAR;AAAA,QAAiBF,KAAjB,WAAiBA,KAAjB;;AACA,+BACG,CAAC,UAAD,EAAa,MAAb,EAAqBO,QAArB,CAA8BL,OAA9B,IAAyC,YAAzC,GAAwD,MAD3D,EACoEF,KADpE;AAGD,GALsD,CAAT,CAA9C;AAAA,MAAQW,YAAR,aAAQA,YAAR;AAAA,MAAsBC,WAAtB,aAAsBA,WAAtB;;AAOA,SAAO;AAAED,gBAAY,EAAZA,YAAF;AAAgBC,eAAW,EAAXA,WAAhB;AAA6BF;AAA7B,GAAP;AACF","names":["useColor","computed","unref","getCurrentInstanceName","propsFactory","allowedVariants","genOverlays","isClickable","name","_createVNode","makeVariantProps","color","String","variant","type","default","validator","v","includes","useVariant","props","variantClasses","colorClasses","colorStyles"],"sources":["../../src/composables/variant.tsx"],"sourcesContent":["// Composables\nimport { useColor } from '@/composables/color'\n\n// Utilities\nimport { computed, unref } from 'vue'\nimport { getCurrentInstanceName, propsFactory } from '@/util'\n\n// Types\nimport type { PropType } from 'vue'\nimport type { MaybeRef } from '@/util'\n\nexport const allowedVariants = [\n  'elevated',\n  'flat',\n  'tonal',\n  'outlined',\n  'text',\n  'plain',\n] as const\n\nexport type Variant = typeof allowedVariants[number]\n\nexport interface VariantProps {\n  color?: string\n  variant: Variant\n}\n\nexport function genOverlays (isClickable: boolean, name: string) {\n  return (\n    <>\n      { isClickable && <span key=\"overlay\" class={ `${name}__overlay` } /> }\n\n      <span key=\"underlay\" class={ `${name}__underlay` } />\n    </>\n  )\n}\n\nexport const makeVariantProps = propsFactory({\n  color: String,\n  variant: {\n    type: String as PropType<Variant>,\n    default: 'elevated',\n    validator: (v: any) => allowedVariants.includes(v),\n  },\n}, 'variant')\n\nexport function useVariant (\n  props: MaybeRef<VariantProps>,\n  name = getCurrentInstanceName(),\n) {\n  const variantClasses = computed(() => {\n    const { variant } = unref(props)\n    return `${name}--variant-${variant}`\n  })\n\n  const { colorClasses, colorStyles } = useColor(computed(() => {\n    const { variant, color } = unref(props)\n    return {\n      [['elevated', 'flat'].includes(variant) ? 'background' : 'text']: color,\n    }\n  }))\n\n  return { colorClasses, colorStyles, variantClasses }\n}\n"]},"metadata":{},"sourceType":"module"}