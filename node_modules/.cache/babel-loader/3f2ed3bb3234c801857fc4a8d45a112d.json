{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.set.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nexport var singleOpenStrategy = {\n  open: function open(_ref) {\n    var id = _ref.id,\n        value = _ref.value,\n        opened = _ref.opened,\n        parents = _ref.parents;\n\n    if (value) {\n      var newOpened = new Set();\n      newOpened.add(id);\n      var parent = parents.get(id);\n\n      while (parent != null) {\n        newOpened.add(parent);\n        parent = parents.get(parent);\n      }\n\n      return newOpened;\n    } else {\n      opened.delete(id);\n      return opened;\n    }\n  },\n  select: function select() {\n    return null;\n  }\n};\nexport var multipleOpenStrategy = {\n  open: function open(_ref2) {\n    var id = _ref2.id,\n        value = _ref2.value,\n        opened = _ref2.opened,\n        parents = _ref2.parents;\n\n    if (value) {\n      var parent = parents.get(id);\n      opened.add(id);\n\n      while (parent != null && parent !== id) {\n        opened.add(parent);\n        parent = parents.get(parent);\n      }\n\n      return opened;\n    } else {\n      opened.delete(id);\n    }\n\n    return opened;\n  },\n  select: function select() {\n    return null;\n  }\n};\nexport var listOpenStrategy = {\n  open: multipleOpenStrategy.open,\n  select: function select(_ref3) {\n    var id = _ref3.id,\n        value = _ref3.value,\n        opened = _ref3.opened,\n        parents = _ref3.parents;\n    if (!value) return opened;\n    var path = [];\n    var parent = parents.get(id);\n\n    while (parent != null) {\n      path.push(parent);\n      parent = parents.get(parent);\n    }\n\n    return new Set(path);\n  }\n};","map":{"version":3,"mappings":";;;;AAwBA,OAAO,IAAMA,kBAAgC,GAAG;AAC9CC,MAAI,EAAEC,oBAAoC;AAAA,QAAjCC,EAAiC,GAALD,IAAK,CAAjCC,EAAiC;AAAA,QAA7BC,KAA6B,GAALF,IAAK,CAA7BE,KAA6B;AAAA,QAAtBC,MAAsB,GAALH,IAAK,CAAtBG,MAAsB;AAAA,QAAdC,OAAc,GAALJ,IAAK,CAAdI,OAAc;;AACxC,QAAIF,KAAJ,EAAW;AACT,UAAMG,SAAS,GAAG,IAAIC,GAAJ,EAAlB;AACAD,eAAS,CAACE,GAAVF,CAAcJ,EAAdI;AAEA,UAAIG,MAAM,GAAGJ,OAAO,CAACK,GAARL,CAAYH,EAAZG,CAAb;;AAEA,aAAOI,MAAM,IAAI,IAAjB,EAAuB;AACrBH,iBAAS,CAACE,GAAVF,CAAcG,MAAdH;AACAG,cAAM,GAAGJ,OAAO,CAACK,GAARL,CAAYI,MAAZJ,CAATI;AACF;;AAEA,aAAOH,SAAP;AACD,KAZD,MAYO;AACLF,YAAM,CAACO,MAAPP,CAAcF,EAAdE;AACA,aAAOA,MAAP;AACF;AACD,GAlB6C;AAmB9CQ,QAAM,EAAEA;AAAAA,WAAM,IAANA;AAAAA;AAnBsC,CAAzC;AAsBP,OAAO,IAAMC,oBAAkC,GAAG;AAChDb,MAAI,EAAEc,qBAAoC;AAAA,QAAjCZ,EAAiC,GAALY,KAAK,CAAjCZ,EAAiC;AAAA,QAA7BC,KAA6B,GAALW,KAAK,CAA7BX,KAA6B;AAAA,QAAtBC,MAAsB,GAALU,KAAK,CAAtBV,MAAsB;AAAA,QAAdC,OAAc,GAALS,KAAK,CAAdT,OAAc;;AACxC,QAAIF,KAAJ,EAAW;AACT,UAAIM,MAAM,GAAGJ,OAAO,CAACK,GAARL,CAAYH,EAAZG,CAAb;AACAD,YAAM,CAACI,GAAPJ,CAAWF,EAAXE;;AAEA,aAAOK,MAAM,IAAI,IAAVA,IAAkBA,MAAM,KAAKP,EAApC,EAAwC;AACtCE,cAAM,CAACI,GAAPJ,CAAWK,MAAXL;AACAK,cAAM,GAAGJ,OAAO,CAACK,GAARL,CAAYI,MAAZJ,CAATI;AACF;;AAEA,aAAOL,MAAP;AACD,KAVD,MAUO;AACLA,YAAM,CAACO,MAAPP,CAAcF,EAAdE;AACF;;AACA,WAAOA,MAAP;AACD,GAhB+C;AAiBhDQ,QAAM,EAAEA;AAAAA,WAAM,IAANA;AAAAA;AAjBwC,CAA3C;AAoBP,OAAO,IAAMG,gBAA8B,GAAG;AAC5Cf,MAAI,EAAEa,oBAAoB,CAACb,IADiB;AAE5CY,QAAM,EAAEI,uBAAoC;AAAA,QAAjCd,EAAiC,GAALc,KAAK,CAAjCd,EAAiC;AAAA,QAA7BC,KAA6B,GAALa,KAAK,CAA7Bb,KAA6B;AAAA,QAAtBC,MAAsB,GAALY,KAAK,CAAtBZ,MAAsB;AAAA,QAAdC,OAAc,GAALW,KAAK,CAAdX,OAAc;AAC1C,QAAI,CAACF,KAAL,EAAY,OAAOC,MAAP;AAEZ,QAAMa,IAAe,GAAG,EAAxB;AAEA,QAAIR,MAAM,GAAGJ,OAAO,CAACK,GAARL,CAAYH,EAAZG,CAAb;;AAEA,WAAOI,MAAM,IAAI,IAAjB,EAAuB;AACrBQ,UAAI,CAACC,IAALD,CAAUR,MAAVQ;AACAR,YAAM,GAAGJ,OAAO,CAACK,GAARL,CAAYI,MAAZJ,CAATI;AACF;;AAEA,WAAO,IAAIF,GAAJ,CAAQU,IAAR,CAAP;AACF;AAf4C,CAAvC","names":["singleOpenStrategy","open","_ref","id","value","opened","parents","newOpened","Set","add","parent","get","delete","select","multipleOpenStrategy","_ref2","listOpenStrategy","_ref3","path","push"],"sources":["../../../src/composables/nested/openStrategies.ts"],"sourcesContent":["type OpenStrategyFunction = (data: {\n  id: unknown\n  value: boolean\n  opened: Set<unknown>\n  children: Map<unknown, unknown[]>\n  parents: Map<unknown, unknown>\n  event?: Event\n}) => Set<unknown>\n\ntype OpenSelectStrategyFunction = (data: {\n  id: unknown\n  value: boolean\n  opened: Set<unknown>\n  selected: Map<unknown, 'on' | 'off' | 'indeterminate'>\n  children: Map<unknown, unknown[]>\n  parents: Map<unknown, unknown>\n  event?: Event\n}) => Set<unknown> | null\n\nexport type OpenStrategy = {\n  open: OpenStrategyFunction\n  select: OpenSelectStrategyFunction\n}\n\nexport const singleOpenStrategy: OpenStrategy = {\n  open: ({ id, value, opened, parents }) => {\n    if (value) {\n      const newOpened = new Set<unknown>()\n      newOpened.add(id)\n\n      let parent = parents.get(id)\n\n      while (parent != null) {\n        newOpened.add(parent)\n        parent = parents.get(parent)\n      }\n\n      return newOpened\n    } else {\n      opened.delete(id)\n      return opened\n    }\n  },\n  select: () => null,\n}\n\nexport const multipleOpenStrategy: OpenStrategy = {\n  open: ({ id, value, opened, parents }) => {\n    if (value) {\n      let parent = parents.get(id)\n      opened.add(id)\n\n      while (parent != null && parent !== id) {\n        opened.add(parent)\n        parent = parents.get(parent)\n      }\n\n      return opened\n    } else {\n      opened.delete(id)\n    }\n    return opened\n  },\n  select: () => null,\n}\n\nexport const listOpenStrategy: OpenStrategy = {\n  open: multipleOpenStrategy.open,\n  select: ({ id, value, opened, parents }) => {\n    if (!value) return opened\n\n    const path: unknown[] = []\n\n    let parent = parents.get(id)\n\n    while (parent != null) {\n      path.push(parent)\n      parent = parents.get(parent)\n    }\n\n    return new Set(path)\n  },\n}\n"]},"metadata":{},"sourceType":"module"}