{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.function.name.js\";\n// Utilities\nimport { getCurrentInstance as _getCurrentInstance } from 'vue';\nimport { toKebabCase } from \"./helpers.js\";\nexport function getCurrentInstance(name, message) {\n  var vm = _getCurrentInstance();\n\n  if (!vm) {\n    throw new Error(\"[Vuetify] \".concat(name, \" \").concat(message || 'must be called from inside a setup function'));\n  }\n\n  return vm;\n}\nexport function getCurrentInstanceName() {\n  var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'composables';\n  var vm = getCurrentInstance(name).type;\n  return toKebabCase((vm === null || vm === void 0 ? void 0 : vm.aliasName) || (vm === null || vm === void 0 ? void 0 : vm.name));\n}","map":{"version":3,"mappings":";;;AAAA;AACA,SAASA,kBAAkB,IAAIC,mBAA/B,QAA0D,KAA1D;AAA+D,SACtDC,WADsD,QAC3C,cAD2C;AAG/D,OAAO,SAASF,kBAAT,CAA6BG,IAA7B,EAA2CC,OAA3C,EAA6D;AAClE,MAAMC,EAAE,GAAGJ,mBAAmB,EAA9B;;AAEA,MAAI,CAACI,EAAL,EAAS;AACP,UAAM,IAAIC,KAAJ,qBAAuBH,IAAvB,cAA+BC,OAAO,IAAI,6CAA1C,EAAN;AACF;;AAEA,SAAOC,EAAP;AACF;AAEA,OAAO,SAASE,sBAAT,GAAuD;AAAA,MAAtBJ,IAAI,uEAAG,aAAe;AAC5D,MAAME,EAAE,GAAGL,kBAAkB,CAACG,IAAD,CAAlBH,CAAyBQ,IAApC;AAEA,SAAON,WAAW,CAACG,GAAE,SAAFA,MAAE,WAAFA,cAAE,CAAEI,SAAJJ,MAAiBA,EAAjBA,aAAiBA,EAAjBA,uBAAiBA,EAAE,CAAEF,IAArBE,CAAD,CAAlB;AACF","names":["getCurrentInstance","_getCurrentInstance","toKebabCase","name","message","vm","Error","getCurrentInstanceName","type","aliasName"],"sources":["../../src/util/getCurrentInstance.ts"],"sourcesContent":["// Utilities\nimport { getCurrentInstance as _getCurrentInstance } from 'vue'\nimport { toKebabCase } from '@/util/helpers'\n\nexport function getCurrentInstance (name: string, message?: string) {\n  const vm = _getCurrentInstance()\n\n  if (!vm) {\n    throw new Error(`[Vuetify] ${name} ${message || 'must be called from inside a setup function'}`)\n  }\n\n  return vm\n}\n\nexport function getCurrentInstanceName (name = 'composables') {\n  const vm = getCurrentInstance(name).type\n\n  return toKebabCase(vm?.aliasName || vm?.name)\n}\n"]},"metadata":{},"sourceType":"module"}