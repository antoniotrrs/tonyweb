{"ast":null,"code":"import { createVNode as _createVNode } from \"vue\"; // Styles\n\nimport \"./VBanner.css\"; // Components\n\nimport { VBannerActions } from \"./VBannerActions.js\";\nimport { VBannerText } from \"./VBannerText.js\";\nimport { VAvatar } from \"../VAvatar/index.js\";\nimport { VDefaultsProvider } from \"../VDefaultsProvider/index.js\"; // Composables\n\nimport { makeBorderProps, useBorder } from \"../../composables/border.js\";\nimport { useBackgroundColor } from \"../../composables/color.js\";\nimport { makeComponentProps } from \"../../composables/component.js\";\nimport { provideDefaults } from \"../../composables/defaults.js\";\nimport { makeDensityProps, useDensity } from \"../../composables/density.js\";\nimport { makeDimensionProps, useDimension } from \"../../composables/dimensions.js\";\nimport { makeDisplayProps, useDisplay } from \"../../composables/display.js\";\nimport { makeElevationProps, useElevation } from \"../../composables/elevation.js\";\nimport { IconValue } from \"../../composables/icons.js\";\nimport { makeLocationProps, useLocation } from \"../../composables/location.js\";\nimport { makePositionProps, usePosition } from \"../../composables/position.js\";\nimport { makeRoundedProps, useRounded } from \"../../composables/rounded.js\";\nimport { makeTagProps } from \"../../composables/tag.js\";\nimport { makeThemeProps, provideTheme } from \"../../composables/theme.js\"; // Utilities\n\nimport { toRef } from 'vue';\nimport { genericComponent, propsFactory, useRender } from \"../../util/index.js\"; // Types\n\nexport const makeVBannerProps = propsFactory({\n  avatar: String,\n  bgColor: String,\n  color: String,\n  icon: IconValue,\n  lines: String,\n  stacked: Boolean,\n  sticky: Boolean,\n  text: String,\n  ...makeBorderProps(),\n  ...makeComponentProps(),\n  ...makeDensityProps(),\n  ...makeDimensionProps(),\n  ...makeDisplayProps({\n    mobile: null\n  }),\n  ...makeElevationProps(),\n  ...makeLocationProps(),\n  ...makePositionProps(),\n  ...makeRoundedProps(),\n  ...makeTagProps(),\n  ...makeThemeProps()\n}, 'VBanner');\nexport const VBanner = genericComponent()({\n  name: 'VBanner',\n  props: makeVBannerProps(),\n\n  setup(props, _ref) {\n    let {\n      slots\n    } = _ref;\n    const {\n      backgroundColorClasses,\n      backgroundColorStyles\n    } = useBackgroundColor(props, 'bgColor');\n    const {\n      borderClasses\n    } = useBorder(props);\n    const {\n      densityClasses\n    } = useDensity(props);\n    const {\n      displayClasses,\n      mobile\n    } = useDisplay(props);\n    const {\n      dimensionStyles\n    } = useDimension(props);\n    const {\n      elevationClasses\n    } = useElevation(props);\n    const {\n      locationStyles\n    } = useLocation(props);\n    const {\n      positionClasses\n    } = usePosition(props);\n    const {\n      roundedClasses\n    } = useRounded(props);\n    const {\n      themeClasses\n    } = provideTheme(props);\n    const color = toRef(props, 'color');\n    const density = toRef(props, 'density');\n    provideDefaults({\n      VBannerActions: {\n        color,\n        density\n      }\n    });\n    useRender(() => {\n      const hasText = !!(props.text || slots.text);\n      const hasPrependMedia = !!(props.avatar || props.icon);\n      const hasPrepend = !!(hasPrependMedia || slots.prepend);\n      return _createVNode(props.tag, {\n        \"class\": ['v-banner', {\n          'v-banner--stacked': props.stacked || mobile.value,\n          'v-banner--sticky': props.sticky,\n          [`v-banner--${props.lines}-line`]: !!props.lines\n        }, themeClasses.value, backgroundColorClasses.value, borderClasses.value, densityClasses.value, displayClasses.value, elevationClasses.value, positionClasses.value, roundedClasses.value, props.class],\n        \"style\": [backgroundColorStyles.value, dimensionStyles.value, locationStyles.value, props.style],\n        \"role\": \"banner\"\n      }, {\n        default: () => [hasPrepend && _createVNode(\"div\", {\n          \"key\": \"prepend\",\n          \"class\": \"v-banner__prepend\"\n        }, [!slots.prepend ? _createVNode(VAvatar, {\n          \"key\": \"prepend-avatar\",\n          \"color\": color.value,\n          \"density\": density.value,\n          \"icon\": props.icon,\n          \"image\": props.avatar\n        }, null) : _createVNode(VDefaultsProvider, {\n          \"key\": \"prepend-defaults\",\n          \"disabled\": !hasPrependMedia,\n          \"defaults\": {\n            VAvatar: {\n              color: color.value,\n              density: density.value,\n              icon: props.icon,\n              image: props.avatar\n            }\n          }\n        }, slots.prepend)]), _createVNode(\"div\", {\n          \"class\": \"v-banner__content\"\n        }, [hasText && _createVNode(VBannerText, {\n          \"key\": \"text\"\n        }, {\n          default: () => [slots.text?.() ?? props.text]\n        }), slots.default?.()]), slots.actions && _createVNode(VBannerActions, {\n          \"key\": \"actions\"\n        }, slots.actions)]\n      });\n    });\n  }\n\n});","map":{"version":3,"mappings":"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","names":["VBannerActions","VBannerText","VAvatar","VDefaultsProvider","makeBorderProps","useBorder","useBackgroundColor","makeComponentProps","provideDefaults","makeDensityProps","useDensity","makeDimensionProps","useDimension","makeDisplayProps","useDisplay","makeElevationProps","useElevation","IconValue","makeLocationProps","useLocation","makePositionProps","usePosition","makeRoundedProps","useRounded","makeTagProps","makeThemeProps","provideTheme","toRef","genericComponent","propsFactory","useRender","makeVBannerProps","avatar","String","bgColor","color","icon","lines","stacked","Boolean","sticky","text","mobile","VBanner","name","props","setup","_ref","slots","backgroundColorClasses","backgroundColorStyles","borderClasses","densityClasses","displayClasses","dimensionStyles","elevationClasses","locationStyles","positionClasses","roundedClasses","themeClasses","density","hasText","hasPrependMedia","hasPrepend","prepend","value","class","style","default","_createVNode","image","actions"],"sources":["../../../src/components/VBanner/VBanner.tsx"],"sourcesContent":["// Styles\nimport './VBanner.sass'\n\n// Components\nimport { VBannerActions } from './VBannerActions'\nimport { VBannerText } from './VBannerText'\nimport { VAvatar } from '@/components/VAvatar'\nimport { VDefaultsProvider } from '@/components/VDefaultsProvider'\n\n// Composables\nimport { makeBorderProps, useBorder } from '@/composables/border'\nimport { useBackgroundColor } from '@/composables/color'\nimport { makeComponentProps } from '@/composables/component'\nimport { provideDefaults } from '@/composables/defaults'\nimport { makeDensityProps, useDensity } from '@/composables/density'\nimport { makeDimensionProps, useDimension } from '@/composables/dimensions'\nimport { makeDisplayProps, useDisplay } from '@/composables/display'\nimport { makeElevationProps, useElevation } from '@/composables/elevation'\nimport { IconValue } from '@/composables/icons'\nimport { makeLocationProps, useLocation } from '@/composables/location'\nimport { makePositionProps, usePosition } from '@/composables/position'\nimport { makeRoundedProps, useRounded } from '@/composables/rounded'\nimport { makeTagProps } from '@/composables/tag'\nimport { makeThemeProps, provideTheme } from '@/composables/theme'\n\n// Utilities\nimport { toRef } from 'vue'\nimport { genericComponent, propsFactory, useRender } from '@/util'\n\n// Types\nimport type { PropType } from 'vue'\n\nexport type VBannerSlots = {\n  default: never\n  prepend: never\n  text: never\n  actions: never\n}\n\nexport const makeVBannerProps = propsFactory({\n  avatar: String,\n  bgColor: String,\n  color: String,\n  icon: IconValue,\n  lines: String as PropType<'one' | 'two' | 'three'>,\n  stacked: Boolean,\n  sticky: Boolean,\n  text: String,\n\n  ...makeBorderProps(),\n  ...makeComponentProps(),\n  ...makeDensityProps(),\n  ...makeDimensionProps(),\n  ...makeDisplayProps({ mobile: null }),\n  ...makeElevationProps(),\n  ...makeLocationProps(),\n  ...makePositionProps(),\n  ...makeRoundedProps(),\n  ...makeTagProps(),\n  ...makeThemeProps(),\n}, 'VBanner')\n\nexport const VBanner = genericComponent<VBannerSlots>()({\n  name: 'VBanner',\n\n  props: makeVBannerProps(),\n\n  setup (props, { slots }) {\n    const { backgroundColorClasses, backgroundColorStyles } = useBackgroundColor(props, 'bgColor')\n    const { borderClasses } = useBorder(props)\n    const { densityClasses } = useDensity(props)\n    const { displayClasses, mobile } = useDisplay(props)\n    const { dimensionStyles } = useDimension(props)\n    const { elevationClasses } = useElevation(props)\n    const { locationStyles } = useLocation(props)\n    const { positionClasses } = usePosition(props)\n    const { roundedClasses } = useRounded(props)\n\n    const { themeClasses } = provideTheme(props)\n\n    const color = toRef(props, 'color')\n    const density = toRef(props, 'density')\n\n    provideDefaults({ VBannerActions: { color, density } })\n\n    useRender(() => {\n      const hasText = !!(props.text || slots.text)\n      const hasPrependMedia = !!(props.avatar || props.icon)\n      const hasPrepend = !!(hasPrependMedia || slots.prepend)\n\n      return (\n        <props.tag\n          class={[\n            'v-banner',\n            {\n              'v-banner--stacked': props.stacked || mobile.value,\n              'v-banner--sticky': props.sticky,\n              [`v-banner--${props.lines}-line`]: !!props.lines,\n            },\n            themeClasses.value,\n            backgroundColorClasses.value,\n            borderClasses.value,\n            densityClasses.value,\n            displayClasses.value,\n            elevationClasses.value,\n            positionClasses.value,\n            roundedClasses.value,\n            props.class,\n          ]}\n          style={[\n            backgroundColorStyles.value,\n            dimensionStyles.value,\n            locationStyles.value,\n            props.style,\n          ]}\n          role=\"banner\"\n        >\n          { hasPrepend && (\n            <div key=\"prepend\" class=\"v-banner__prepend\">\n              { !slots.prepend ? (\n                <VAvatar\n                  key=\"prepend-avatar\"\n                  color={ color.value }\n                  density={ density.value }\n                  icon={ props.icon }\n                  image={ props.avatar }\n                />\n              ) : (\n                <VDefaultsProvider\n                  key=\"prepend-defaults\"\n                  disabled={ !hasPrependMedia }\n                  defaults={{\n                    VAvatar: {\n                      color: color.value,\n                      density: density.value,\n                      icon: props.icon,\n                      image: props.avatar,\n                    },\n                  }}\n                  v-slots:default={ slots.prepend }\n                />\n              )}\n            </div>\n          )}\n\n          <div class=\"v-banner__content\">\n            { hasText && (\n              <VBannerText key=\"text\">\n                { slots.text?.() ?? props.text }\n              </VBannerText>\n            )}\n\n            { slots.default?.() }\n          </div>\n\n          { slots.actions && (\n            <VBannerActions key=\"actions\" v-slots:default={ slots.actions } />\n          )}\n        </props.tag>\n      )\n    })\n  },\n})\n\nexport type VBanner = InstanceType<typeof VBanner>\n"]},"metadata":{},"sourceType":"module"}