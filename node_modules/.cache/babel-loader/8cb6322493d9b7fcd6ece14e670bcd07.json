{"ast":null,"code":"import _slicedToArray from \"/Users/antoniotorres/Documents/tony/tonyweb/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _toConsumableArray from \"/Users/antoniotorres/Documents/tony/tonyweb/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _objectSpread from \"/Users/antoniotorres/Documents/tony/tonyweb/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport { mergeProps as _mergeProps, createVNode as _createVNode, Fragment as _Fragment, resolveDirective as _resolveDirective, withDirectives as _withDirectives } from \"vue\"; // Styles\n\nimport \"./VSelectionControl.css\"; // Components\n\nimport { VIcon } from \"../VIcon/index.js\";\nimport { VLabel } from \"../VLabel/index.js\";\nimport { makeSelectionControlGroupProps, VSelectionControlGroupSymbol } from \"../VSelectionControlGroup/VSelectionControlGroup.js\"; // Composables\n\nimport { useBackgroundColor, useTextColor } from \"../../composables/color.js\";\nimport { makeComponentProps } from \"../../composables/component.js\";\nimport { useDensity } from \"../../composables/density.js\";\nimport { useProxiedModel } from \"../../composables/proxiedModel.js\"; // Directives\n\nimport { Ripple } from \"../../directives/ripple/index.js\"; // Utilities\n\nimport { computed, inject, nextTick, ref, shallowRef, useId } from 'vue';\nimport { filterInputAttrs, genericComponent, matchesSelector, propsFactory, useRender, wrapInArray } from \"../../util/index.js\"; // Types\n\nexport var makeVSelectionControlProps = propsFactory(_objectSpread(_objectSpread({\n  label: String,\n  baseColor: String,\n  trueValue: null,\n  falseValue: null,\n  value: null\n}, makeComponentProps()), makeSelectionControlGroupProps()), 'VSelectionControl');\nexport function useSelectionControl(props) {\n  var group = inject(VSelectionControlGroupSymbol, undefined);\n\n  var _useDensity = useDensity(props),\n      densityClasses = _useDensity.densityClasses;\n\n  var modelValue = useProxiedModel(props, 'modelValue');\n  var trueValue = computed(function () {\n    return props.trueValue !== undefined ? props.trueValue : props.value !== undefined ? props.value : true;\n  });\n  var falseValue = computed(function () {\n    return props.falseValue !== undefined ? props.falseValue : false;\n  });\n  var isMultiple = computed(function () {\n    return !!props.multiple || props.multiple == null && Array.isArray(modelValue.value);\n  });\n  var model = computed({\n    get: function get() {\n      var val = group ? group.modelValue.value : modelValue.value;\n      return isMultiple.value ? wrapInArray(val).some(function (v) {\n        return props.valueComparator(v, trueValue.value);\n      }) : props.valueComparator(val, trueValue.value);\n    },\n    set: function set(val) {\n      if (props.readonly) return;\n      var currentValue = val ? trueValue.value : falseValue.value;\n      var newVal = currentValue;\n\n      if (isMultiple.value) {\n        newVal = val ? [].concat(_toConsumableArray(wrapInArray(modelValue.value)), [currentValue]) : wrapInArray(modelValue.value).filter(function (item) {\n          return !props.valueComparator(item, trueValue.value);\n        });\n      }\n\n      if (group) {\n        group.modelValue.value = newVal;\n      } else {\n        modelValue.value = newVal;\n      }\n    }\n  });\n\n  var _useTextColor = useTextColor(computed(function () {\n    if (props.error || props.disabled) return undefined;\n    return model.value ? props.color : props.baseColor;\n  })),\n      textColorClasses = _useTextColor.textColorClasses,\n      textColorStyles = _useTextColor.textColorStyles;\n\n  var _useBackgroundColor = useBackgroundColor(computed(function () {\n    return model.value && !props.error && !props.disabled ? props.color : props.baseColor;\n  })),\n      backgroundColorClasses = _useBackgroundColor.backgroundColorClasses,\n      backgroundColorStyles = _useBackgroundColor.backgroundColorStyles;\n\n  var icon = computed(function () {\n    return model.value ? props.trueIcon : props.falseIcon;\n  });\n  return {\n    group: group,\n    densityClasses: densityClasses,\n    trueValue: trueValue,\n    falseValue: falseValue,\n    model: model,\n    textColorClasses: textColorClasses,\n    textColorStyles: textColorStyles,\n    backgroundColorClasses: backgroundColorClasses,\n    backgroundColorStyles: backgroundColorStyles,\n    icon: icon\n  };\n}\nexport var VSelectionControl = genericComponent()({\n  name: 'VSelectionControl',\n  directives: {\n    Ripple: Ripple\n  },\n  inheritAttrs: false,\n  props: makeVSelectionControlProps(),\n  emits: {\n    'update:modelValue': function updateModelValue(value) {\n      return true;\n    }\n  },\n  setup: function setup(props, _ref) {\n    var attrs = _ref.attrs,\n        slots = _ref.slots;\n\n    var _useSelectionControl = useSelectionControl(props),\n        group = _useSelectionControl.group,\n        densityClasses = _useSelectionControl.densityClasses,\n        icon = _useSelectionControl.icon,\n        model = _useSelectionControl.model,\n        textColorClasses = _useSelectionControl.textColorClasses,\n        textColorStyles = _useSelectionControl.textColorStyles,\n        backgroundColorClasses = _useSelectionControl.backgroundColorClasses,\n        backgroundColorStyles = _useSelectionControl.backgroundColorStyles,\n        trueValue = _useSelectionControl.trueValue;\n\n    var uid = useId();\n    var isFocused = shallowRef(false);\n    var isFocusVisible = shallowRef(false);\n    var input = ref();\n    var id = computed(function () {\n      return props.id || \"input-\".concat(uid);\n    });\n    var isInteractive = computed(function () {\n      return !props.disabled && !props.readonly;\n    });\n    group === null || group === void 0 ? void 0 : group.onForceUpdate(function () {\n      if (input.value) {\n        input.value.checked = model.value;\n      }\n    });\n\n    function onFocus(e) {\n      if (!isInteractive.value) return;\n      isFocused.value = true;\n\n      if (matchesSelector(e.target, ':focus-visible') !== false) {\n        isFocusVisible.value = true;\n      }\n    }\n\n    function onBlur() {\n      isFocused.value = false;\n      isFocusVisible.value = false;\n    }\n\n    function onClickLabel(e) {\n      e.stopPropagation();\n    }\n\n    function onInput(e) {\n      if (!isInteractive.value) {\n        if (input.value) {\n          // model value is not updated when input is not interactive\n          // but the internal checked state of the input is still updated,\n          // so here it's value is restored\n          input.value.checked = model.value;\n        }\n\n        return;\n      }\n\n      if (props.readonly && group) {\n        nextTick(function () {\n          return group.forceUpdate();\n        });\n      }\n\n      model.value = e.target.checked;\n    }\n\n    useRender(function () {\n      var _slots$default, _slots$input, _slots$input2;\n\n      var label = slots.label ? slots.label({\n        label: props.label,\n        props: {\n          for: id.value\n        }\n      }) : props.label;\n\n      var _filterInputAttrs = filterInputAttrs(attrs),\n          _filterInputAttrs2 = _slicedToArray(_filterInputAttrs, 2),\n          rootAttrs = _filterInputAttrs2[0],\n          inputAttrs = _filterInputAttrs2[1];\n\n      var inputNode = _createVNode(\"input\", _mergeProps({\n        \"ref\": input,\n        \"checked\": model.value,\n        \"disabled\": !!props.disabled,\n        \"id\": id.value,\n        \"onBlur\": onBlur,\n        \"onFocus\": onFocus,\n        \"onInput\": onInput,\n        \"aria-disabled\": !!props.disabled,\n        \"aria-label\": props.label,\n        \"type\": props.type,\n        \"value\": trueValue.value,\n        \"name\": props.name,\n        \"aria-checked\": props.type === 'checkbox' ? model.value : undefined\n      }, inputAttrs), null);\n\n      return _createVNode(\"div\", _mergeProps({\n        \"class\": ['v-selection-control', {\n          'v-selection-control--dirty': model.value,\n          'v-selection-control--disabled': props.disabled,\n          'v-selection-control--error': props.error,\n          'v-selection-control--focused': isFocused.value,\n          'v-selection-control--focus-visible': isFocusVisible.value,\n          'v-selection-control--inline': props.inline\n        }, densityClasses.value, props.class]\n      }, rootAttrs, {\n        \"style\": props.style\n      }), [_createVNode(\"div\", {\n        \"class\": ['v-selection-control__wrapper', textColorClasses.value],\n        \"style\": textColorStyles.value\n      }, [(_slots$default = slots.default) === null || _slots$default === void 0 ? void 0 : _slots$default.call(slots, {\n        backgroundColorClasses: backgroundColorClasses,\n        backgroundColorStyles: backgroundColorStyles\n      }), _withDirectives(_createVNode(\"div\", {\n        \"class\": ['v-selection-control__input']\n      }, [(_slots$input = (_slots$input2 = slots.input) === null || _slots$input2 === void 0 ? void 0 : _slots$input2.call(slots, {\n        model: model,\n        textColorClasses: textColorClasses,\n        textColorStyles: textColorStyles,\n        backgroundColorClasses: backgroundColorClasses,\n        backgroundColorStyles: backgroundColorStyles,\n        inputNode: inputNode,\n        icon: icon.value,\n        props: {\n          onFocus: onFocus,\n          onBlur: onBlur,\n          id: id.value\n        }\n      })) !== null && _slots$input !== void 0 ? _slots$input : _createVNode(_Fragment, null, [icon.value && _createVNode(VIcon, {\n        \"key\": \"icon\",\n        \"icon\": icon.value\n      }, null), inputNode])]), [[_resolveDirective(\"ripple\"), props.ripple && [!props.disabled && !props.readonly, null, ['center', 'circle']]]])]), label && _createVNode(VLabel, {\n        \"for\": id.value,\n        \"onClick\": onClickLabel\n      }, {\n        default: function _default() {\n          return [label];\n        }\n      })]);\n    });\n    return {\n      isFocused: isFocused,\n      input: input\n    };\n  }\n});","map":{"version":3,"mappings":"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","names":["VIcon","VLabel","makeSelectionControlGroupProps","VSelectionControlGroupSymbol","useBackgroundColor","useTextColor","makeComponentProps","useDensity","useProxiedModel","Ripple","computed","inject","nextTick","ref","shallowRef","useId","filterInputAttrs","genericComponent","matchesSelector","propsFactory","useRender","wrapInArray","makeVSelectionControlProps","label","String","baseColor","trueValue","falseValue","value","useSelectionControl","props","group","undefined","densityClasses","modelValue","isMultiple","multiple","Array","isArray","model","get","val","some","v","valueComparator","set","readonly","currentValue","newVal","filter","item","error","disabled","color","textColorClasses","textColorStyles","backgroundColorClasses","backgroundColorStyles","icon","trueIcon","falseIcon","VSelectionControl","name","directives","inheritAttrs","emits","setup","_ref","attrs","slots","uid","isFocused","isFocusVisible","input","id","isInteractive","onForceUpdate","checked","onFocus","e","target","onBlur","onClickLabel","stopPropagation","onInput","forceUpdate","for","rootAttrs","inputAttrs","inputNode","type","inline","class","style","default","_withDirectives","_createVNode","ripple"],"sources":["../../../src/components/VSelectionControl/VSelectionControl.tsx"],"sourcesContent":["// Styles\nimport './VSelectionControl.sass'\n\n// Components\nimport { VIcon } from '@/components/VIcon'\nimport { VLabel } from '@/components/VLabel'\nimport { makeSelectionControlGroupProps, VSelectionControlGroupSymbol } from '@/components/VSelectionControlGroup/VSelectionControlGroup'\n\n// Composables\nimport { useBackgroundColor, useTextColor } from '@/composables/color'\nimport { makeComponentProps } from '@/composables/component'\nimport { useDensity } from '@/composables/density'\nimport { useProxiedModel } from '@/composables/proxiedModel'\n\n// Directives\nimport { Ripple } from '@/directives/ripple'\n\n// Utilities\nimport { computed, inject, nextTick, ref, shallowRef, useId } from 'vue'\nimport {\n  filterInputAttrs,\n  genericComponent,\n  matchesSelector,\n  propsFactory,\n  useRender,\n  wrapInArray,\n} from '@/util'\n\n// Types\nimport type { CSSProperties, ExtractPropTypes, Ref, VNode, WritableComputedRef } from 'vue'\nimport type { IconValue } from '@/composables/icons'\nimport type { EventProp, GenericProps } from '@/util'\n\nexport type SelectionControlSlot = {\n  model: WritableComputedRef<boolean>\n  textColorClasses: Ref<string[]>\n  textColorStyles: Ref<CSSProperties>\n  backgroundColorClasses: Ref<string[]>\n  backgroundColorStyles: Ref<CSSProperties>\n  inputNode: VNode\n  icon: IconValue | undefined\n  props: {\n    onBlur: (e: Event) => void\n    onFocus: (e: FocusEvent) => void\n    id: string\n  }\n}\n\nexport type VSelectionControlSlots = {\n  default: {\n    backgroundColorClasses: Ref<string[]>\n    backgroundColorStyles: Ref<CSSProperties>\n  }\n  label: { label: string | undefined, props: Record<string, unknown> }\n  input: SelectionControlSlot\n}\n\nexport const makeVSelectionControlProps = propsFactory({\n  label: String,\n  baseColor: String,\n  trueValue: null,\n  falseValue: null,\n  value: null,\n\n  ...makeComponentProps(),\n  ...makeSelectionControlGroupProps(),\n}, 'VSelectionControl')\n\nexport function useSelectionControl (\n  props: ExtractPropTypes<ReturnType<typeof makeVSelectionControlProps>> & {\n    'onUpdate:modelValue': EventProp | undefined\n  }\n) {\n  const group = inject(VSelectionControlGroupSymbol, undefined)\n  const { densityClasses } = useDensity(props)\n  const modelValue = useProxiedModel(props, 'modelValue')\n  const trueValue = computed(() => (\n    props.trueValue !== undefined ? props.trueValue\n    : props.value !== undefined ? props.value\n    : true\n  ))\n  const falseValue = computed(() => props.falseValue !== undefined ? props.falseValue : false)\n  const isMultiple = computed(() => (\n    !!props.multiple ||\n    (props.multiple == null && Array.isArray(modelValue.value))\n  ))\n  const model = computed({\n    get () {\n      const val = group ? group.modelValue.value : modelValue.value\n\n      return isMultiple.value\n        ? wrapInArray(val).some((v: any) => props.valueComparator(v, trueValue.value))\n        : props.valueComparator(val, trueValue.value)\n    },\n    set (val: boolean) {\n      if (props.readonly) return\n\n      const currentValue = val ? trueValue.value : falseValue.value\n\n      let newVal = currentValue\n\n      if (isMultiple.value) {\n        newVal = val\n          ? [...wrapInArray(modelValue.value), currentValue]\n          : wrapInArray(modelValue.value).filter((item: any) => !props.valueComparator(item, trueValue.value))\n      }\n\n      if (group) {\n        group.modelValue.value = newVal\n      } else {\n        modelValue.value = newVal\n      }\n    },\n  })\n  const { textColorClasses, textColorStyles } = useTextColor(computed(() => {\n    if (props.error || props.disabled) return undefined\n\n    return model.value ? props.color : props.baseColor\n  }))\n  const { backgroundColorClasses, backgroundColorStyles } = useBackgroundColor(computed(() => {\n    return (\n      model.value &&\n      !props.error &&\n      !props.disabled\n    ) ? props.color : props.baseColor\n  }))\n  const icon = computed(() => model.value ? props.trueIcon : props.falseIcon)\n\n  return {\n    group,\n    densityClasses,\n    trueValue,\n    falseValue,\n    model,\n    textColorClasses,\n    textColorStyles,\n    backgroundColorClasses,\n    backgroundColorStyles,\n    icon,\n  }\n}\n\nexport const VSelectionControl = genericComponent<new <T>(\n  props: {\n    modelValue?: T\n    'onUpdate:modelValue'?: (value: T) => void\n  },\n  slots: VSelectionControlSlots,\n) => GenericProps<typeof props, typeof slots>>()({\n  name: 'VSelectionControl',\n\n  directives: { Ripple },\n\n  inheritAttrs: false,\n\n  props: makeVSelectionControlProps(),\n\n  emits: {\n    'update:modelValue': (value: any) => true,\n  },\n\n  setup (props, { attrs, slots }) {\n    const {\n      group,\n      densityClasses,\n      icon,\n      model,\n      textColorClasses,\n      textColorStyles,\n      backgroundColorClasses,\n      backgroundColorStyles,\n      trueValue,\n    } = useSelectionControl(props)\n    const uid = useId()\n    const isFocused = shallowRef(false)\n    const isFocusVisible = shallowRef(false)\n    const input = ref<HTMLInputElement>()\n    const id = computed(() => props.id || `input-${uid}`)\n    const isInteractive = computed(() => !props.disabled && !props.readonly)\n\n    group?.onForceUpdate(() => {\n      if (input.value) {\n        input.value.checked = model.value\n      }\n    })\n\n    function onFocus (e: FocusEvent) {\n      if (!isInteractive.value) return\n\n      isFocused.value = true\n      if (matchesSelector(e.target as HTMLElement, ':focus-visible') !== false) {\n        isFocusVisible.value = true\n      }\n    }\n\n    function onBlur () {\n      isFocused.value = false\n      isFocusVisible.value = false\n    }\n\n    function onClickLabel (e: Event) {\n      e.stopPropagation()\n    }\n\n    function onInput (e: Event) {\n      if (!isInteractive.value) {\n        if (input.value) {\n          // model value is not updated when input is not interactive\n          // but the internal checked state of the input is still updated,\n          // so here it's value is restored\n          input.value.checked = model.value\n        }\n\n        return\n      }\n\n      if (props.readonly && group) {\n        nextTick(() => group.forceUpdate())\n      }\n      model.value = (e.target as HTMLInputElement).checked\n    }\n\n    useRender(() => {\n      const label = slots.label\n        ? slots.label({\n          label: props.label,\n          props: { for: id.value },\n        })\n        : props.label\n      const [rootAttrs, inputAttrs] = filterInputAttrs(attrs)\n\n      const inputNode = (\n        <input\n          ref={ input }\n          checked={ model.value }\n          disabled={ !!props.disabled }\n          id={ id.value }\n          onBlur={ onBlur }\n          onFocus={ onFocus }\n          onInput={ onInput }\n          aria-disabled={ !!props.disabled }\n          aria-label={ props.label }\n          type={ props.type }\n          value={ trueValue.value }\n          name={ props.name }\n          aria-checked={ props.type === 'checkbox' ? model.value : undefined }\n          { ...inputAttrs }\n        />\n      )\n\n      return (\n        <div\n          class={[\n            'v-selection-control',\n            {\n              'v-selection-control--dirty': model.value,\n              'v-selection-control--disabled': props.disabled,\n              'v-selection-control--error': props.error,\n              'v-selection-control--focused': isFocused.value,\n              'v-selection-control--focus-visible': isFocusVisible.value,\n              'v-selection-control--inline': props.inline,\n            },\n            densityClasses.value,\n            props.class,\n          ]}\n          { ...rootAttrs }\n          style={ props.style }\n        >\n          <div\n            class={[\n              'v-selection-control__wrapper',\n              textColorClasses.value,\n            ]}\n            style={ textColorStyles.value }\n          >\n            { slots.default?.({\n              backgroundColorClasses,\n              backgroundColorStyles,\n            })}\n\n            <div\n              class={[\n                'v-selection-control__input',\n              ]}\n              v-ripple={ props.ripple && [\n                !props.disabled && !props.readonly,\n                null,\n                ['center', 'circle'],\n              ]}\n            >\n              { slots.input?.({\n                model,\n                textColorClasses,\n                textColorStyles,\n                backgroundColorClasses,\n                backgroundColorStyles,\n                inputNode,\n                icon: icon.value,\n                props: {\n                  onFocus,\n                  onBlur,\n                  id: id.value,\n                },\n              } satisfies SelectionControlSlot) ?? (\n                <>\n                  { icon.value && <VIcon key=\"icon\" icon={ icon.value } /> }\n\n                  { inputNode }\n                </>\n              )}\n            </div>\n          </div>\n\n          { label && (\n            <VLabel for={ id.value } onClick={ onClickLabel }>\n              { label }\n            </VLabel>\n          )}\n        </div>\n      )\n    })\n\n    return {\n      isFocused,\n      input,\n    }\n  },\n})\n\nexport type VSelectionControl = InstanceType<typeof VSelectionControl>\n"]},"metadata":{},"sourceType":"module"}